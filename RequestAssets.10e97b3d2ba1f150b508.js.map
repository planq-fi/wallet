{"version":3,"sources":["webpack:///./src/features/RequestAssets/RequestAssets.tsx"],"names":["isAssetToken","tokenType","QRDisplay","styled","div","SLabel","label","Fieldset","fieldset","AssetFields","Divider","FullWidthInput","Input","Amount","Asset","CodeHeader","CodeHeading","Heading","RequestAssets","history","accounts","useSelector","getStoreAccounts","networks","selectNetworks","defaultAccount","getDefaultAccount","assets","useAssets","networkId","setNetworkId","useState","network","getNetworkById","relevantAssets","filterValidAssets","id","filteredAssets","sortByTicker","chosenAssetUuid","setAssetUuid","find","a","type","uuid","selectedAsset","asset","useEffect","FormSchema","object","shape","amount","number","min","translateRaw","required","typeError","test","validateAmountField","initialValues","recipientAddress","validateAmount","error","decimal","isNaN","isValidAmount","ContentPanel","heading","icon","receiveIcon","onBack","push","ROUTE_PATHS","DASHBOARD","path","mobileMaxWidth","Formik","onSubmit","noOp","validationSchema","values","errors","touched","Form","htmlFor","Field","name","component","field","form","AccountSelector","value","onSelect","option","setFieldValue","validate","data-lpignore","onChange","target","setFieldTouched","sanitizeDecimalSeparator","placeholder","inputMode","InlineMessage","AssetSelector","showAssetIcon","showAssetName","searchable","address","length","as","Tooltip","tooltip","className","src","questionToolTip","QRCode","data","contractAddress","buildEIP681TokenRequest","chainId","buildEIP681EtherRequest","CopyableCodeBlock","BusyBottom","BusyBottomConfig","SUPPORT","withRouter"],"mappings":"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","file":"RequestAssets.10e97b3d2ba1f150b508.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Heading, Input, Tooltip } from '@mycrypto/ui';\nimport { Field, FieldProps, Form, Formik, FormikProps } from 'formik';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { number, object } from 'yup';\n\nimport questionToolTip from '@assets/images/icn-question.svg';\nimport receiveIcon from '@assets/images/icn-receive.svg';\nimport {\n  AccountSelector,\n  AssetSelector,\n  BusyBottom,\n  ContentPanel,\n  CopyableCodeBlock,\n  InlineMessage,\n  QRCode\n} from '@components';\nimport { ROUTE_PATHS } from '@config';\nimport { validateAmountField } from '@features/SendAssets/components';\nimport { getNetworkById, useAssets } from '@services/Store';\nimport { getDefaultAccount, getStoreAccounts, selectNetworks, useSelector } from '@store';\nimport translate, { translateRaw } from '@translations';\nimport { BusyBottomConfig, IAccount as IIAccount } from '@types';\nimport {\n  buildEIP681EtherRequest,\n  buildEIP681TokenRequest,\n  filterValidAssets,\n  isValidAmount,\n  noOp,\n  sanitizeDecimalSeparator,\n  sortByTicker\n} from '@utils';\n\nconst isAssetToken = (tokenType: string) => {\n  return tokenType !== 'base';\n};\n\nconst QRDisplay = styled.div`\n  margin: auto;\n  width: 60%;\n`;\n\nconst SLabel = styled.label`\n  margin-bottom: 8px;\n  color: #333333;\n  font-weight: normal;\n`;\n\nconst Fieldset = styled.fieldset`\n  margin-bottom: 15px;\n`;\n\nconst AssetFields = styled.div`\n  margin-bottom: 15px;\n  align-items: center;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  margin: 30px 0;\n  background: #e3edff;\n`;\n\nconst FullWidthInput = styled(Input)`\n  width: 100%;\n`;\n\nconst Amount = styled.div`\n  width: 100%;\n`;\n\nconst Asset = styled.div`\n  margin-top: 15px;\n  width: 100%;\n\n  .select-container {\n    transition: box-shadow 0.12s;\n    height: 54px;\n  }\n\n  .is-focused {\n    border: none;\n    outline: none;\n    box-shadow: 0 0 0 0.25em rgba(0, 122, 153, 0.65);\n  }\n  .Select-menu-outer {\n    max-height: 410px;\n    border: none;\n    box-shadow: 0 0 0 0.18em rgba(0, 122, 153, 0.65);\n    .Select-menu {\n      max-height: 400px;\n    }\n  }\n`;\n\nconst CodeHeader = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CodeHeading = styled(Heading)`\n  margin-top: 8px;\n`;\n\nexport function RequestAssets({ history }: RouteComponentProps) {\n  const accounts = useSelector(getStoreAccounts);\n  const networks = useSelector(selectNetworks);\n  const defaultAccount = useSelector(getDefaultAccount(true));\n  const { assets } = useAssets();\n  const [networkId, setNetworkId] = useState(defaultAccount!.networkId);\n  const network = getNetworkById(networkId, networks);\n  const relevantAssets = network ? filterValidAssets(assets, network.id) : [];\n  const filteredAssets = sortByTicker(relevantAssets);\n\n  const [chosenAssetUuid, setAssetUuid] = useState(\n    filteredAssets.find((a) => a.type === 'base')?.uuid\n  );\n  const selectedAsset = filteredAssets.find((asset) => asset.uuid === chosenAssetUuid);\n\n  useEffect(() => setAssetUuid(filteredAssets.find((a) => a.type === 'base')?.uuid), [networkId]);\n\n  const FormSchema = object().shape({\n    amount: number()\n      .min(0, translateRaw('ERROR_0'))\n      .required(translateRaw('REQUIRED'))\n      .typeError(translateRaw('ERROR_0'))\n      .test(validateAmountField())\n  });\n\n  const initialValues = {\n    amount: '',\n    asset: {},\n    recipientAddress: defaultAccount!\n  };\n\n  const validateAmount = (amount: any) => {\n    let error;\n    if (selectedAsset) {\n      const { decimal } = selectedAsset;\n      if (isNaN(amount)) {\n        error = translateRaw('REQUEST_FORM_ERROR_TYPE');\n      } else if (decimal && !isValidAmount(decimal)(amount)) {\n        error = translateRaw('REQUEST_FORM_ERROR_AMOUNT');\n      }\n    }\n\n    return error;\n  };\n\n  return (\n    <ContentPanel\n      heading={translateRaw('REQUEST')}\n      icon={receiveIcon}\n      onBack={() => history.push(ROUTE_PATHS.DASHBOARD.path)}\n      mobileMaxWidth=\"100%;\"\n    >\n      <Formik initialValues={initialValues} onSubmit={noOp} validationSchema={FormSchema}>\n        {({\n          values: { amount, recipientAddress },\n          errors,\n          touched\n        }: FormikProps<typeof initialValues>) => (\n          <Form>\n            <Fieldset>\n              <SLabel htmlFor=\"recipientAddress\">{translate('X_RECIPIENT')}</SLabel>\n              <Field\n                name=\"recipientAddress\"\n                component={({ field, form }: FieldProps) => (\n                  <AccountSelector\n                    name={field.name}\n                    value={field.value}\n                    accounts={accounts}\n                    onSelect={(option: IIAccount) => {\n                      form.setFieldValue(field.name, option);\n                      if (option.networkId) {\n                        setNetworkId(option.networkId);\n                      }\n                    }}\n                  />\n                )}\n              />\n            </Fieldset>\n            <AssetFields>\n              <Amount>\n                <SLabel htmlFor=\"amount\">{translate('X_AMOUNT')}</SLabel>\n                <Field name=\"amount\" validate={validateAmount}>\n                  {({ field, form }: FieldProps<string>) => (\n                    <FullWidthInput\n                      data-lpignore=\"true\"\n                      value={field.value}\n                      onChange={({ target: { value } }) => {\n                        form.setFieldTouched(field.name, true, true);\n                        form.setFieldValue(field.name, sanitizeDecimalSeparator(value));\n                      }}\n                      placeholder=\"0.00\"\n                      inputMode=\"decimal\"\n                    />\n                  )}\n                </Field>\n              </Amount>\n              {errors.amount && touched.amount && <InlineMessage>{errors.amount}</InlineMessage>}\n              <Asset>\n                <SLabel htmlFor=\"asset\">{translate('X_ASSET')}</SLabel>\n                <Field\n                  name=\"asset\"\n                  component={({ field, form }: FieldProps) => (\n                    <AssetSelector\n                      selectedAsset={selectedAsset ? selectedAsset : null}\n                      assets={filteredAssets}\n                      showAssetIcon={false}\n                      showAssetName={true}\n                      searchable={true}\n                      onSelect={(option) => {\n                        form.setFieldValue(field.name, option);\n                        if (option.uuid) {\n                          setAssetUuid(option.uuid);\n                        }\n                      }}\n                    />\n                  )}\n                />\n              </Asset>\n            </AssetFields>\n            {!errors.amount &&\n              selectedAsset &&\n              recipientAddress.address &&\n              network &&\n              amount.length > 0 && (\n                <>\n                  <Divider />\n                  <CodeHeader>\n                    <CodeHeading as=\"h3\">{translateRaw('REQUEST_FORM_CODE_HEADER')}</CodeHeading>\n                    <Tooltip tooltip={translate('REQUEST_FORM_TOOLTIP')}>\n                      <img className=\"Tool-tip-img\" src={questionToolTip} />\n                    </Tooltip>\n                  </CodeHeader>\n\n                  <Fieldset>\n                    <SLabel>{translate('REQUEST_QR_CODE')}</SLabel>\n                    <QRDisplay>\n                      <QRCode\n                        data={\n                          isAssetToken(selectedAsset.type) &&\n                          selectedAsset.contractAddress &&\n                          selectedAsset.decimal\n                            ? buildEIP681TokenRequest(\n                                recipientAddress.address,\n                                selectedAsset.contractAddress,\n                                network.chainId,\n                                amount,\n                                selectedAsset.decimal\n                              )\n                            : buildEIP681EtherRequest(\n                                recipientAddress.address,\n                                network.chainId,\n                                amount\n                              )\n                        }\n                      />\n                    </QRDisplay>\n                  </Fieldset>\n                  <Fieldset>\n                    <SLabel>{translate('REQUEST_PAYMENT_CODE')}</SLabel>\n                    <CopyableCodeBlock>\n                      {isAssetToken(selectedAsset.type) &&\n                      selectedAsset.contractAddress &&\n                      selectedAsset.decimal\n                        ? buildEIP681TokenRequest(\n                            recipientAddress.address,\n                            selectedAsset.contractAddress,\n                            network.chainId,\n                            amount,\n                            selectedAsset.decimal\n                          )\n                        : buildEIP681EtherRequest(\n                            recipientAddress.address,\n                            network.chainId,\n                            amount\n                          )}\n                    </CopyableCodeBlock>\n                  </Fieldset>\n                </>\n              )}\n          </Form>\n        )}\n      </Formik>\n      <BusyBottom type={BusyBottomConfig.SUPPORT} />\n    </ContentPanel>\n  );\n}\n\nexport default withRouter(RequestAssets);\n"],"sourceRoot":""}