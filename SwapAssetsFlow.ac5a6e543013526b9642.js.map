{"version":3,"sources":["webpack:///./src/features/SwapAssets/SwapAssetsFlow.tsx","webpack:///./src/features/SwapAssets/config.ts","webpack:///./src/features/SwapAssets/components/index.ts","webpack:///./src/features/SwapAssets/components/SwapAssets.tsx","webpack:///./src/features/SwapAssets/components/SwapQuote.tsx","webpack:///./src/features/SwapAssets/components/ConfirmSwap.tsx","webpack:///./src/features/SwapAssets/components/SwapTransactionReceipt.tsx","webpack:///./src/features/SwapAssets/components/ConfirmSwapMultiTx.tsx","webpack:///./src/features/SwapAssets/stateFormFactory.tsx","webpack:///./src/features/SwapAssets/types.ts"],"names":["withRouter","props","defaultAccount","useSelector","getDefaultAccount","setNetwork","handleFromAssetSelected","handleToAssetSelected","calculateNewFromAmount","calculateNewToAmount","handleFromAmountChanged","handleToAmountChanged","handleAccountSelected","handleGasLimitEstimation","handleRefreshQuote","handleFlipAssets","handleSwapMax","formState","useStateReducer","SwapFormFactory","swapFormInitialState","account","assets","fromAsset","toAsset","fromAmount","toAmount","isCalculatingFromAmount","isCalculatingToAmount","fromAmountError","toAmountError","lastChangedAmount","exchangeRate","approvalGasLimit","tradeGasLimit","gasPrice","expiration","approvalTx","isEstimatingGas","tradeTx","selectedNetwork","gas","assetPair","setAssetPair","useState","state","initWith","prepareTx","sendTx","reset","stopYield","useTxMulti","canYield","isSubmitting","transactions","error","txError","steps","title","translateRaw","backBtnText","component","SwapAssets","actions","onSuccess","pair","bigify","rate","Promise","resolve","map","appendSender","address","network","flatMap","tx","idx","length","ConfirmSwapMultiTx","ConfirmSwap","flowConfig","currentTxIdx","reason","message","onComplete","txRaw","WALLET_STEPS","wallet","senderAccount","rawTransaction","payload","SwapTransactionReceipt","setStep","step","stepObject","StepComponent","useEffect","status","ITxStatus","PREPARING","ExtendedContentPanel","onBack","history","push","ROUTE_PATHS","DASHBOARD","path","stepper","current","total","width","heading","description","stepsContent","icon","step1SVG","step2SVG","Button","getSettings","getIsDemoMode","selectNetwork","baseAsset","getBaseAssetByNetwork","isExpired","setIsExpired","accounts","getStoreAccounts","getAssetRate","useRates","userAssets","getUserAssets","baseAssetRate","filteredAssets","getUnselectedAssets","estimatedGasFee","filter","a","find","userAsset","uuid","useCallback","getEstimatedGasFee","filteredAccounts","getAccountsWithAssetBalance","sortByLabel","JSON","stringify","undefined","useInterval","expired","getTimeDifference","Box","mt","mb","fromAssetRate","settings","border","p","variant","justifyContent","Heading","m","fontWeight","LinkApp","href","onClick","Icon","type","color","Text","ml","SPACING","XS","Tooltip","tooltip","Amount","style","textDecoration","text","toFixed","ticker","fiat","symbol","getFiat","amount","convertToFiat","asset","Body","textTransform","TimeCountdown","value","currentAssets","getAccountsAssets","txConfig","makeSwapTxConfig","toString","ConfirmTransaction","resetFlow","txType","ITxType","SWAP","customComponent","SwapFromToDiagram","fromSymbol","toSymbol","fromUUID","toUUID","getAssetByUUID","useAssets","useSettings","getNetworkById","useNetworks","swapDisplay","txItems","APPROVAL","makeTxConfigFromTx","makeTxItem","txHash","txReceipt","txReceipts","networkId","TxReceipt","disableDynamicTxReceiptDisplay","completeButton","MultiTxReceipt","transactionsConfigs","completeButtonText","t","broadcasting","findIndex","s","BROADCASTED","approveTx","content","$token","buttonText","loading","transferTx","Typography","as","marginBottom","VerticalStepper","currentStep","LAST_CHANGED_AMOUNT","FROM","setState","getSwapAssetsByNetwork","sortedAssets","sort","asset1","asset2","localeCompare","prevState","async","lte","DexService","instance","getOrderDetailsTo","price","sellAmount","rest","withCommission","divideBNFloats","MYC_DEX_COMMISSION_RATE","e","axios","isCancel","console","response","data","code","$link","formatErrorEmailMarkdown","getOrderDetailsFrom","buyAmount","multiplyBNFloats","TO","requiresApproval","checkRequiresApproval","to","inputGasLimitToHex","getGasEstimate","err","balance","getAccountBalance","formatUnits","decimal","DEFAULT_ASSET_DECIMAL"],"mappings":"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","file":"SwapAssetsFlow.ac5a6e543013526b9642.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { ExtendedContentPanel, WALLET_STEPS } from '@components';\nimport { ROUTE_PATHS } from '@config';\nimport { appendSender } from '@helpers';\nimport { useTxMulti } from '@hooks';\nimport { getDefaultAccount } from '@store/account.slice';\nimport { useSelector } from '@store/selectors';\nimport { translateRaw } from '@translations';\nimport { ITxHash, ITxSigned, ITxStatus, TxParcel } from '@types';\nimport { bigify, useStateReducer } from '@utils';\n\nimport { ConfirmSwap, ConfirmSwapMultiTx, SwapAssets, SwapTransactionReceipt } from './components';\nimport { SwapFormFactory, swapFormInitialState } from './stateFormFactory';\nimport { IAssetPair, SwapFormState } from './types';\n\ninterface TStep {\n  title?: string;\n  description?: string;\n  component: any;\n  props: any;\n  actions?: any;\n  backBtnText: string;\n}\n\nconst SwapAssetsFlow = (props: RouteComponentProps) => {\n  const defaultAccount = useSelector(getDefaultAccount());\n  const {\n    setNetwork,\n    handleFromAssetSelected,\n    handleToAssetSelected,\n    calculateNewFromAmount,\n    calculateNewToAmount,\n    handleFromAmountChanged,\n    handleToAmountChanged,\n    handleAccountSelected,\n    handleGasLimitEstimation,\n    handleRefreshQuote,\n    handleFlipAssets,\n    handleSwapMax,\n    formState\n  } = useStateReducer(SwapFormFactory, { ...swapFormInitialState, account: defaultAccount });\n  const {\n    assets,\n    account,\n    fromAsset,\n    toAsset,\n    fromAmount,\n    toAmount,\n    isCalculatingFromAmount,\n    isCalculatingToAmount,\n    fromAmountError,\n    toAmountError,\n    lastChangedAmount,\n    exchangeRate,\n    approvalGasLimit,\n    tradeGasLimit,\n    gasPrice,\n    expiration,\n    approvalTx,\n    isEstimatingGas,\n    tradeTx,\n    selectedNetwork,\n    gas\n  }: SwapFormState = formState;\n\n  const [assetPair, setAssetPair] = useState({});\n  const { state, initWith, prepareTx, sendTx, reset, stopYield } = useTxMulti();\n  const { canYield, isSubmitting, transactions, error: txError } = state;\n\n  const goToFirstStep = () => {\n    setStep(0);\n  };\n\n  const goToNextStep = () => {\n    setStep(step + 1);\n  };\n\n  const goToPreviousStep = () => {\n    const { history } = props;\n    if (step === 0) {\n      history.push(ROUTE_PATHS.DASHBOARD.path);\n    } else {\n      setStep(step - 1);\n    }\n  };\n\n  const steps: TStep[] = [\n    {\n      title: translateRaw('SWAP'),\n      backBtnText: translateRaw('DASHBOARD'),\n      component: SwapAssets,\n      props: {\n        fromAmount,\n        toAmount,\n        fromAsset,\n        toAsset,\n        assets,\n        isCalculatingFromAmount,\n        isCalculatingToAmount,\n        fromAmountError,\n        toAmountError,\n        txError,\n        exchangeRate,\n        account,\n        approvalGasLimit,\n        tradeGasLimit,\n        gasPrice,\n        expiration,\n        approvalTx,\n        isEstimatingGas,\n        isSubmitting,\n        selectedNetwork,\n        gas\n      },\n      actions: {\n        handleFromAssetSelected,\n        handleToAssetSelected,\n        calculateNewFromAmount,\n        calculateNewToAmount,\n        handleFromAmountChanged,\n        handleToAmountChanged,\n        handleAccountSelected,\n        handleGasLimitEstimation,\n        handleRefreshQuote,\n        handleFlipAssets,\n        handleSwapMax,\n        setNetwork,\n        onSuccess: () => {\n          const pair: IAssetPair = {\n            fromAsset,\n            toAsset,\n            fromAmount: bigify(fromAmount),\n            toAmount: bigify(toAmount),\n            rate: bigify(exchangeRate!),\n            lastChangedAmount\n          };\n          initWith(\n            () =>\n              Promise.resolve(\n                (approvalTx ? [approvalTx, tradeTx!] : [tradeTx!]).map(\n                  appendSender(account.address)\n                )\n              ),\n            account,\n            account.network\n          );\n          setAssetPair(pair);\n        }\n      }\n    },\n    ...transactions.flatMap((tx: Required<TxParcel>, idx) => [\n      {\n        title: translateRaw('SWAP_CONFIRM_TITLE'),\n        backBtnText: translateRaw('SWAP'),\n        component: transactions.length > 1 ? ConfirmSwapMultiTx : ConfirmSwap,\n        props: {\n          flowConfig: assetPair,\n          account,\n          isSubmitting,\n          transactions,\n          currentTxIdx: idx,\n          error: txError?.reason ?? txError?.message\n        },\n        actions: {\n          onComplete: () => {\n            prepareTx(tx.txRaw);\n          }\n        }\n      },\n      {\n        // No title as signing page already has a title\n        title: '',\n        backBtnText: translateRaw('SWAP_CONFIRM_TITLE'),\n        component: account && WALLET_STEPS[account.wallet],\n        props: {\n          network: account && account.network,\n          senderAccount: account,\n          rawTransaction: tx.txRaw\n        },\n        actions: {\n          onSuccess: (payload: ITxHash | ITxSigned) => sendTx(payload)\n        }\n      }\n    ]),\n    {\n      title: translateRaw('TRANSACTION_BROADCASTED'),\n      backBtnText: translateRaw('DEP_SIGNTX'),\n      component: SwapTransactionReceipt,\n      props: {\n        assetPair,\n        account,\n        transactions,\n        onSuccess: () => {\n          reset();\n          goToFirstStep();\n        }\n      }\n    }\n  ];\n\n  const [step, setStep] = useState(0);\n  const stepObject = steps[step];\n  const StepComponent = stepObject.component;\n\n  useEffect(() => {\n    if (!canYield) return;\n    // Make sure to prepare single tx before showing to user\n    if (transactions.length === 1 && transactions[0].status === ITxStatus.PREPARING) {\n      prepareTx(transactions[0].txRaw);\n    } else {\n      // Go to next step after preparing tx for MTX\n      goToNextStep();\n    }\n    stopYield();\n  }, [canYield]);\n\n  return (\n    <ExtendedContentPanel\n      onBack={goToPreviousStep}\n      stepper={{ current: step + 1, total: steps.length }}\n      width=\"650px\"\n      heading={stepObject.title}\n      description={stepObject.description}\n      backBtnText={stepObject.backBtnText}\n    >\n      <StepComponent\n        key={`${stepObject.title}${step}`}\n        {...stepObject.props}\n        {...stepObject.actions}\n      />\n    </ExtendedContentPanel>\n  );\n};\n\nexport default withRouter(SwapAssetsFlow);\n","import step2SVG from '@assets/images/icn-receive.svg';\nimport step1SVG from '@assets/images/icn-send.svg';\nimport { translateRaw } from '@translations';\n\nexport const stepsContent = [\n  {\n    title: translateRaw('APPROVE_SWAP'),\n    icon: step1SVG\n  },\n  {\n    title: translateRaw('COMPLETE_SWAP'),\n    icon: step2SVG\n  }\n];\n","export { default as SwapAssets } from './SwapAssets';\nexport { default as ConfirmSwap } from './ConfirmSwap';\nexport { default as SwapTransactionReceipt } from './SwapTransactionReceipt';\nexport { default as ConfirmSwapMultiTx } from './ConfirmSwapMultiTx';\n","import { ChangeEvent, useCallback, useEffect, useState } from 'react';\n\nimport debounce from 'lodash/debounce';\nimport styled from 'styled-components';\n\nimport {\n  AccountSelector,\n  AssetSelector,\n  Body,\n  Box,\n  Button,\n  DemoGatewayBanner,\n  Icon,\n  InlineMessage,\n  InputField,\n  LinkApp,\n  NetworkSelector,\n  PoweredByText,\n  Tooltip\n} from '@components';\nimport { DEX_NETWORKS } from '@config';\nimport { useRates } from '@services/Rates';\nimport {\n  getBaseAssetByNetwork,\n  getIsDemoMode,\n  getSettings,\n  getStoreAccounts,\n  getUserAssets,\n  selectNetwork,\n  useSelector\n} from '@store';\nimport { SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport { Asset, ISwapAsset, Network, NetworkId, StoreAccount } from '@types';\nimport { getTimeDifference, sortByLabel, useInterval } from '@utils';\n\nimport { getAccountsWithAssetBalance, getEstimatedGasFee, getUnselectedAssets } from '../helpers';\nimport { SwapFormState } from '../types';\nimport { SwapQuote } from './SwapQuote';\n\nconst StyledButton = styled(Button)`\n  margin-top: 12px;\n  width: 100%;\n  && div {\n    justify-content: center;\n  }\n`;\n\ntype Props = SwapFormState & {\n  isSubmitting: boolean;\n  txError?: CustomError;\n  onSuccess(): void;\n  handleFromAssetSelected(asset: ISwapAsset): void;\n  handleToAssetSelected(asset: ISwapAsset): void;\n  calculateNewFromAmount(value: string): Promise<void>;\n  calculateNewToAmount(value: string): Promise<void>;\n  handleFromAmountChanged(value: string): void;\n  handleToAmountChanged(value: string): void;\n  handleAccountSelected(account?: StoreAccount): void;\n  handleGasLimitEstimation(): void;\n  handleRefreshQuote(): void;\n  handleFlipAssets(): void;\n  handleSwapMax(): void;\n  setNetwork(network: NetworkId): void;\n};\n\nconst SwapAssets = (props: Props) => {\n  const {\n    selectedNetwork,\n    account,\n    fromAmount,\n    toAmount,\n    fromAsset,\n    toAsset,\n    assets,\n    isCalculatingFromAmount,\n    isCalculatingToAmount,\n    fromAmountError,\n    toAmountError,\n    txError,\n    onSuccess,\n    isSubmitting,\n    handleFromAssetSelected,\n    handleToAssetSelected,\n    calculateNewFromAmount,\n    calculateNewToAmount,\n    handleFromAmountChanged,\n    handleToAmountChanged,\n    handleAccountSelected,\n    handleGasLimitEstimation,\n    handleRefreshQuote,\n    handleFlipAssets,\n    handleSwapMax,\n    approvalTx,\n    exchangeRate,\n    approvalGasLimit,\n    tradeGasLimit,\n    gasPrice,\n    isEstimatingGas,\n    expiration,\n    setNetwork,\n    gas\n  } = props;\n\n  const settings = useSelector(getSettings);\n  const isDemoMode = useSelector(getIsDemoMode);\n  const network = useSelector(selectNetwork(selectedNetwork));\n  const baseAsset = useSelector(getBaseAssetByNetwork(network));\n\n  const [isExpired, setIsExpired] = useState(false);\n  const accounts = useSelector(getStoreAccounts);\n  const { getAssetRate } = useRates();\n\n  const userAssets = useSelector(getUserAssets);\n\n  const baseAssetRate = getAssetRate(baseAsset);\n  const fromAssetRate = fromAsset && getAssetRate(fromAsset as Asset);\n\n  // show only unused assets and assets owned by the user\n  const filteredAssets = getUnselectedAssets(assets, fromAsset, toAsset);\n  const ownedAssets = filteredAssets.filter((a) =>\n    userAssets.find((userAsset) => a.uuid === userAsset.uuid)\n  );\n\n  const calculateNewToAmountDebounced = useCallback(debounce(calculateNewToAmount, 500), [\n    account,\n    fromAsset,\n    toAsset\n  ]);\n\n  // SEND AMOUNT CHANGED\n  const handleFromAmountChangedEvent = (e: ChangeEvent<HTMLSelectElement>) => {\n    const value = e.target.value;\n    handleFromAmountChanged(value);\n\n    calculateNewToAmountDebounced(value);\n  };\n\n  const calculateNewFromAmountDebounced = useCallback(debounce(calculateNewFromAmount, 500), [\n    account,\n    fromAsset,\n    toAsset\n  ]);\n\n  // RECEIVE AMOUNT CHANGED\n  const handleToAmountChangedEvent = async (e: ChangeEvent<HTMLSelectElement>) => {\n    const value = e.target.value;\n    handleToAmountChanged(value);\n\n    calculateNewFromAmountDebounced(value);\n  };\n\n  const estimatedGasFee = getEstimatedGasFee({\n    tradeGasLimit,\n    approvalGasLimit,\n    baseAssetRate,\n    gas\n  });\n\n  // Accounts with a balance of the chosen asset and base asset\n  const filteredAccounts = fromAsset\n    ? getAccountsWithAssetBalance(accounts, fromAsset, fromAmount, baseAsset.uuid, estimatedGasFee)\n    : [];\n\n  useEffect(() => {\n    const defaultAccount = sortByLabel(filteredAccounts)[0];\n    if (defaultAccount && ((account && account.uuid !== defaultAccount.uuid) || !account)) {\n      handleAccountSelected(defaultAccount);\n    }\n  }, [JSON.stringify(filteredAccounts)]);\n\n  useEffect(() => {\n    if (\n      fromAmount &&\n      fromAsset &&\n      account &&\n      !filteredAccounts.find((a) => a.uuid === account.uuid)\n    ) {\n      handleAccountSelected(undefined);\n    }\n  }, [fromAsset, fromAmount, gasPrice, tradeGasLimit, approvalGasLimit]);\n\n  useEffect(() => {\n    handleRefreshQuote();\n  }, [account, toAsset]);\n\n  useEffect(() => {\n    handleGasLimitEstimation();\n  }, [approvalTx, account]);\n\n  useInterval(\n    () => {\n      if (!expiration) {\n        return;\n      }\n      const expired = getTimeDifference(expiration) >= 0;\n      if (expired !== isExpired) {\n        setIsExpired(expired);\n      }\n    },\n    1000,\n    false,\n    [expiration]\n  );\n\n  const checkNetwork = (n: Network) => DEX_NETWORKS.includes(n.id);\n  return (<Box mt=\"20px\" mb=\"1em\">Coming soon</Box>)\n\n  return (\n    <>\n      <Box mt=\"20px\" mb=\"1em\">\n        {isDemoMode && <DemoGatewayBanner />}\n        <Box mb=\"15px\">\n          <NetworkSelector network={selectedNetwork} filter={checkNetwork} onChange={setNetwork} />\n        </Box>\n        <Box mb=\"15px\">\n          <Box>\n            <Body>\n              {translateRaw('ACCOUNT_SELECTION_PLACEHOLDER')}{' '}\n              <Tooltip tooltip={translateRaw('SWAP_SELECT_ACCOUNT_TOOLTIP')} />\n            </Body>\n          </Box>\n          <AccountSelector\n            name=\"account\"\n            value={account}\n            accounts={filteredAccounts}\n            onSelect={handleAccountSelected}\n            asset={fromAsset ? userAssets.find((x) => x.uuid === fromAsset.uuid) : undefined}\n          />\n          {!filteredAccounts.length && fromAsset && (\n            <InlineMessage>{translate('ACCOUNT_SELECTION_NO_FUNDS')}</InlineMessage>\n          )}\n        </Box>\n        <Box display=\"flex\">\n          <Box mr=\"1em\" flex=\"1\">\n            <InputField\n              name=\"swap-from\"\n              label={translateRaw('SWAP_SEND_AMOUNT')}\n              value={fromAmount}\n              placeholder=\"0.00\"\n              onChange={handleFromAmountChangedEvent}\n              height={'54px'}\n              isLoading={isCalculatingFromAmount}\n              inputError={fromAmountError}\n              inputMode=\"decimal\"\n              customIcon={() =>\n                account && fromAsset?.contractAddress ? (\n                  <Box>\n                    <LinkApp href=\"#\" mr=\"1\" onClick={handleSwapMax}>\n                      {translateRaw('MAX')}\n                    </LinkApp>\n                  </Box>\n                ) : null\n              }\n            />\n          </Box>\n          <AssetSelector\n            selectedAsset={fromAsset}\n            assets={ownedAssets}\n            label={translateRaw('X_ASSET')}\n            onSelect={handleFromAssetSelected}\n            disabled={isCalculatingToAmount || isCalculatingFromAmount}\n            searchable={true}\n            width=\"175px\"\n          />\n        </Box>\n        <Box variant=\"rowCenter\" my=\"2\">\n          <hr style={{ margin: 'auto 0.5rem auto 1px', width: '100%' }} />\n          <LinkApp\n            variant=\"barren\"\n            href=\"#\"\n            isExternal={false}\n            onClick={handleFlipAssets}\n            width=\"24px\"\n            height=\"24px\"\n          >\n            <Icon type=\"swap-flip\" width=\"24px\" height=\"24px\" color=\"BLUE_BRIGHT\" />\n          </LinkApp>\n          <hr style={{ margin: 'auto 1px auto 0.5rem', width: '100%' }} />\n        </Box>\n        <Box display=\"flex\">\n          <Box mr=\"1em\" flex=\"1\">\n            <InputField\n              name=\"swap-to\"\n              label={translateRaw('SWAP_RECEIVE_AMOUNT')}\n              value={toAmount}\n              placeholder=\"0.00\"\n              onChange={handleToAmountChangedEvent}\n              height={'54px'}\n              isLoading={isCalculatingToAmount}\n              inputError={toAmountError}\n              inputMode=\"decimal\"\n            />\n          </Box>\n          <AssetSelector\n            selectedAsset={toAsset}\n            assets={filteredAssets}\n            label={translateRaw('ASSET')}\n            onSelect={handleToAssetSelected}\n            disabled={isCalculatingToAmount || isCalculatingFromAmount}\n            searchable={true}\n            width=\"175px\"\n          />\n        </Box>\n        <Box mb={SPACING.SM}>\n          {exchangeRate &&\n            toAsset &&\n            fromAsset &&\n            expiration &&\n            estimatedGasFee &&\n            toAmount &&\n            fromAmount && (\n              <SwapQuote\n                toAsset={toAsset}\n                fromAsset={fromAsset}\n                fromAssetRate={fromAssetRate}\n                toAmount={toAmount}\n                fromAmount={fromAmount}\n                exchangeRate={exchangeRate}\n                baseAsset={baseAsset}\n                baseAssetRate={baseAssetRate}\n                estimatedGasFee={estimatedGasFee}\n                settings={settings}\n                isExpired={isExpired}\n                expiration={expiration}\n                handleRefreshQuote={handleRefreshQuote}\n              />\n            )}\n        </Box>\n        <StyledButton\n          onClick={onSuccess}\n          disabled={\n            isDemoMode ||\n            !account ||\n            isEstimatingGas ||\n            isExpired ||\n            !estimatedGasFee ||\n            isCalculatingToAmount ||\n            isCalculatingFromAmount ||\n            !fromAmount ||\n            !toAmount ||\n            !!fromAmountError ||\n            !!toAmountError\n          }\n          loading={isSubmitting}\n          data-testid=\"confirm-swap\"\n        >\n          {fromAsset && toAsset\n            ? translate('SWAP_FOR', { $from: fromAsset.ticker, $to: toAsset.ticker })\n            : translate('SWAP_ACTION_BUTTON')}\n        </StyledButton>\n        {txError && (\n          <InlineMessage>\n            {translate('GAS_LIMIT_ESTIMATION_ERROR_MESSAGE', {\n              $error: txError.reason ? txError.reason : txError.message\n            })}\n          </InlineMessage>\n        )}\n      </Box>\n      <PoweredByText provider=\"ZEROX\" />\n    </>\n  );\n};\n\nexport default SwapAssets;\n","import {\n  Amount,\n  Body,\n  Box,\n  Heading,\n  Icon,\n  LinkApp,\n  Text,\n  TimeCountdown,\n  Tooltip\n} from '@components';\nimport { getFiat } from '@config/fiats';\nimport { SPACING } from '@theme';\nimport { translateRaw } from '@translations';\nimport { Asset, ISettings, ISwapAsset } from '@types';\nimport { bigify, convertToFiat } from '@utils';\n\ninterface Props {\n  exchangeRate: string;\n  fromAsset: ISwapAsset;\n  fromAssetRate: number;\n  toAsset: ISwapAsset;\n  fromAmount: string;\n  toAmount: string;\n  baseAsset: Asset;\n  baseAssetRate: number;\n  settings: ISettings;\n  isExpired: boolean;\n  expiration: number;\n  estimatedGasFee: string;\n  handleRefreshQuote(): void;\n}\n\nexport const SwapQuote = ({\n  exchangeRate,\n  fromAsset,\n  fromAssetRate,\n  toAsset,\n  fromAmount,\n  toAmount,\n  baseAsset,\n  baseAssetRate,\n  estimatedGasFee,\n  isExpired,\n  expiration,\n  settings,\n  handleRefreshQuote\n}: Props) => (\n  <Box border=\"1px solid #55b6e2\" p=\"3\">\n    <Box variant=\"rowAlign\" justifyContent=\"space-between\" mb=\"3\">\n      <Heading m=\"0\" fontWeight=\"bold\">\n        {translateRaw('YOUR_QUOTE')}\n      </Heading>\n      <LinkApp href=\"#\" variant=\"opacityLink\">\n        <Box variant=\"rowAlign\" onClick={() => handleRefreshQuote()}>\n          <Icon type=\"refresh\" width=\"16px\" color=\"BLUE_BRIGHT\" />\n          <Text ml={SPACING.XS} mb={0}>\n            {translateRaw('GET_NEW_QUOTE')}\n          </Text>\n        </Box>\n      </LinkApp>\n    </Box>\n    <Box variant=\"rowAlign\" justifyContent=\"space-between\" mb=\"3\">\n      <Box>\n        {translateRaw('Amount')} <Tooltip tooltip={translateRaw('SWAP_AMOUNT_TOOLTIP')} />\n      </Box>\n      <Amount\n        style={{ textDecoration: isExpired ? 'line-through' : 'none' }}\n        text={`${bigify(fromAmount).toFixed(6)} ${fromAsset.ticker} = ${bigify(toAmount).toFixed(\n          6\n        )} ${toAsset.ticker}`}\n        fiat={{\n          symbol: getFiat(settings).symbol,\n          ticker: getFiat(settings).ticker,\n          amount: convertToFiat(fromAmount, fromAssetRate).toFixed(2)\n        }}\n      />\n    </Box>\n    <Box variant=\"rowAlign\" justifyContent=\"space-between\" mb=\"3\">\n      <Box>\n        {translateRaw('SWAP_RATE_LABEL')} <Tooltip tooltip={translateRaw('SWAP_RATE_TOOLTIP')} />\n      </Box>\n      <Amount\n        style={{ textDecoration: isExpired ? 'line-through' : 'none' }}\n        text={`1 ${fromAsset.ticker} = ${bigify(exchangeRate).toFixed(6)} ${toAsset.ticker}`}\n        fiat={{\n          symbol: getFiat(settings).symbol,\n          ticker: getFiat(settings).ticker,\n          amount: convertToFiat(bigify(1), fromAssetRate).toFixed(2)\n        }}\n      />\n    </Box>\n    <Box variant=\"rowAlign\" justifyContent=\"space-between\" mb=\"3\">\n      <Box>\n        {translateRaw('ESTIMATED_COST')} <Tooltip tooltip={translateRaw('SWAP_TX_FEE_TOOLTIP')} />\n      </Box>\n      <Amount\n        style={{ textDecoration: isExpired ? 'line-through' : 'none' }}\n        asset={{\n          amount: estimatedGasFee,\n          ticker: baseAsset.ticker\n        }}\n        fiat={{\n          symbol: getFiat(settings).symbol,\n          ticker: getFiat(settings).ticker,\n          amount: convertToFiat(estimatedGasFee, baseAssetRate).toFixed(2)\n        }}\n      />\n    </Box>\n    <Box variant=\"rowAlign\" justifyContent=\"space-between\">\n      <Box>\n        {translateRaw('EXPIRES_IN')} <Tooltip tooltip={translateRaw('SWAP_EXPIRY_TOOLTIP')} />\n      </Box>\n      <Box>\n        {!isExpired ? (\n          <TimeCountdown value={expiration} />\n        ) : (\n          <Body m=\"0\" color=\"ERROR_RED\" textTransform=\"uppercase\">\n            {translateRaw('EXPIRED')}\n          </Body>\n        )}\n      </Box>\n    </Box>\n  </Box>\n);\n","import { ConfirmTransaction, SwapFromToDiagram } from '@components';\nimport { getAccountsAssets, useSelector } from '@store';\nimport { ITxMultiConfirmProps, ITxType } from '@types';\n\nimport { makeSwapTxConfig } from '../helpers';\nimport { IAssetPair } from '../types';\n\nexport default function ConfirmSwap({\n  flowConfig,\n  account,\n  transactions,\n  currentTxIdx,\n  onComplete,\n  error\n}: ITxMultiConfirmProps) {\n  const { fromAsset, toAsset, fromAmount, toAmount } = flowConfig as IAssetPair;\n\n  const currentAssets = useSelector(getAccountsAssets);\n\n  const txConfigs = transactions.map((tx) =>\n    makeSwapTxConfig(currentAssets)(tx.txRaw, account, fromAsset, fromAmount.toString())\n  );\n\n  const txConfig = txConfigs[currentTxIdx];\n\n  return (\n    <ConfirmTransaction\n      resetFlow={() => onComplete && onComplete()}\n      onComplete={() => onComplete && onComplete()}\n      error={error}\n      txConfig={txConfig}\n      txType={ITxType.SWAP}\n      customComponent={() => (\n        <SwapFromToDiagram\n          fromSymbol={fromAsset.ticker}\n          toSymbol={toAsset.ticker}\n          fromUUID={fromAsset.uuid}\n          toUUID={toAsset.uuid}\n          fromAmount={fromAmount.toString()}\n          toAmount={toAmount.toString()}\n        />\n      )}\n    />\n  );\n}\n","import pick from 'ramda/src/pick';\n\nimport { MultiTxReceipt, TxReceipt } from '@components/TransactionFlow';\nimport { SwapFromToDiagram } from '@components/TransactionFlow/displays';\nimport { getFiat } from '@config/fiats';\nimport { makeTxConfigFromTx, makeTxItem } from '@helpers';\nimport { useAssets, useNetworks, useRates, useSettings } from '@services';\nimport { getAccountsAssets, useSelector } from '@store';\nimport { translateRaw } from '@translations';\nimport { ITxType, StoreAccount, TxParcel } from '@types';\n\nimport { stepsContent } from '../config';\nimport { makeSwapTxConfig } from '../helpers';\nimport { IAssetPair, SwapDisplayData } from '../types';\n\ninterface Props {\n  assetPair: IAssetPair;\n  transactions: TxParcel[];\n  account: StoreAccount;\n  onSuccess(): void;\n}\n\nexport default function SwapTransactionReceipt({\n  assetPair,\n  transactions,\n  account,\n  onSuccess,\n  ...props\n}: Props) {\n  const { getAssetByUUID, assets } = useAssets();\n  const { settings } = useSettings();\n  const { getAssetRate } = useRates();\n  const { getNetworkById } = useNetworks();\n  const swapDisplay: SwapDisplayData = pick(\n    ['fromAsset', 'toAsset', 'fromAmount', 'toAmount'],\n    assetPair\n  );\n  const currentAssets = useSelector(getAccountsAssets);\n  // @todo: refactor this to be based on status of tx from StoreProvider\n  const txItems = transactions.map((tx, idx) => {\n    const txType = idx === transactions.length - 1 ? ITxType.SWAP : ITxType.APPROVAL;\n    const txConfig =\n      txType === ITxType.SWAP\n        ? makeSwapTxConfig(currentAssets)(\n            tx.txRaw,\n            account,\n            assetPair.fromAsset,\n            assetPair.fromAmount.toString()\n          )\n        : makeTxConfigFromTx(tx.txRaw, assets, account.network, [account]);\n    return makeTxItem(txType, txConfig, tx.txHash!, tx.txReceipt);\n  });\n\n  const txReceipts = txItems.map(({ txReceipt }) => txReceipt);\n\n  const network = getNetworkById(txItems[0].txConfig.networkId);\n\n  const baseAsset = getAssetByUUID(network.baseAsset)!;\n\n  const baseAssetRate = getAssetRate(baseAsset);\n\n  const fiat = getFiat(settings);\n\n  const customComponent = () => (\n    <SwapFromToDiagram\n      fromSymbol={swapDisplay.fromAsset.ticker}\n      toSymbol={swapDisplay.toAsset.ticker}\n      fromAmount={swapDisplay.fromAmount.toString()}\n      toAmount={swapDisplay.toAmount.toString()}\n      fromUUID={swapDisplay.fromAsset.uuid}\n      toUUID={swapDisplay.toAsset.uuid}\n    />\n  );\n\n  return txReceipts.length === 1 ? (\n    <TxReceipt\n      disableDynamicTxReceiptDisplay={true}\n      txReceipt={txItems[0].txReceipt}\n      txConfig={txItems[0].txConfig}\n      completeButton={translateRaw('SWAP_START_ANOTHER')}\n      resetFlow={onSuccess}\n      onComplete={onSuccess}\n      customComponent={customComponent}\n      {...props}\n    />\n  ) : (\n    <MultiTxReceipt\n      txType={ITxType.SWAP}\n      transactions={transactions}\n      transactionsConfigs={txItems.map(({ txConfig }) => txConfig)}\n      steps={stepsContent}\n      account={account}\n      network={account.network}\n      completeButtonText={translateRaw('SWAP_START_ANOTHER')}\n      resetFlow={onSuccess}\n      onComplete={onSuccess}\n      customComponent={customComponent}\n      fiat={fiat}\n      baseAssetRate={baseAssetRate}\n    />\n  );\n}\n","import path from 'ramda/src/path';\n\nimport { Typography, VerticalStepper } from '@components';\nimport { SwapFromToDiagram } from '@components/TransactionFlow/displays';\nimport { translateRaw } from '@translations';\nimport { ITxMultiConfirmProps, ITxStatus } from '@types';\n\nimport { stepsContent } from '../config';\nimport { IAssetPair } from '../types';\n\nexport default function ConfirmSwapMultiTx({\n  flowConfig,\n  currentTxIdx,\n  transactions,\n  onComplete,\n  error\n}: ITxMultiConfirmProps) {\n  const { fromAsset, toAsset, fromAmount, toAmount } = flowConfig as IAssetPair;\n  const status = transactions.map((t) => path(['status'], t));\n\n  const broadcasting = status.findIndex((s) => s === ITxStatus.BROADCASTED);\n\n  const approveTx = {\n    ...stepsContent[0],\n    content: translateRaw('SWAP_STEP1_TEXT', { $token: fromAsset.ticker }),\n    buttonText: `${translateRaw('APPROVE_SWAP')}`,\n    loading: status[0] === ITxStatus.BROADCASTED,\n    onClick: onComplete\n  };\n\n  const transferTx = {\n    ...stepsContent[1],\n    content: translateRaw('SWAP_STEP2_TEXT'),\n    buttonText: `${translateRaw('CONFIRM_TRANSACTION')}`,\n    loading: status[1] === ITxStatus.BROADCASTED,\n    onClick: onComplete\n  };\n\n  return (\n    <div>\n      <Typography as=\"p\" style={{ marginBottom: '2em' }}>\n        {translateRaw('SWAP_INTRO')}\n      </Typography>\n      <SwapFromToDiagram\n        fromSymbol={fromAsset.ticker}\n        toSymbol={toAsset.ticker}\n        fromUUID={fromAsset.uuid}\n        toUUID={toAsset.uuid}\n        fromAmount={fromAmount.toString()}\n        toAmount={toAmount.toString()}\n      />\n      <VerticalStepper\n        currentStep={broadcasting === -1 ? currentTxIdx : broadcasting}\n        steps={[approveTx, transferTx]}\n        error={error !== undefined}\n      />\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nimport { formatUnits } from '@ethersproject/units';\nimport axios from 'axios';\n\nimport { DEFAULT_ASSET_DECIMAL, MYC_DEX_COMMISSION_RATE } from '@config';\nimport { checkRequiresApproval } from '@helpers';\nimport { DexService } from '@services/ApiService';\nimport { getGasEstimate } from '@services/ApiService/Gas';\nimport { getAccountBalance } from '@services/Store/utils';\nimport { getBaseAssetByNetwork, getSwapAssetsByNetwork, selectNetwork, useSelector } from '@store';\nimport translate from '@translations';\nimport { Asset, ISwapAsset, ITxGasLimit, Network, NetworkId, StoreAccount } from '@types';\nimport {\n  bigify,\n  divideBNFloats,\n  formatErrorEmailMarkdown,\n  inputGasLimitToHex,\n  multiplyBNFloats,\n  TUseStateReducerFactory,\n  withCommission\n} from '@utils';\n\nimport { LAST_CHANGED_AMOUNT, SwapFormState } from './types';\n\nconst swapFormInitialState = {\n  selectedNetwork: 'Ethereum',\n  account: undefined,\n  fromAsset: undefined,\n  fromAmount: '',\n  fromAmountError: undefined,\n  isCalculatingFromAmount: false,\n  toAsset: undefined,\n  toAmount: '',\n  toAmountError: undefined,\n  isCalculatingToAmount: false,\n  lastChangedAmount: LAST_CHANGED_AMOUNT.FROM\n};\n\nconst SwapFormFactory: TUseStateReducerFactory<SwapFormState> = ({ state, setState }) => {\n  const network = useSelector(selectNetwork(state.selectedNetwork)) as Network;\n  const baseAsset = useSelector(getBaseAssetByNetwork(network));\n  const assets = useSelector(getSwapAssetsByNetwork(state.selectedNetwork));\n  const sortedAssets = assets.sort((asset1, asset2) => asset1.ticker.localeCompare(asset2.ticker));\n\n  useEffect(() => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      fromAsset: baseAsset,\n      toAsset: sortedAssets.filter((a) => a.uuid !== baseAsset.uuid)[0]\n    }));\n  }, [assets.length, network]);\n\n  const setNetwork = (network: NetworkId) => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      selectedNetwork: network,\n      fromAmount: '',\n      fromAmountError: '',\n      toAmount: '',\n      toAmountError: ''\n    }));\n  };\n\n  const handleFlipAssets = () => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      fromAsset: prevState.toAsset,\n      toAsset: prevState.fromAsset,\n      fromAmount: prevState.toAmount,\n      toAmount: prevState.fromAmount,\n      fromAmountError: '',\n      toAmountError: '',\n      lastChangedAmount:\n        prevState.lastChangedAmount === LAST_CHANGED_AMOUNT.FROM\n          ? LAST_CHANGED_AMOUNT.TO\n          : LAST_CHANGED_AMOUNT.FROM\n    }));\n  };\n\n  const handleSwapMax = async () => {\n    const asset = state.fromAsset;\n    const balance = getAccountBalance(state.account, asset as Asset);\n    const fromAmount = formatUnits(balance, asset.decimal ?? DEFAULT_ASSET_DECIMAL);\n\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      fromAmount,\n      fromAmountError: '',\n      toAmountError: '',\n      lastChangedAmount: LAST_CHANGED_AMOUNT.FROM\n    }));\n    await calculateNewToAmount(fromAmount);\n  };\n\n  const handleFromAssetSelected = (fromAsset: ISwapAsset) => {\n    const { isCalculatingFromAmount, isCalculatingToAmount } = state;\n    if (isCalculatingFromAmount || isCalculatingToAmount) {\n      return;\n    }\n\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      fromAsset,\n      fromAmount: '',\n      fromAmountError: '',\n      toAmount: '',\n      toAmountError: ''\n    }));\n  };\n\n  const handleToAssetSelected = (toAsset: ISwapAsset) => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      toAsset\n    }));\n  };\n\n  const calculateNewFromAmount = async (value: string) => {\n    const { fromAsset, toAsset, isCalculatingFromAmount, account } = state;\n    if (!fromAsset || !toAsset || isCalculatingFromAmount) {\n      return;\n    }\n\n    if (value.length === 0) {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        toAmount: '',\n        fromAmount: ''\n      }));\n      return;\n    }\n\n    if (bigify(value).lte(0)) {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingFromAmount: false,\n        toAmountError: translate('SWAP_ZERO_VALUE')\n      }));\n      return;\n    }\n\n    try {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingFromAmount: true\n      }));\n\n      const { price, sellAmount, ...rest } = await DexService.instance.getOrderDetailsTo(\n        network,\n        account,\n        fromAsset,\n        toAsset,\n        value\n      );\n\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingFromAmount: false,\n        fromAmount: sellAmount.toString(),\n        fromAmountError: '',\n        toAmountError: '',\n        exchangeRate: withCommission({\n          amount: divideBNFloats(1, price),\n          rate: MYC_DEX_COMMISSION_RATE\n        }).toString(),\n        ...rest\n      }));\n    } catch (e) {\n      if (axios.isCancel(e)) {\n        return;\n      }\n      console.error(e);\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingFromAmount: false,\n        fromAmount: '',\n        toAmountError:\n          e.response?.data?.code && e.response.data.code === 109\n            ? translate('SWAP_INSUFFICIENT_FUNDS')\n            : translate('UNEXPECTED_ERROR', {\n                $link: formatErrorEmailMarkdown('Swap Error', e)\n              })\n      }));\n    }\n  };\n\n  const calculateNewToAmount = async (value: string) => {\n    const { fromAsset, toAsset, isCalculatingToAmount, account } = state;\n    if (!fromAsset || !toAsset || isCalculatingToAmount) {\n      return;\n    }\n\n    if (value.length === 0) {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        toAmount: '',\n        fromAmount: ''\n      }));\n      return;\n    }\n\n    if (bigify(value).lte(0)) {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingToAmount: false,\n        fromAmountError: translate('SWAP_ZERO_VALUE')\n      }));\n      return;\n    }\n\n    try {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingToAmount: true,\n        lastChangedAmount: LAST_CHANGED_AMOUNT.FROM\n      }));\n\n      const { price, buyAmount, ...rest } = await DexService.instance.getOrderDetailsFrom(\n        network,\n        account,\n        fromAsset,\n        toAsset,\n        value\n      );\n\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingToAmount: false,\n        toAmount: buyAmount.toString(),\n        fromAmountError: '',\n        toAmountError: '',\n        exchangeRate: withCommission({\n          amount: multiplyBNFloats(1, price), // @todo Fix this\n          rate: MYC_DEX_COMMISSION_RATE\n        }).toString(),\n        ...rest\n      }));\n    } catch (e) {\n      if (axios.isCancel(e)) {\n        return;\n      }\n      console.error(e);\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isCalculatingToAmount: false,\n        toAmount: '',\n        fromAmountError:\n          e.response?.data?.code && e.response.data.code === 109\n            ? e.response.data.reason\n            : translate('UNEXPECTED_ERROR', {\n                $link: formatErrorEmailMarkdown('Swap Error', e)\n              })\n      }));\n    }\n  };\n\n  const handleFromAmountChanged = (fromAmount: string) => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      fromAmount,\n      lastChangedAmount: LAST_CHANGED_AMOUNT.FROM,\n      fromAmountError: '',\n      toAmountError: ''\n    }));\n  };\n\n  const handleToAmountChanged = (toAmount: string) => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      toAmount,\n      lastChangedAmount: LAST_CHANGED_AMOUNT.TO,\n      fromAmountError: '',\n      toAmountError: ''\n    }));\n  };\n\n  const handleAccountSelected = (account: StoreAccount) => {\n    setState((prevState: SwapFormState) => ({\n      ...prevState,\n      account\n    }));\n  };\n\n  const handleGasLimitEstimation = async () => {\n    const { approvalTx, account } = state;\n    if (approvalTx && account) {\n      setState((prevState: SwapFormState) => ({\n        ...prevState,\n        isEstimatingGas: true\n      }));\n\n      try {\n        const requiresApproval =\n          approvalTx &&\n          (await checkRequiresApproval(network, approvalTx.to!, account.address, approvalTx.data!));\n\n        const { txType, ...tx } = approvalTx;\n\n        const approvalGasLimit = inputGasLimitToHex(\n          requiresApproval ? await getGasEstimate(network, tx!) : '0'\n        ) as ITxGasLimit;\n\n        setState((prevState: SwapFormState) => ({\n          ...prevState,\n          isEstimatingGas: false,\n          approvalGasLimit\n        }));\n      } catch (err) {\n        console.error(err);\n        setState((prevState: SwapFormState) => ({\n          ...prevState,\n          isEstimatingGas: false,\n          fromAmountError: translate('UNEXPECTED_ERROR', {\n            $link: formatErrorEmailMarkdown('Swap Error', err)\n          })\n        }));\n      }\n    }\n  };\n\n  const handleRefreshQuote = () => {\n    const { fromAmount, toAmount, lastChangedAmount } = state;\n    if (lastChangedAmount === LAST_CHANGED_AMOUNT.FROM) {\n      calculateNewToAmount(fromAmount);\n    } else {\n      calculateNewFromAmount(toAmount);\n    }\n  };\n\n  return {\n    setNetwork,\n    handleFromAssetSelected,\n    handleToAssetSelected,\n    calculateNewFromAmount,\n    calculateNewToAmount,\n    handleFromAmountChanged,\n    handleToAmountChanged,\n    handleAccountSelected,\n    handleGasLimitEstimation,\n    handleRefreshQuote,\n    handleFlipAssets,\n    handleSwapMax,\n    formState: { ...state, assets: sortedAssets }\n  };\n};\n\nexport { swapFormInitialState, SwapFormFactory };\n","import { BigNumber } from 'bignumber.js';\nimport { DistributiveOmit } from 'react-redux';\n\nimport { UniversalGasEstimationResult } from '@services';\nimport {\n  ISwapAsset,\n  ITxGasLimit,\n  ITxGasPrice,\n  ITxMetadata,\n  ITxObject,\n  ITxStatus,\n  ITxType,\n  NetworkId,\n  StoreAccount\n} from '@types';\n\nexport enum LAST_CHANGED_AMOUNT {\n  FROM = 'FROM_AMOUNT',\n  TO = 'TO_AMOUNT'\n}\n\nexport interface TxEnveloppe {\n  label: string;\n  rawTx: ITxObject;\n  txHash: string;\n  status: ITxStatus;\n  queuePos: number;\n}\n\nexport interface SwapState {\n  transactions: TxEnveloppe[];\n  currentTxIndex: number;\n  assetPair?: IAssetPair;\n  account?: StoreAccount;\n  isSubmitting: boolean;\n  nextInFlow: boolean;\n}\n\nexport interface SwapFormState {\n  selectedNetwork: NetworkId;\n  account: StoreAccount;\n  assets: ISwapAsset[];\n  fromAsset: ISwapAsset;\n  fromAmount: string;\n  toAsset: ISwapAsset;\n  toAmount: string;\n  fromAmountError?: string | JSX.Element;\n  isCalculatingFromAmount: boolean;\n  toAmountError?: string | JSX.Element;\n  isCalculatingToAmount: boolean;\n  isEstimatingGas: boolean;\n  lastChangedAmount: LAST_CHANGED_AMOUNT;\n  exchangeRate?: string; // The exchange rate displayed to the user\n  isMulti: boolean;\n  gasPrice?: ITxGasPrice;\n  approvalGasLimit?: ITxGasLimit;\n  tradeGasLimit?: ITxGasLimit;\n  approvalTx?: DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> & {\n    txType: ITxType;\n  };\n  expiration?: number;\n  tradeTx?: DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> & {\n    txType: ITxType;\n    metadata: ITxMetadata;\n  };\n  gas?: { estimate: UniversalGasEstimationResult; baseFee?: BigNumber };\n}\n\nexport interface IAssetPair {\n  lastChangedAmount: LAST_CHANGED_AMOUNT;\n  fromAsset: ISwapAsset;\n  toAsset: ISwapAsset;\n  fromAmount: BigNumber;\n  toAmount: BigNumber;\n  rate: BigNumber;\n}\n\nexport type SwapDisplayData = Pick<IAssetPair, 'fromAsset' | 'toAsset' | 'fromAmount' | 'toAmount'>;\n"],"sourceRoot":""}