{"version":3,"sources":["webpack:///./src/features/SignAndVerifyMessage/SignAndVerifyMessage.tsx","webpack:///./src/features/SignAndVerifyMessage/constants.ts","webpack:///./src/features/SignAndVerifyMessage/SignMessage.tsx","webpack:///./src/features/SignAndVerifyMessage/stories.tsx","webpack:///./src/features/SignAndVerifyMessage/VerifyMessage.tsx"],"names":["SCREEN_SM","BREAK_POINTS","HeadingWrapper","styled","div","Heading","Title","SubTitle","SubTitleMobile","TabsWrapper","withRouter","history","location","showSubtitle","setShowSubtitle","useState","currentRoute","tabsConfig","find","tabConfig","ROUTE_PATHS","key","path","pathname","tabs","map","title","onClick","url","push","tabClickRedirect","ExtendedContentPanel","heading","subtitle","Tabs","selectedIndex","findIndex","tab","width","component","SIGN_MESSAGE","name","SignMessage","VERIFY_MESSAGE","VerifyMessage","SignButton","Button","props","disabled","SCREEN_XS","BackButton","ButtonUI","marginBottom","connect","state","isDemoMode","getIsDemoMode","status","selectSignMessageStatus","error","selectSignMessageError","signedMessage","selectSignedMessage","message","selectMessage","walletId","selectWalletId","dispatch","bindActionCreators","walletSelect","messageUpdate","signMessageReset","signMessage","connector","wallet","setWallet","undefined","params","useSelector","getWalletConnection","useUnmount","WalletId","WALLETCONNECT","kill","story","getStories","x","Step","steps","Box","variant","DemoGatewayBanner","basic","src","backArrowIcon","alt","translateRaw","WALLETS_CONFIG","walletParams","onUnlock","w","selectedWallet","Array","isArray","formData","network","DEFAULT_NETWORK","WalletList","wallets","onSelect","InputField","value","label","placeholder","textarea","onChange","event","target","height","inputError","Error","loading","mt","Text","CodeBlock","JSON","stringify","WEB3","Web3ProviderDecrypt","LEDGER_NANO_S_NEW","HWLegacy","TREZOR","GRIDPLUS","withWalletConnect","WalletConnectDecrypt","WHITE","SUCCESS_GREEN","COLORS","Content","VerifyButton","SignedMessage","signaturePlaceholder","address","msg","sig","version","setMessage","setError","setSignedMessage","setLoading","selectDefaultNetwork","provider","ProviderHandler","handleVerifySignedMessage","async","json","trySingleQuotes","rawMessage","normalizedMessage","normalizeSingleQuotes","parsedSignature","normalizeJson","isValid","verifySignedMessage","isValidEIP1271","isValidEIP1271Signature","err","useEffect","queryMessage","signature","parse","search","handleOnChange","data-testid","$address","$msg"],"mappings":"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","file":"SignAndVerifyMessage.de99412be384e3b5d588.js","sourcesContent":["import { useState } from 'react';\n\nimport { History } from 'history';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, Tabs } from '@components';\nimport { ROUTE_PATHS } from '@config';\nimport { BREAK_POINTS } from '@theme';\nimport translate from '@translations';\nimport { Tab } from '@types';\n\nimport { tabsConfig } from './constants';\n\nconst { SCREEN_SM } = BREAK_POINTS;\n\nconst HeadingWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst Heading = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nconst Title = styled.div`\n  margin-bottom: 10px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    width: 100%;\n  }\n`;\n\nconst SubTitle = styled.div`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: normal;\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst SubTitleMobile = styled.div`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: normal;\n  align-self: flex-start;\n\n  @media (min-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst TabsWrapper = styled.div`\n  max-height: 50px;\n  margin-top: 8px;\n  width: fit-content;\n`;\n\nconst tabClickRedirect = (history: History<unknown>, url: string): void => {\n  history.push(url);\n};\n\nfunction SignAndVerifyMessage({ history, location }: RouteComponentProps) {\n  const [showSubtitle, setShowSubtitle] = useState(true);\n\n  const currentRoute = tabsConfig.find(\n    (tabConfig) => ROUTE_PATHS[tabConfig.key].path === location.pathname\n  );\n\n  const tabs: Tab[] = tabsConfig.map((tabConfig) => ({\n    title: ROUTE_PATHS[tabConfig.key].title,\n    onClick: () => tabClickRedirect(history, ROUTE_PATHS[tabConfig.key].path)\n  }));\n\n  return currentRoute ? (\n    <ExtendedContentPanel\n      heading={\n        <HeadingWrapper>\n          <Heading>\n            <Title>{ROUTE_PATHS[currentRoute.key].title}</Title>\n            {showSubtitle && <SubTitleMobile>{translate(currentRoute.subtitle)}</SubTitleMobile>}\n            <TabsWrapper>\n              <Tabs\n                tabs={tabs}\n                selectedIndex={tabsConfig.findIndex((tab) => tab.key === currentRoute.key)}\n              />\n            </TabsWrapper>\n          </Heading>\n          {showSubtitle && <SubTitle>{translate(currentRoute.subtitle)}</SubTitle>}\n        </HeadingWrapper>\n      }\n      width=\"850px\"\n    >\n      <currentRoute.component setShowSubtitle={setShowSubtitle} />\n    </ExtendedContentPanel>\n  ) : (\n    <></>\n  );\n}\n\nexport default withRouter(SignAndVerifyMessage);\n","import { ROUTE_PATHS } from '@config';\n\nimport SignMessage from './SignMessage';\nimport VerifyMessage from './VerifyMessage';\n\nexport const tabsConfig = [\n  {\n    key: ROUTE_PATHS.SIGN_MESSAGE.name,\n    subtitle: 'SIGN_MESSAGE_DESCRIPTION',\n    component: SignMessage\n  },\n  {\n    key: ROUTE_PATHS.VERIFY_MESSAGE.name,\n    subtitle: 'VERIFY_MESSAGE_DESCRIPTION',\n    component: VerifyMessage\n  }\n];\n","import { useState } from 'react';\n\nimport { Button as ButtonUI } from '@mycrypto/ui';\nimport { Wallet } from '@mycrypto/wallets';\nimport { AnyAction, bindActionCreators, Dispatch } from '@reduxjs/toolkit';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\n\nimport backArrowIcon from '@assets/images/icn-back-arrow.svg';\nimport {\n  Box,\n  Button,\n  CodeBlock,\n  DemoGatewayBanner,\n  InputField,\n  Text,\n  WalletList\n} from '@components';\nimport { DEFAULT_NETWORK, WALLETS_CONFIG } from '@config';\nimport { WalletConnectWallet } from '@services';\nimport type { IFullWallet } from '@services/WalletService';\nimport { AppState, getIsDemoMode, getWalletConnection, useSelector } from '@store';\nimport { BREAK_POINTS } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport { WalletId } from '@types';\nimport { useUnmount } from '@vendor';\n\nimport {\n  messageUpdate,\n  selectMessage,\n  selectSignedMessage,\n  selectSignMessageError,\n  selectSignMessageStatus,\n  selectWalletId,\n  signMessage,\n  signMessageReset,\n  walletSelect\n} from './signMessage.slice';\nimport { getStories } from './stories';\n\nconst SignButton = styled(Button)<{ disabled?: boolean }>`\n  ${(props) => props.disabled && 'opacity: 0.4;'}\n\n  @media (max-width: ${BREAK_POINTS.SCREEN_XS}) {\n    width: 100%;\n  }\n`;\n\nconst BackButton = styled(ButtonUI)<{ marginBottom: boolean }>`\n  align-self: flex-start;\n  color: #007a99;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  ${(props) => props.marginBottom && 'margin-bottom: 40px;'}\n\n  img {\n    margin-right: 8px;\n  }\n`;\n\ninterface OwnProps {\n  setShowSubtitle(show: boolean): void;\n}\n\nfunction SignMessage({\n  setShowSubtitle,\n  isDemoMode,\n  signedMessage,\n  message,\n  messageUpdate,\n  status,\n  error,\n  walletSelect,\n  walletId,\n  signMessageReset,\n  signMessage\n}: Props & OwnProps) {\n  const [wallet, setWallet] = useState<Wallet | IFullWallet | undefined>(undefined);\n  const params = useSelector(getWalletConnection(walletId!));\n\n  useUnmount(() => {\n    // Kill WalletConnect session\n    if (wallet && walletId === WalletId.WALLETCONNECT) {\n      (wallet as WalletConnectWallet).kill();\n    }\n    signMessageReset();\n  });\n\n  const onSelect = (walletId: WalletId) => {\n    setShowSubtitle(false);\n    walletSelect(walletId);\n  };\n\n  const onUnlock = (w: Wallet | IFullWallet | IFullWallet[]) => {\n    const selectedWallet = Array.isArray(w) ? w[0] : w;\n    setWallet(selectedWallet);\n  };\n\n  const handleSignMessage = () => {\n    if (!wallet || !message) {\n      throw Error('[signMessageWorker]: Missing arguments');\n    }\n    signMessage({ message, wallet });\n  };\n\n  const reset = () => {\n    signMessageReset();\n    setWallet(undefined);\n    setShowSubtitle(true);\n  };\n\n  const story = getStories().find((x) => x.name === walletId);\n  const Step = story && story.steps[0];\n\n  return (\n    <Box variant=\"columnAlign\">\n      {isDemoMode && <DemoGatewayBanner />}\n      {walletId ? (\n        <>\n          <BackButton marginBottom={!!wallet} basic={true} onClick={reset}>\n            <img src={backArrowIcon} alt=\"Back arrow\" />\n            {translateRaw('CHANGE_WALLET_BUTTON')}\n          </BackButton>\n\n          {!wallet && (\n            <Step\n              wallet={WALLETS_CONFIG[walletId]}\n              walletParams={params}\n              onUnlock={onUnlock}\n              formData={{\n                network: DEFAULT_NETWORK\n              }}\n            />\n          )}\n        </>\n      ) : (\n        <WalletList wallets={getStories()} onSelect={onSelect} />\n      )}\n\n      {wallet && (\n        <>\n          <InputField\n            value={message}\n            label={translate('MSG_MESSAGE')}\n            placeholder={translateRaw('SIGN_MSG_PLACEHOLDER')}\n            textarea={true}\n            onChange={(event) => messageUpdate(event.target.value)}\n            height=\"150px\"\n            inputError={error && translateRaw('SIGN_MESSAGE_ERROR')}\n          />\n          <SignButton\n            disabled={!message || isDemoMode}\n            onClick={handleSignMessage}\n            loading={status === 'SIGN_REQUEST'}\n          >\n            {status === 'SIGN_REQUEST' ? translate('SUBMITTING') : translate('NAV_SIGNMSG')}\n          </SignButton>\n          {status === 'SIGN_SUCCESS' && (\n            <Box mt=\"10px\" width=\"100%\">\n              <Text variant=\"label\">{translate('MSG_SIGNATURE')}</Text>\n              <Box width=\"100%\">\n                <CodeBlock>{JSON.stringify(signedMessage, null, 2)}</CodeBlock>\n              </Box>\n            </Box>\n          )}\n        </>\n      )}\n    </Box>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  isDemoMode: getIsDemoMode(state),\n  status: selectSignMessageStatus(state),\n  error: selectSignMessageError(state),\n  signedMessage: selectSignedMessage(state),\n  message: selectMessage(state),\n  walletId: selectWalletId(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      walletSelect,\n      messageUpdate,\n      signMessageReset,\n      signMessage\n    },\n    dispatch\n  );\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nexport default connector(SignMessage);\n","import { HWLegacy, WalletConnectDecrypt, Web3ProviderDecrypt } from '@components';\nimport { withWalletConnect } from '@services/WalletService';\nimport { IStory, WalletId } from '@types';\n\nexport const getStories = (): IStory[] => [\n  {\n    name: WalletId.WEB3,\n    steps: [Web3ProviderDecrypt]\n  },\n  {\n    name: WalletId.LEDGER_NANO_S_NEW,\n    steps: [HWLegacy]\n  },\n  {\n    name: WalletId.TREZOR,\n    steps: [HWLegacy]\n  },\n  {\n    name: WalletId.GRIDPLUS,\n    steps: [HWLegacy]\n  },\n  {\n    name: WalletId.WALLETCONNECT,\n    steps: [withWalletConnect(WalletConnectDecrypt, false)]\n  }\n];\n","import { FunctionComponent, useEffect, useState } from 'react';\n\nimport { parse } from 'query-string';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Button, InputField } from '@components';\nimport { ProviderHandler } from '@services/EthService';\nimport { selectDefaultNetwork, useSelector } from '@store';\nimport { BREAK_POINTS, COLORS } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport { ISignedMessage } from '@types';\nimport { verifySignedMessage } from '@utils';\nimport { normalizeJson, normalizeSingleQuotes } from '@utils/normalize';\n\nimport { VerifyParams } from './types';\n\nconst { SCREEN_XS } = BREAK_POINTS;\nconst { WHITE, SUCCESS_GREEN } = COLORS;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst VerifyButton = styled(Button)`\n  @media (max-width: ${SCREEN_XS}) {\n    width: 100%;\n  }\n`;\n\nconst SignedMessage = styled.div`\n  margin-top: 15px;\n  padding: 15px;\n  color: ${WHITE};\n  font-size: 16px;\n  background-color: ${SUCCESS_GREEN};\n  width: 100%;\n  overflow: auto;\n`;\n\nconst signatureExample: ISignedMessage = {\n  address: '0x7cB57B5A97eAbe94205C07890BE4c1aD31E486A8',\n  msg: 'asdfasdfasdf',\n  sig: '0x4771d78f13ba...',\n  version: '2'\n};\nconst signaturePlaceholder = JSON.stringify(signatureExample, null, 2);\n\ninterface Props {\n  setShowSubtitle(show: boolean): void;\n}\n\nconst VerifyMessage: FunctionComponent<RouteComponentProps & Props> = ({ location }) => {\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [signedMessage, setSignedMessage] = useState<ISignedMessage | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const network = useSelector(selectDefaultNetwork);\n  const provider = new ProviderHandler(network);\n\n  const handleClick = () => handleVerifySignedMessage();\n\n  const handleVerifySignedMessage = async (\n    json?: string,\n    trySingleQuotes?: boolean\n  ): Promise<void> => {\n    const rawMessage = json ?? message;\n    setLoading(true);\n\n    try {\n      const normalizedMessage = trySingleQuotes ? normalizeSingleQuotes(rawMessage) : rawMessage;\n      const parsedSignature: ISignedMessage = normalizeJson(normalizedMessage);\n\n      const isValid = verifySignedMessage(parsedSignature);\n      const isValidEIP1271 = !isValid && (await provider.isValidEIP1271Signature(parsedSignature));\n      if (!isValid && !isValidEIP1271) {\n        throw Error();\n      }\n\n      setError(undefined);\n      setSignedMessage(parsedSignature);\n    } catch (err) {\n      if (!trySingleQuotes) {\n        return handleVerifySignedMessage(rawMessage, true);\n      }\n\n      setError(translateRaw('ERROR_38'));\n      setSignedMessage(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOnChange = (msg: string) => {\n    setMessage(msg);\n    setError(undefined);\n    setSignedMessage(null);\n  };\n\n  useEffect(() => {\n    const { address, message: queryMessage, signature } = parse(location.search) as {\n      [key in VerifyParams]?: string;\n    };\n\n    if (address && queryMessage && signature) {\n      const json = JSON.stringify(\n        {\n          address,\n          msg: queryMessage,\n          sig: signature,\n          version: '2'\n        },\n        null,\n        2\n      );\n\n      setMessage(json);\n      handleVerifySignedMessage(json);\n    }\n  }, []);\n\n  return (\n    <Content>\n      <InputField\n        value={message}\n        label={translate('MSG_SIGNATURE')}\n        placeholder={signaturePlaceholder}\n        textarea={true}\n        onChange={(event) => handleOnChange(event.target.value)}\n        height=\"150px\"\n        inputError={error}\n      />\n      <VerifyButton disabled={!message} loading={loading} onClick={handleClick}>\n        {translate('MSG_VERIFY')}\n      </VerifyButton>\n      {signedMessage && (\n        <SignedMessage data-testid=\"sign-result\">\n          {translate('VERIFY_MESSAGE_SIGNED', {\n            $address: signedMessage.address,\n            $msg: signedMessage.msg\n          })}\n        </SignedMessage>\n      )}\n    </Content>\n  );\n};\n\nexport default withRouter(VerifyMessage);\n"],"sourceRoot":""}