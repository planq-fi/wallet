{"version":3,"sources":["webpack:///./src/features/SendAssets/SendAssets.tsx","webpack:///./src/features/SendAssets/SendAssets.reducer.tsx"],"names":["withRouter","withProtectTxProvider","location","reducerState","dispatch","useReducer","sendAssetsReducer","initialState","state","enabled","protectTxShow","isPTXFree","setProtectTxTimeoutFunction","useContext","ProtectTxContext","accounts","useSelector","getStoreAccounts","assets","useAssets","networks","getNetworkById","useNetworks","isFeatureActive","useFeatureFlags","query","parse","search","res","SUPPORTED_TRANSACTION_QUERY_PARAMS","reduce","obj","param","getParam","useEffect","txConfigInit","parseQueryParams","queryType","txQueryType","TxQueryTypes","SPEEDUP","CANCEL","includes","txConfig","isEmpty","type","actionTypes","SET_TXCONFIG","payload","console","debug","web3Steps","label","component","SendAssetsFormWithProtectTx","props","actions","form","cb","nonceField","parseInt","toString","FORM_SUBMIT","translateRaw","ConfirmTransactionWithProtectTx","_","SignTransactionWithProtectTx","WEB3_SIGN_SUCCESS","TxReceiptWithProtectTx","txReceipt","defaultSteps","SIGN_SUCCESS","signedTx","error","REQUEST_SEND","addTxToAccount","useAccounts","senderAccount","send","isWeb3Wallet","wallet","ProviderHandler","networkId","sendRawTx","then","SEND_SUCCESS","catch","err","SEND_ERROR","reason","message","GeneralStepper","steps","walletSteps","slice","length","getPath","txNumber","defaultBackPath","ROUTE_PATHS","DASHBOARD","path","defaultBackPathLabel","completeBtnText","wrapperClassName","basic","onRender","goToNextStep","action","rawTransaction","processFormDataToTx","baseAsset","getBaseAssetByNetwork","network","amount","account","receiverAddress","address","value","id","asset","from","undefined","hexlify","makeTxConfigFromSignedTx","createPendingTxReceipt","hash","RESET","makePendingTxReceipt","ITxType","STANDARD"],"mappings":"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","file":"SendAssets.37028b595a45aff2d0a5.js","sourcesContent":["import { useContext, useEffect, useReducer } from 'react';\n\nimport { parse } from 'query-string';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { GeneralStepper, TxReceiptWithProtectTx } from '@components';\nimport { IStepperPath } from '@components/GeneralStepper/types';\nimport { ROUTE_PATHS, SUPPORTED_TRANSACTION_QUERY_PARAMS } from '@config';\nimport { ProtectTxContext } from '@features/ProtectTransaction/ProtectTxProvider';\nimport { withProtectTxProvider } from '@helpers';\nimport { ProviderHandler, useAccounts, useAssets, useFeatureFlags, useNetworks } from '@services';\nimport { getStoreAccounts, useSelector } from '@store';\nimport { translateRaw } from '@translations';\nimport { IFormikFields, ISignedTx, ITxConfig, ITxReceipt, TxQueryTypes } from '@types';\nimport { getParam, isWeb3Wallet } from '@utils';\nimport { isEmpty } from '@vendor';\n\nimport {\n  ConfirmTransactionWithProtectTx,\n  SendAssetsFormWithProtectTx,\n  SignTransactionWithProtectTx\n} from './components';\nimport { parseQueryParams } from './helpers';\nimport { initialState, sendAssetsReducer } from './SendAssets.reducer';\n\nfunction SendAssets({ location }: RouteComponentProps) {\n  const [reducerState, dispatch] = useReducer(sendAssetsReducer, initialState);\n  const {\n    state: { enabled, protectTxShow, isPTXFree },\n    setProtectTxTimeoutFunction\n  } = useContext(ProtectTxContext);\n  const accounts = useSelector(getStoreAccounts);\n  const { assets } = useAssets();\n  const { networks, getNetworkById } = useNetworks();\n  const { isFeatureActive } = useFeatureFlags();\n\n  const query = parse(location.search);\n  const res = SUPPORTED_TRANSACTION_QUERY_PARAMS.reduce(\n    (obj, param) => ({ ...obj, [param]: getParam(query, param) }),\n    {}\n  );\n\n  useEffect(() => {\n    const txConfigInit = parseQueryParams(parse(location.search))(networks, assets, accounts);\n    if (\n      !txConfigInit ||\n      txConfigInit.queryType === reducerState.txQueryType ||\n      ![TxQueryTypes.SPEEDUP, TxQueryTypes.CANCEL].includes(txConfigInit.queryType)\n    )\n      return;\n\n    if (!txConfigInit.txConfig || isEmpty(txConfigInit.txConfig)) {\n      console.debug(\n        '[PrefilledTxs]: Error - Missing params. Requires gasPrice, gasLimit, to, data, nonce, from, value, and chainId'\n      );\n      return;\n    }\n\n    dispatch({\n      type: sendAssetsReducer.actionTypes.SET_TXCONFIG,\n      payload: { txConfig: txConfigInit.txConfig, txQueryType: txConfigInit.queryType }\n    });\n  }, [res]);\n\n  // Due to MetaMask deprecating eth_sign method,\n  // it has different step order, where sign and send are one panel\n  const web3Steps: IStepperPath[] = [\n    {\n      label: 'Send Assets',\n      component: SendAssetsFormWithProtectTx,\n      props: (({ txConfig }) => ({ txConfig }))(reducerState),\n      actions: (form: IFormikFields, cb: any) => {\n        if (enabled && !isPTXFree) {\n          form.nonceField = (parseInt(form.nonceField, 10) + 1).toString();\n        }\n        dispatch({ type: sendAssetsReducer.actionTypes.FORM_SUBMIT, payload: { form, assets } });\n        cb();\n      }\n    },\n    {\n      label: translateRaw('CONFIRM_TX_MODAL_TITLE'),\n      component: ConfirmTransactionWithProtectTx,\n      props: (({ txConfig }) => ({ txConfig }))(reducerState),\n      actions: (_: ITxConfig, cb: any) => cb()\n    },\n    {\n      label: '',\n      component: SignTransactionWithProtectTx,\n      props: (({ txConfig }) => ({ txConfig }))(reducerState),\n      actions: (payload: ITxReceipt | ISignedTx) => {\n        dispatch({ type: sendAssetsReducer.actionTypes.WEB3_SIGN_SUCCESS, payload });\n      }\n    },\n    {\n      label: translateRaw('TRANSACTION_BROADCASTED'),\n      component: TxReceiptWithProtectTx,\n      props: (({ txConfig, txReceipt }) => ({ txConfig, txReceipt }))(reducerState)\n    }\n  ];\n\n  const defaultSteps: IStepperPath[] = [\n    {\n      label: 'Send Assets',\n      component: SendAssetsFormWithProtectTx,\n      props: (({ txConfig }) => ({ txConfig }))(reducerState),\n      actions: (form: IFormikFields, cb: any) => {\n        if (enabled && !isPTXFree) {\n          form.nonceField = (parseInt(form.nonceField, 10) + 1).toString();\n        }\n        dispatch({ type: sendAssetsReducer.actionTypes.FORM_SUBMIT, payload: { form, assets } });\n        cb();\n      }\n    },\n    {\n      label: '',\n      component: SignTransactionWithProtectTx,\n      props: (({ txConfig }) => ({ txConfig }))(reducerState),\n      actions: (payload: ITxConfig | ISignedTx, cb: any) => {\n        dispatch({\n          type: sendAssetsReducer.actionTypes.SIGN_SUCCESS,\n          payload: { signedTx: payload, assets, networks, accounts }\n        });\n        cb();\n      }\n    },\n    {\n      label: translateRaw('CONFIRM_TX_MODAL_TITLE'),\n      component: ConfirmTransactionWithProtectTx,\n      props: (({ txConfig, signedTx, error }) => ({ txConfig, signedTx, error }))(reducerState),\n      actions: (payload: ITxConfig | ISignedTx) => {\n        if (setProtectTxTimeoutFunction) {\n          setProtectTxTimeoutFunction(() =>\n            dispatch({ type: sendAssetsReducer.actionTypes.REQUEST_SEND, payload })\n          );\n        } else {\n          dispatch({ type: sendAssetsReducer.actionTypes.REQUEST_SEND, payload });\n        }\n      }\n    },\n    {\n      label: translateRaw('TRANSACTION_BROADCASTED'),\n      component: TxReceiptWithProtectTx,\n      props: (({ txConfig, txReceipt, txQueryType }) => ({\n        txConfig,\n        txReceipt,\n        txQueryType\n      }))(reducerState)\n    }\n  ];\n\n  const getPath = () => {\n    const { senderAccount } = reducerState.txConfig!;\n    const walletSteps =\n      senderAccount && isWeb3Wallet(senderAccount.wallet) ? web3Steps : defaultSteps;\n    if (\n      reducerState.txQueryType &&\n      [TxQueryTypes.CANCEL, TxQueryTypes.SPEEDUP].includes(reducerState.txQueryType)\n    ) {\n      return walletSteps.slice(1, walletSteps.length);\n    }\n    return walletSteps;\n  };\n\n  const { addTxToAccount } = useAccounts();\n\n  // Adds TX to history\n  useEffect(() => {\n    if (reducerState.txReceipt) {\n      addTxToAccount(reducerState.txConfig!.senderAccount, reducerState.txReceipt);\n    }\n  }, [reducerState.txReceipt]);\n\n  // Sends signed TX\n  useEffect(() => {\n    if (\n      reducerState.send &&\n      reducerState.signedTx &&\n      !isWeb3Wallet(reducerState.txConfig!.senderAccount.wallet)\n    ) {\n      const { txConfig, signedTx } = reducerState;\n      const provider = new ProviderHandler(getNetworkById(txConfig!.networkId));\n\n      provider\n        .sendRawTx(signedTx)\n        .then((payload) => dispatch({ type: sendAssetsReducer.actionTypes.SEND_SUCCESS, payload }))\n        .catch((err) =>\n          dispatch({\n            type: sendAssetsReducer.actionTypes.SEND_ERROR,\n            payload: err?.reason ?? err?.message\n          })\n        );\n    }\n  }, [reducerState.send]);\n\n  // @todo Fix\n  const handleRender = (goToNextStep: () => void) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (reducerState.txReceipt) {\n        goToNextStep();\n      }\n    }, [reducerState.txReceipt]);\n  };\n\n  return (\n    <GeneralStepper\n      steps={getPath()}\n      txNumber={reducerState.txNumber}\n      defaultBackPath={ROUTE_PATHS.DASHBOARD.path}\n      defaultBackPathLabel={translateRaw('DASHBOARD')}\n      completeBtnText={translateRaw('SEND_ASSETS_SEND_ANOTHER')}\n      wrapperClassName={`send-assets-stepper ${protectTxShow ? 'has-side-panel' : ''}`}\n      basic={isFeatureActive('PROTECT_TX')}\n      onRender={handleRender}\n    />\n  );\n}\n\nexport default withRouter(withProtectTxProvider(SendAssets));\n","import { hexlify } from '@ethersproject/bytes';\nimport { ValuesType } from 'utility-types';\n\nimport { makePendingTxReceipt, makeTxConfigFromSignedTx } from '@helpers';\nimport { getBaseAssetByNetwork } from '@services/Store/Network';\nimport {\n  Asset,\n  ISignedTx,\n  ITxConfig,\n  ITxHash,\n  ITxObject,\n  ITxReceipt,\n  ITxType,\n  TAction,\n  TAddress,\n  TxQueryTypes\n} from '@types';\n\nimport { processFormDataToTx } from './helpers';\n\ninterface State {\n  txNumber: number;\n  txQueryType?: TxQueryTypes;\n  txConfig?: ITxConfig;\n  txReceipt?: ITxReceipt;\n  signedTx?: ISignedTx;\n  send?: boolean;\n  error?: string;\n}\n\nexport type ReducerAction = TAction<ValuesType<typeof sendAssetsReducer.actionTypes>, any>;\n\n// @ts-expect-error: @todo Flow shouldn't rely on txConfig being an empty object\nexport const initialState: State = { txConfig: {}, txNumber: 0 };\n\nexport const sendAssetsReducer = (state: State, action: ReducerAction): State => {\n  switch (action.type) {\n    case sendAssetsReducer.actionTypes.FORM_SUBMIT: {\n      const { form, assets } = action.payload;\n      const rawTransaction: ITxObject = processFormDataToTx(form);\n      const baseAsset: Asset | undefined = getBaseAssetByNetwork({\n        network: form.network,\n        assets\n      });\n      const txConfig: ITxConfig = {\n        rawTransaction,\n        amount: form.amount,\n        senderAccount: form.account,\n        receiverAddress: form.address.value as TAddress,\n        networkId: form.network.id,\n        asset: form.asset,\n        baseAsset: baseAsset ?? ({} as Asset),\n        from: form.account.address\n      };\n      return { ...state, txConfig, error: undefined };\n    }\n\n    case sendAssetsReducer.actionTypes.SET_TXCONFIG: {\n      const { txConfig, txQueryType } = action.payload;\n      return { txQueryType, txConfig, txNumber: state.txNumber + 1 };\n    }\n\n    case sendAssetsReducer.actionTypes.SIGN_SUCCESS: {\n      const { assets, networks, accounts } = action.payload;\n      const signedTx = hexlify(action.payload.signedTx);\n      // Used when signedTx is a buffer instead of a string.\n      // Hardware wallets return a buffer.´\n      const txConfig = makeTxConfigFromSignedTx(\n        action.payload.signedTx,\n        assets,\n        networks,\n        accounts,\n        state.txConfig?.networkId\n      );\n\n      return { ...state, txConfig, signedTx };\n    }\n\n    case sendAssetsReducer.actionTypes.WEB3_SIGN_SUCCESS: {\n      const txReceipt = createPendingTxReceipt(state, action.payload);\n      return { ...state, txReceipt };\n    }\n\n    case sendAssetsReducer.actionTypes.REQUEST_SEND: {\n      return { ...state, send: true };\n    }\n\n    case sendAssetsReducer.actionTypes.SEND_SUCCESS: {\n      const txReceipt = createPendingTxReceipt(state, action.payload.hash as ITxHash);\n      return { ...state, send: false, txReceipt, error: undefined };\n    }\n\n    case sendAssetsReducer.actionTypes.SEND_ERROR: {\n      return { ...state, send: false, error: action.payload };\n    }\n\n    case sendAssetsReducer.actionTypes.RESET:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nsendAssetsReducer.actionTypes = {\n  FORM_SUBMIT: 'FORM_SUBMIT',\n  SIGN_SUCCESS: 'SIGN_SUCCESS',\n  WEB3_SIGN_SUCCESS: 'WEB3_SIGN_SUCCESS',\n  REQUEST_SEND: 'REQUEST_SEND',\n  SEND_SUCCESS: 'SEND_SUCCESS',\n  RESET: 'RESET',\n  SET_TXCONFIG: 'SET_TXCONFIG',\n  SEND_ERROR: 'SEND_ERROR'\n};\n\nconst createPendingTxReceipt = (state: State, payload: ITxHash) => {\n  return makePendingTxReceipt(payload)(ITxType.STANDARD, state.txConfig!);\n};\n"],"sourceRoot":""}