{"version":3,"sources":["webpack:///./src/features/DeployContracts/DeployContractsFlow.tsx","webpack:///./src/features/DeployContracts/components/index.ts","webpack:///./src/features/DeployContracts/components/Deploy.tsx","webpack:///./src/features/DeployContracts/helpers.ts","webpack:///./src/features/DeployContracts/components/DeployConfirm.tsx","webpack:///./src/features/DeployContracts/components/DeployReceipt.tsx","webpack:///./src/features/DeployContracts/stateFactory.tsx"],"names":["SCREEN_XS","BREAK_POINTS","Heading","styled","div","TabsWrapper","DeployContractsFlow","history","location","step","setStep","useState","defaultAccount","useSelector","getDefaultAccount","handleNetworkSelected","handleDeploySubmit","handleByteCodeChanged","handleAccountSelected","handleTxSigned","handleGasSelectorChange","handleGasLimitChange","handleNonceChange","deployContractsState","useStateReducer","DeployContractsFactory","deployContractsInitialState","account","goToNextStep","tabClickRedirect","url","push","tabs","title","translateRaw","path","ROUTE_PATHS","INTERACT_WITH_CONTRACTS","onClick","DEPLOY_CONTRACTS","currentRoute","find","tab","pathname","steps","component","Deploy","props","actions","DeployConfirm","txConfig","WALLET_STEPS","wallet","network","senderAccount","rawTransaction","onSuccess","payload","DeployReceipt","txReceipt","goToFirstStep","undefined","stepObject","StepComponent","stepProps","stepActions","ExtendedContentPanel","onBack","DASHBOARD","stepper","current","total","length","width","heading","Tabs","selectedIndex","findIndex","withRouter","NetworkSelectorWrapper","FieldWrapper","InputWrapper","ButtonWrapper","MarginWrapper","CustomLabel","Typography","networkId","byteCode","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","isDemoMode","error","setError","gasCallProps","setGasCallProps","accounts","getStoreAccounts","selectNetwork","filteredAccounts","pipe","a","getAccountsByNetwork","getAccountsByViewOnly","useEffect","debouncedUpdateGasCall","useRef","acc","byteCodeVal","constructGasCallProps","DemoGatewayBanner","NetworkSelector","onChange","InputField","name","label","value","placeholder","target","textarea","resizableTextArea","height","AccountSelector","onSelect","option","GasSelector","setGasPrice","setGasLimit","setNonce","estimateGasCallProps","InlineMessage","Button","disabled","async","e","reason","message","fullwidth","connect","state","getIsDemoMode","connector","data","from","address","ConfirmTransaction","onComplete","resetFlow","txType","ITxType","DEPLOY_CONTRACT","rest","TxReceipt","completeButton","GAS_PRICE_GWEI_DEFAULT_HEX","GAS_LIMIT_LOWER_BOUND","DEFAULT_NONCE","DEFAULT_NETWORK","setState","addTxToAccount","useAccounts","prevState","isHexString","Error","makeTxFromForm","unusedGasLimit","to","transaction","getGasEstimate","tx","inputGasLimitToHex","makeBasicTxConfig","after","signResponse","isWeb3Wallet","hash","toTxReceipt","ITxStatus","PENDING","receiverAddress","amount","ProviderHandler","sendRawTx","then","retrievedTransactionReceipt","pendingTxReceipt","makePendingTxReceipt","finally"],"mappings":"+KAAA,I,EAAA,OAEA,QACA,G,EAAA,O,2BAEA,QACA,QACA,QACA,OACA,OAEA,OAEA,UACA,U,8rBAGA,MAAM,UAAEA,GAAcC,eAahBC,EAAUC,UAAOC,IAAV,mFAAGD,CAAH,mKAOUH,GAMjBK,EAAcF,UAAOC,IAAV,uFAAGD,CAAH,uCAKJG,EAAsB,EAAGC,UAASC,eAC7C,MAAOC,EAAMC,IAAW,IAAAC,UAAS,GAC3BC,GAAiB,IAAAC,cAAY,IAAAC,uBAC7B,sBACJC,EADI,mBAEJC,EAFI,sBAGJC,EAHI,sBAIJC,EAJI,eAKJC,EALI,wBAMJC,EANI,qBAOJC,EAPI,kBAQJC,EARI,qBASJC,IACE,IAAAC,iBAAgBC,yBAAhB,OACCC,+BADD,IAEFC,QAASf,MAGL,QAAEe,GAAkCJ,EAOpCK,EAAe,KACnBlB,EAAQD,EAAO,IAWXoB,EAAoBC,IACxBvB,EAAQwB,KAAKD,IAGTE,EAAsB,CAC1B,CACEC,OAAO,IAAAC,cAAa,sBACpBC,KAAMC,cAAYC,wBAAwBF,KAC1CG,QAAS,IAAMT,EAAiBO,cAAYC,wBAAwBF,OAEtE,CACEF,OAAO,IAAAC,cAAa,oBACpBC,KAAMC,cAAYG,iBAAiBJ,KACnCG,QAAS,IAAMT,EAAiBO,cAAYG,iBAAiBJ,QAI3DK,EAAeR,EAAKS,KAAMC,GAAQA,EAAIP,OAAS3B,EAASmC,UAExDC,EAAiB,CACrB,CACEX,OAAO,IAAAC,cAAa,oBACpBW,UAAWC,SACXC,MAAOxB,EACPyB,QAAS,CACP/B,wBACAF,wBACAC,mBAAoB,IAAMA,EAAmBY,GAC7CV,wBACAE,0BACAE,oBACAD,yBAGJ,CACEY,OAAO,IAAAC,cAAa,0BACpBW,UAAWI,gBACXF,MAAO,GAAIG,eAAH,CAAqBA,aAAtB,CAAmC3B,GAC1CyB,QAAS,CAAEpB,iBAEb,CACEK,OAAO,IAAAC,cAAa,eACpBW,UAAWlB,GAAWwB,eAAaxB,EAAQyB,QAC3CL,MAAO,GAAIG,eAAH,CACNG,QAAS1B,GAAWA,EAAQ0B,QAC5BC,cAAe3B,EACf4B,eAAc,MAAEL,OAAF,EAAEA,EAAUK,iBAHrB,CAIHhC,GACJyB,QAAS,CACPQ,UAAYC,GAA2CtC,EAAesC,EAAS7B,KAGnF,CACEK,OAAO,IAAAC,cAAa,kBACpBW,UAAWa,gBACXX,MAAO,GAAIG,WAAUS,gBAAb,CAAgCT,WAAUS,cAA3C,CAAyDpC,GAChEyB,QAAS,CAAEY,cAzEO,KACpBlD,EAAQ,GACRK,OAAsB8C,OA2ElBC,EAAalB,EAAMnC,GACnBsD,EAAgBD,EAAWjB,UAC3BmB,EAAYF,EAAWf,MACvBkB,EAAcH,EAAWd,QAE/B,OACE,SAAC,EAAAkB,qBAAD,CACEC,OA3EqB,KACV,IAAT1D,EACFF,EAAQwB,KAAKK,cAAYgC,UAAUjC,MAEnCzB,EAAQD,EAAO,IAwEf4D,QAAS,CAAEC,QAAS7D,EAAO,EAAG8D,MAAO3B,EAAM4B,QAC3CC,MAAM,QACNC,SACE,UAACxE,EAAD,WACG4D,EAAW7B,OACZ,SAAC5B,EAAD,WACE,SAAC,EAAAsE,KAAD,CACE3C,KAAMA,EACN4C,cAAe5C,EAAK6C,UAAWnC,GAAQA,EAAIP,OAASK,EAAcL,aAV5E,UAgBE,SAAC4B,EAAD,OAAmBC,GAAeC,O,+BAKzB,IAAAa,YAAWxE,G,uWC5K1B,iBACA,aACA,a,kKCFA,WAEA,YACA,QACA,UAEA,QAUA,QACA,OAEA,OACA,QAEA,U,0DAEA,MAAMyE,EAAyB5E,UAAOC,IAAV,qFAAGD,CAAH,mDAOtB6E,EAAe7E,UAAOC,IAAV,2EAAGD,CAAH,iFAUZ8E,EAAe9E,UAAOC,IAAV,2EAAGD,CAAH,iDAMZ+E,EAAgB/E,UAAOC,IAAV,4EAAGD,CAAH,mDAMbgF,EAAgBhF,UAAOC,IAAV,4EAAGD,CAAH,yBAIbiF,GAAc,aAAOC,cAAV,0EAAG,CAAH,oBAwBJvC,EAAUC,IACrB,MAAM,UACJuC,EADI,SAEJC,EAFI,QAGJ5D,EAHI,MAIJ6D,EAJI,SAKJC,EALI,SAMJC,EANI,aAOJC,EAPI,qBAQJC,EARI,sBASJ7E,EATI,mBAUJC,EAVI,sBAWJE,EAXI,kBAYJI,EAZI,qBAaJD,EAbI,wBAcJD,EAdI,sBAeJH,EAfI,WAgBJ4E,GACE9C,GACG+C,EAAOC,IAAY,IAAApF,eAASkD,IAC5BmC,EAAcC,IAAmB,IAAAtF,UAAS,IAC3CuF,GAAW,IAAArF,aAAYsF,oBAEvB9C,GAAU,IAAAxC,cAAY,IAAAuF,eAAcd,IAEpCe,GAAmB,IAAAC,MACtBC,IAAsB,IAAAC,sBAAqBD,EAAGjB,GAC9CiB,IAAM,IAAAE,uBAAsBF,GAAG,GAFT,CAGvBL,IAEF,IAAAQ,WAAU,KACH/E,GACLgF,EAAuBrC,QAAQ3C,EAAS4D,IACvC,CAAC5D,EAAS4D,IAEb,MAAMoB,GAAyB,IAAAC,SAC7B,aACE,CAACC,EAAmBC,IAClBb,GAAgB,IAAAc,uBAAsBD,EAAaD,IACrD,MAaJ,OACE,2BACGhB,IAAc,SAAC,EAAAmB,kBAAD,KACf,SAACjC,EAAD,WACE,SAAC,EAAAkC,gBAAD,CACE5D,QAASiC,EACT4B,SAAW7D,IACTtC,EAAsBsC,SAI5B,SAAC2B,EAAD,WACE,SAACC,EAAD,WACE,SAAC,EAAAkC,WAAD,CACEC,KAAK,WACLC,OAAO,IAAAnF,cAAa,qBACpBoF,MAAO/B,EACPgC,YAAY,iBACZL,SAAU,EAAGM,QAAUF,YAAcrG,EAAsBqG,GAC3DG,UAAU,EACVC,mBAAmB,EACnBC,OAAQ,eAKd,SAACvC,EAAD,WAAc,IAAAlD,cAAa,cAC3B,UAACiD,EAAD,YACE,SAAC,EAAAyC,gBAAD,CACER,KAAK,UACLE,MAAO3F,EACPuE,SAAUG,EACVwB,SAAWC,IACT5G,EAAsB4G,MAGzBnG,IACC,SAAC,EAAAoG,YAAD,CACErC,SAAUA,EACVD,SAAUA,EACVD,MAAOA,EACPG,aAAcA,EACdC,qBAAsBA,EACtBjE,QAASA,EACTqG,YAAa5G,EACb6G,YAAa5G,EACb6G,SAAU5G,EACV6G,qBAAsBnC,EACtB3C,QAASA,OAKdyC,IACC,SAACX,EAAD,WACE,SAAC,EAAAiD,cAAD,UAAgBtC,OAIpB,SAACZ,EAAD,WACE,SAAC,EAAAmD,OAAD,CAAQC,SAAUzC,EAAYvD,QArEfiG,UACnBxC,OAASlC,GACT,UACQ7C,IACN,MAAOwH,GACPzC,EAASyC,EAAEC,OAASD,EAAEC,OAASD,EAAEE,WAgEsBC,WAAW,EAAhE,UACG,IAAAzG,cAAa,8B,kBAWN,IAAA0G,SAJOC,IAAD,CACtBhD,YAAY,IAAAiD,eAAcD,KAMbE,CAAUjG,G,uJC9MY,CAACkG,EAAcrH,KAAf,CACnCsH,KAAMtH,EAAQuH,QACd5B,MAAO,MACP0B,KAAMA,K,6FCGO,SAAuBjG,GACpC,MAAM,aAAEnB,EAAF,SAAgBsB,GAAaH,EAEnC,OACE,SAAC,EAAAoG,mBAAD,CACEC,WAAYxH,EACZyH,UAAWzH,EACXsB,SAAUA,EACVoG,OAAQC,UAAQC,mBAhBtB,YACA,Q,qGCSe,SAAuBzG,GACpC,MAAM,UAAEY,EAAF,SAAaT,EAAb,cAAuBU,GAA2Bb,EAAT0G,E,kXAA/C,CAAwD1G,EAAxD,GAEA,OACE,SAAC,EAAA2G,U,+VAAD,EACE/F,UAAWA,EACXT,SAAUA,EACVyG,gBAAgB,IAAAzH,cAAa,kBAC7BmH,UAAWzF,EACXwF,WAAYxF,GACR6F,KApBV,aACA,O,iiBCDA,aAEA,QAMA,QACA,QACA,OACA,QASA,O,qkCAIA,MAAM/H,EAA8B,CAClCC,aAASkC,EACTN,eAAgB,CACdmC,SAAUkE,6BACVnE,SAAUoE,wBACVrE,MAAOsE,iBAET5G,cAAUW,EACVF,eAAWE,EACX0B,SAAU,GACVD,UAAWyE,mB,yDAGiE,EAC5ElB,QACAmB,eAEA,MAAM,eAAEC,IAAmB,IAAAC,eA2I3B,MAAO,CACLnJ,sBA1I6BuE,IAC7B0E,EAAUG,GAAD,OACJA,GADI,IAEP7E,YACA3D,aAASkC,EACT0B,SAAU,OAsIZtE,sBAlI6BsE,IAC7ByE,EAAUG,GAAD,OACJA,GADI,IAEP5E,eAgIFvE,mBA5HyBuH,UACzB,MAAM,QACJ5G,EADI,SAEJ4D,EAFI,MAGJC,EAHI,SAIJC,EAJI,SAKJC,EALI,aAMJC,EANI,qBAOJC,GACEiD,EAEJ,IAAKtD,KAAa,IAAA6E,aAAY7E,GAC5B,MAAM,IAAI8E,OAAM,IAAAnI,cAAa,8BAG/B,IAAKP,EACH,MAAM,IAAI0I,OAAM,IAAAnI,cAAa,4BAG/B,MAAM,QAAEmB,GAAY1B,EACpB,GAAyD,IAAA2I,gBACvD,CACE5E,WACAD,WACAE,eACAC,uBACAJ,QACA7D,UACAuH,QAAS,GACT7F,WAEF,IACAkC,IAZME,SAAU8E,EAAZ,GAA4BC,GAAlC,EAAyCC,EAAzC,aAgBM,IAAAC,gBAAerH,EAASoH,GAE9B,MAAME,EAAK,EAAH,KAAQF,GAAR,IAAqBhF,UAAU,IAAAmF,oBAAmBnF,KAEpDvC,GAAW,IAAA2H,mBAAkBF,EAAIhJ,EAAS,KAEhDqI,EAAUG,GAAD,OACJA,GADI,IAEP5G,eAAgBkH,EAChBvH,cAGF4H,KA6EA5J,sBA1E6BS,IAC7BqI,EAAUG,GAAD,OACJA,GADI,IAEPxI,cAwEFR,eApEqBoH,MAAOwC,EAAmBD,KAC/C,MAAM,QAAEnJ,EAAF,SAAWuB,GAAa2F,EAE9B,GAAKlH,EAEL,IAAI,IAAAqJ,cAAarJ,EAAQyB,QAAS,CAChC,MAIMO,EAAY,EAAH,KAHboH,GAAgBA,EAAaE,KACzBF,GACA,IAAAG,aAAYH,EAAcI,YAAUC,QAApC,CAA6C7B,UAAQC,gBAAiBtG,IAC7D,IAEbsH,GAAI3B,EAAM3F,SAASmI,gBACnBpC,KAAMJ,EAAM3F,SAASI,cAAc4F,QACnCoC,OAAQzC,EAAM3F,SAASoI,SAEzBrB,EAAepB,EAAM3F,SAASI,cAAeK,GAC7CqG,EAAUG,GAAD,OACJA,GADI,IAEPxG,eAGFmH,QACK,CACY,IAAIS,kBAAgB5J,EAAQ0B,SAE1CmI,UAAUT,GACVU,KAAMC,IACL,MAAMC,GAAmB,IAAAC,sBACvBF,EAA4BT,KADL,CAEvB1B,UAAQC,gBAAiBtG,GAC3B+G,EAAepB,EAAM3F,SAASI,cAAeqI,GAC7C3B,EAAUG,GAAD,OACJA,GADI,IAEPxG,UAAWgI,OAGdE,QAAQf,KAgCb1J,wBA3BAqC,IAEAuG,EAAUG,GAAD,OACJA,GACA1G,KAwBLnC,kBAdyBkE,IACzBwE,EAAUG,GAAD,OACJA,GADI,IAEP3E,YAYFnE,qBAtB4BoE,IAC5BuE,EAAUG,GAAD,OACJA,GADI,IAEP1E,eAoBFlE,qBAAsBsH","file":"DeployContractsFlow.97f3289441b1964a407c.js","sourcesContent":["import { useState } from 'react';\n\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, Tabs, WALLET_STEPS } from '@components';\nimport { ROUTE_PATHS } from '@config';\nimport { getDefaultAccount, useSelector } from '@store';\nimport { BREAK_POINTS } from '@theme';\nimport { translateRaw } from '@translations';\nimport { IPendingTxReceipt, ISignedTx, Tab } from '@types';\nimport { useStateReducer } from '@utils';\n\nimport { Deploy, DeployConfirm, DeployReceipt } from './components';\nimport { DeployContractsFactory, deployContractsInitialState } from './stateFactory';\nimport { DeployContractsState } from './types';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\ninterface ExtendedTab extends Tab {\n  path: string;\n}\n\ninterface TStep {\n  title: string;\n  component: any;\n  props: any;\n  actions: any;\n}\n\nconst Heading = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  align-items: center;\n\n  @media (max-width: ${SCREEN_XS}) {\n    flex-direction: column;\n    align-items: stretch;\n  }\n`;\n\nconst TabsWrapper = styled.div`\n  margin-top: 8px;\n  width: fit-content;\n`;\n\nexport const DeployContractsFlow = ({ history, location }: RouteComponentProps) => {\n  const [step, setStep] = useState(0);\n  const defaultAccount = useSelector(getDefaultAccount());\n  const {\n    handleNetworkSelected,\n    handleDeploySubmit,\n    handleByteCodeChanged,\n    handleAccountSelected,\n    handleTxSigned,\n    handleGasSelectorChange,\n    handleGasLimitChange,\n    handleNonceChange,\n    deployContractsState\n  } = useStateReducer(DeployContractsFactory, {\n    ...deployContractsInitialState,\n    account: defaultAccount\n  });\n\n  const { account }: DeployContractsState = deployContractsState;\n\n  const goToFirstStep = () => {\n    setStep(0);\n    handleNetworkSelected(undefined);\n  };\n\n  const goToNextStep = () => {\n    setStep(step + 1);\n  };\n\n  const goToPreviousStep = () => {\n    if (step === 0) {\n      history.push(ROUTE_PATHS.DASHBOARD.path);\n    } else {\n      setStep(step - 1);\n    }\n  };\n\n  const tabClickRedirect = (url: string): void => {\n    history.push(url);\n  };\n\n  const tabs: ExtendedTab[] = [\n    {\n      title: translateRaw('CONTRACTS_INTERACT'),\n      path: ROUTE_PATHS.INTERACT_WITH_CONTRACTS.path,\n      onClick: () => tabClickRedirect(ROUTE_PATHS.INTERACT_WITH_CONTRACTS.path)\n    },\n    {\n      title: translateRaw('CONTRACTS_DEPLOY'),\n      path: ROUTE_PATHS.DEPLOY_CONTRACTS.path,\n      onClick: () => tabClickRedirect(ROUTE_PATHS.DEPLOY_CONTRACTS.path)\n    }\n  ];\n\n  const currentRoute = tabs.find((tab) => tab.path === location.pathname);\n\n  const steps: TStep[] = [\n    {\n      title: translateRaw('DEPLOY_CONTRACTS'),\n      component: Deploy,\n      props: deployContractsState,\n      actions: {\n        handleByteCodeChanged,\n        handleNetworkSelected,\n        handleDeploySubmit: () => handleDeploySubmit(goToNextStep),\n        handleAccountSelected,\n        handleGasSelectorChange,\n        handleNonceChange,\n        handleGasLimitChange\n      }\n    },\n    {\n      title: translateRaw('CONFIRM_TX_MODAL_TITLE'),\n      component: DeployConfirm,\n      props: (({ txConfig }) => ({ txConfig }))(deployContractsState),\n      actions: { goToNextStep }\n    },\n    {\n      title: translateRaw('DEPLOY_SIGN'),\n      component: account && WALLET_STEPS[account.wallet],\n      props: (({ txConfig }) => ({\n        network: account && account.network,\n        senderAccount: account,\n        rawTransaction: txConfig?.rawTransaction\n      }))(deployContractsState),\n      actions: {\n        onSuccess: (payload: IPendingTxReceipt | ISignedTx) => handleTxSigned(payload, goToNextStep)\n      }\n    },\n    {\n      title: translateRaw('DEPLOY_RECEIPT'),\n      component: DeployReceipt,\n      props: (({ txConfig, txReceipt }) => ({ txConfig, txReceipt }))(deployContractsState),\n      actions: { goToFirstStep }\n    }\n  ];\n\n  const stepObject = steps[step];\n  const StepComponent = stepObject.component;\n  const stepProps = stepObject.props;\n  const stepActions = stepObject.actions;\n\n  return (\n    <ExtendedContentPanel\n      onBack={goToPreviousStep}\n      stepper={{ current: step + 1, total: steps.length }}\n      width=\"750px\"\n      heading={\n        <Heading>\n          {stepObject.title}\n          <TabsWrapper>\n            <Tabs\n              tabs={tabs}\n              selectedIndex={tabs.findIndex((tab) => tab.path === currentRoute!.path)}\n            />\n          </TabsWrapper>\n        </Heading>\n      }\n    >\n      <StepComponent {...stepProps} {...stepActions} />\n    </ExtendedContentPanel>\n  );\n};\n\nexport default withRouter(DeployContractsFlow);\n","export { default as Deploy } from './Deploy';\nexport { default as DeployConfirm } from './DeployConfirm';\nexport { default as DeployReceipt } from './DeployReceipt';\n","import { useEffect, useRef, useState } from 'react';\n\nimport debounce from 'lodash/debounce';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\n\nimport {\n  AccountSelector,\n  Button,\n  DemoGatewayBanner,\n  GasSelector,\n  InlineMessage,\n  InputField,\n  NetworkSelector,\n  Typography\n} from '@components';\nimport { AppState, getIsDemoMode, getStoreAccounts, selectNetwork, useSelector } from '@store';\nimport { translateRaw } from '@translations';\nimport { ISimpleTxForm, NetworkId, StoreAccount } from '@types';\nimport { getAccountsByNetwork, getAccountsByViewOnly } from '@utils';\nimport { pipe } from '@vendor';\n\nimport { constructGasCallProps } from '../helpers';\n\nconst NetworkSelectorWrapper = styled.div`\n  margin-bottom: 12px;\n  label {\n    font-weight: normal;\n  }\n`;\n\nconst FieldWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 12px;\n  flex: 1;\n  p {\n    font-size: 1em;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst ButtonWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: left;\n`;\n\nconst MarginWrapper = styled.div`\n  margin-bottom: 12px;\n`;\n\nconst CustomLabel = styled(Typography)`\n  font-size: 1em;\n`;\n\ninterface DeployProps {\n  networkId: NetworkId;\n  byteCode: string;\n  account: StoreAccount;\n  nonce: string;\n  gasLimit: string;\n  gasPrice: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n  handleNetworkSelected(networkId: string): void;\n  handleDeploySubmit(): void;\n  handleAccountSelected(account: StoreAccount): void;\n  handleGasSelectorChange(\n    payload: Partial<Pick<ISimpleTxForm, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>>\n  ): void;\n  handleByteCodeChanged(byteCode: string): void;\n  handleGasLimitChange(payload: string): void;\n  handleNonceChange(payload: string): void;\n}\n\nexport const Deploy = (props: Props) => {\n  const {\n    networkId,\n    byteCode,\n    account,\n    nonce,\n    gasLimit,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    handleNetworkSelected,\n    handleDeploySubmit,\n    handleAccountSelected,\n    handleNonceChange,\n    handleGasLimitChange,\n    handleGasSelectorChange,\n    handleByteCodeChanged,\n    isDemoMode\n  } = props;\n  const [error, setError] = useState(undefined);\n  const [gasCallProps, setGasCallProps] = useState({});\n  const accounts = useSelector(getStoreAccounts);\n\n  const network = useSelector(selectNetwork(networkId));\n\n  const filteredAccounts = pipe(\n    (a: StoreAccount[]) => getAccountsByNetwork(a, networkId),\n    (a) => getAccountsByViewOnly(a, false)\n  )(accounts);\n\n  useEffect(() => {\n    if (!account) return;\n    debouncedUpdateGasCall.current(account, byteCode);\n  }, [account, byteCode]);\n\n  const debouncedUpdateGasCall = useRef(\n    debounce(\n      (acc: StoreAccount, byteCodeVal: string) =>\n        setGasCallProps(constructGasCallProps(byteCodeVal, acc)),\n      700\n    )\n  );\n\n  const deploySubmit = async () => {\n    setError(undefined);\n    try {\n      await handleDeploySubmit();\n    } catch (e) {\n      setError(e.reason ? e.reason : e.message);\n    }\n  };\n\n  return (\n    <div>\n      {isDemoMode && <DemoGatewayBanner />}\n      <NetworkSelectorWrapper>\n        <NetworkSelector\n          network={networkId}\n          onChange={(network) => {\n            handleNetworkSelected(network);\n          }}\n        />\n      </NetworkSelectorWrapper>\n      <FieldWrapper>\n        <InputWrapper>\n          <InputField\n            name=\"byteCode\"\n            label={translateRaw('CONTRACT_BYTECODE')}\n            value={byteCode}\n            placeholder=\"0x8f87a973e...\"\n            onChange={({ target: { value } }) => handleByteCodeChanged(value)}\n            textarea={true}\n            resizableTextArea={true}\n            height={'108px'}\n          />\n        </InputWrapper>\n      </FieldWrapper>\n\n      <CustomLabel>{translateRaw('ACCOUNT')}</CustomLabel>\n      <MarginWrapper>\n        <AccountSelector\n          name=\"account\"\n          value={account}\n          accounts={filteredAccounts}\n          onSelect={(option: StoreAccount) => {\n            handleAccountSelected(option);\n          }}\n        />\n        {account && (\n          <GasSelector\n            gasPrice={gasPrice}\n            gasLimit={gasLimit}\n            nonce={nonce}\n            maxFeePerGas={maxFeePerGas}\n            maxPriorityFeePerGas={maxPriorityFeePerGas}\n            account={account}\n            setGasPrice={handleGasSelectorChange}\n            setGasLimit={handleGasLimitChange}\n            setNonce={handleNonceChange}\n            estimateGasCallProps={gasCallProps}\n            network={network}\n          />\n        )}\n      </MarginWrapper>\n\n      {error && (\n        <MarginWrapper>\n          <InlineMessage>{error}</InlineMessage>\n        </MarginWrapper>\n      )}\n\n      <ButtonWrapper>\n        <Button disabled={isDemoMode} onClick={deploySubmit} fullwidth={true}>\n          {translateRaw('NAV_DEPLOYCONTRACT')}\n        </Button>\n      </ButtonWrapper>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  isDemoMode: getIsDemoMode(state)\n});\n\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector> & DeployProps;\n\nexport default connector(Deploy);\n","import { ITxData, ITxValue, StoreAccount } from '@types';\n\nexport const constructGasCallProps = (data: string, account: StoreAccount) => ({\n  from: account.address,\n  value: '0x0' as ITxValue,\n  data: data as ITxData\n});\n","import { ConfirmTransaction } from '@components';\nimport { ITxConfig, ITxType } from '@types';\n\ninterface Props {\n  txConfig: ITxConfig;\n  goToNextStep(): void;\n}\n\nexport default function DeployConfirm(props: Props) {\n  const { goToNextStep, txConfig } = props;\n\n  return (\n    <ConfirmTransaction\n      onComplete={goToNextStep}\n      resetFlow={goToNextStep}\n      txConfig={txConfig}\n      txType={ITxType.DEPLOY_CONTRACT}\n    />\n  );\n}\n","import { TxReceipt } from '@components/TransactionFlow';\nimport { translateRaw } from '@translations';\nimport { ITxConfig, ITxReceipt } from '@types';\n\ninterface Props {\n  txReceipt: ITxReceipt;\n  txConfig: ITxConfig;\n  goToFirstStep(): void;\n}\n\nexport default function DeployReceipt(props: Props) {\n  const { txReceipt, txConfig, goToFirstStep, ...rest } = props;\n\n  return (\n    <TxReceipt\n      txReceipt={txReceipt}\n      txConfig={txConfig}\n      completeButton={translateRaw('DEPLOY_ANOTHER')}\n      resetFlow={goToFirstStep}\n      onComplete={goToFirstStep}\n      {...rest}\n    />\n  );\n}\n","import { isHexString } from 'ethjs-util';\n\nimport {\n  DEFAULT_NETWORK,\n  DEFAULT_NONCE,\n  GAS_LIMIT_LOWER_BOUND,\n  GAS_PRICE_GWEI_DEFAULT_HEX\n} from '@config';\nimport { makeBasicTxConfig, makePendingTxReceipt, makeTxFromForm, toTxReceipt } from '@helpers';\nimport { getGasEstimate, ProviderHandler, useAccounts } from '@services';\nimport { translateRaw } from '@translations';\nimport {\n  ISimpleTxForm,\n  ITxData,\n  ITxHash,\n  ITxStatus,\n  ITxType,\n  NetworkId,\n  StoreAccount\n} from '@types';\nimport { inputGasLimitToHex, isWeb3Wallet, TUseStateReducerFactory } from '@utils';\n\nimport { DeployContractsState } from './types';\n\nconst deployContractsInitialState = {\n  account: undefined,\n  rawTransaction: {\n    gasPrice: GAS_PRICE_GWEI_DEFAULT_HEX,\n    gasLimit: GAS_LIMIT_LOWER_BOUND,\n    nonce: DEFAULT_NONCE\n  },\n  txConfig: undefined,\n  txReceipt: undefined,\n  byteCode: '',\n  networkId: DEFAULT_NETWORK\n};\n\nconst DeployContractsFactory: TUseStateReducerFactory<DeployContractsState> = ({\n  state,\n  setState\n}) => {\n  const { addTxToAccount } = useAccounts();\n\n  const handleNetworkSelected = (networkId: NetworkId) => {\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      networkId,\n      account: undefined,\n      byteCode: ''\n    }));\n  };\n\n  const handleByteCodeChanged = (byteCode: string) => {\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      byteCode\n    }));\n  };\n\n  const handleDeploySubmit = async (after: () => void) => {\n    const {\n      account,\n      byteCode,\n      nonce,\n      gasLimit,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = state;\n\n    if (!byteCode || !isHexString(byteCode)) {\n      throw new Error(translateRaw('DEPLOY_ERROR_INVALID_DATA'));\n    }\n\n    if (!account) {\n      throw new Error(translateRaw('DEPLOY_ERROR_NO_ACCOUNT'));\n    }\n\n    const { network } = account;\n    const { gasLimit: unusedGasLimit, to, ...transaction } = makeTxFromForm(\n      {\n        gasPrice,\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        account,\n        address: '',\n        network\n      },\n      '0',\n      byteCode as ITxData\n    );\n\n    // check if transaction fails everytime\n    await getGasEstimate(network, transaction);\n\n    const tx = { ...transaction, gasLimit: inputGasLimitToHex(gasLimit) };\n\n    const txConfig = makeBasicTxConfig(tx, account, '0');\n\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      rawTransaction: transaction,\n      txConfig\n    }));\n\n    after();\n  };\n\n  const handleAccountSelected = (account?: StoreAccount) => {\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      account\n    }));\n  };\n\n  const handleTxSigned = async (signResponse: any, after: () => void) => {\n    const { account, txConfig } = state;\n\n    if (!account) return;\n\n    if (isWeb3Wallet(account.wallet)) {\n      const baseTxReceipt =\n        signResponse && signResponse.hash\n          ? signResponse\n          : toTxReceipt(signResponse, ITxStatus.PENDING)(ITxType.DEPLOY_CONTRACT, txConfig);\n      const txReceipt = {\n        ...baseTxReceipt,\n        to: state.txConfig.receiverAddress,\n        from: state.txConfig.senderAccount.address,\n        amount: state.txConfig.amount\n      };\n      addTxToAccount(state.txConfig.senderAccount, txReceipt);\n      setState((prevState: DeployContractsState) => ({\n        ...prevState,\n        txReceipt\n      }));\n\n      after();\n    } else {\n      const provider = new ProviderHandler(account.network);\n      provider\n        .sendRawTx(signResponse)\n        .then((retrievedTransactionReceipt) => {\n          const pendingTxReceipt = makePendingTxReceipt(\n            retrievedTransactionReceipt.hash as ITxHash\n          )(ITxType.DEPLOY_CONTRACT, txConfig);\n          addTxToAccount(state.txConfig.senderAccount, pendingTxReceipt);\n          setState((prevState: DeployContractsState) => ({\n            ...prevState,\n            txReceipt: pendingTxReceipt\n          }));\n        })\n        .finally(after);\n    }\n  };\n\n  const handleGasSelectorChange = (\n    payload: Pick<ISimpleTxForm, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>\n  ) => {\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      ...payload\n    }));\n  };\n  const handleGasLimitChange = (gasLimit: string) => {\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      gasLimit\n    }));\n  };\n\n  const handleNonceChange = (nonce: string) => {\n    setState((prevState: DeployContractsState) => ({\n      ...prevState,\n      nonce\n    }));\n  };\n\n  return {\n    handleNetworkSelected,\n    handleByteCodeChanged,\n    handleDeploySubmit,\n    handleAccountSelected,\n    handleTxSigned,\n    handleGasSelectorChange,\n    handleNonceChange,\n    handleGasLimitChange,\n    deployContractsState: state\n  };\n};\n\nexport { deployContractsInitialState, DeployContractsFactory };\n"],"sourceRoot":""}