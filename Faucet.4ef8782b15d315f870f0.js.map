{"version":3,"sources":["webpack:///./src/features/Faucet/index.tsx","webpack:///./src/features/Faucet/Faucet.tsx","webpack:///./src/features/Faucet/components/index.ts","webpack:///./src/features/Faucet/components/Error.tsx","webpack:///./src/features/Faucet/helpers.tsx","webpack:///./src/features/Faucet/stateFactory.tsx","webpack:///./src/services/ApiService/Faucet/index.ts","webpack:///./src/services/ApiService/Faucet/Faucet.ts"],"names":["history","useHistory","faucetState","reset","setSolution","requestFunds","finalizeRequestFunds","useStateReducer","FaucetFactory","initialFaucetState","accounts","useSelector","getStoreAccounts","addTxToAccount","useAccounts","validAccounts","filter","account","FAUCET_NETWORKS","includes","network","id","networks","getNetworkById","useNetworks","assets","useAssets","getContactByAddressAndNetworkId","useContacts","setNetwork","useState","undefined","txConfig","txResult","makeTxConfig","txReceipt","makeTxReceipt","useEffect","recipientAccount","getStoreAccount","to","baseAsset","networkId","steps","Formik","initialValues","recipientAddress","onSubmit","noOp","render","values","Form","Description","Fieldset","SLabel","htmlFor","Field","name","component","field","form","AccountSelector","value","onSelect","option","setFieldValue","length","NoTestnetAccounts","type","InlineMessageType","ERROR","Trans","variables","$link_add_account","LinkApp","href","ROUTE_PATHS","ADD_ACCOUNT","path","translateRaw","$link_create_account","RequestButton","onClick","disabled","Object","keys","CenterText","getKBHelpArticle","KB_HELP_ARTICLE","WHERE_TO_GET_TESTNET_ETHER","isExternal","CodeHeader","CodeHeading","as","Tooltip","tooltip","className","src","questionToolTip","challenge","style","width","marginBottom","Input","solution","placeholder","onChange","e","target","error","IncorrectResponse","SubmitCaptchaButton","loading","possibleSolution","TxReceipt","onComplete","resetFlow","queryStringsDisabled","customBroadcastText","disablePendingState","customComponent","FaucetReceiptBanner","received","completeButton","generateTweet","$faucet_url","MYCRYPTO_FAUCET_LINK","Button","colorScheme","fullwidth","ExtendedContentPanel","heading","icon","receiveIcon","onBack","push","DASHBOARD","stepper","current","step","total","Error","styled","label","SPACING","SM","COLORS","GREY_DARKEST","fieldset","BASE","div","Heading","InlineMessage","p","MD","Box","WARNING_ORANGE","LG","ContactUsText","BLUE_MYC","getFailureMessage","WARNING","$link","formatSupportEmail","test","capitalizedNetworkId","charAt","toUpperCase","slice","find","getNetworkByLowercaseId","senderContact","from","newTxResult","gasLimit","BigNumber","maxPriorityFeePerGas","maxFeePerGas","makeTxConfigFromTx","senderAccount","toTxReceipt","hash","ITxStatus","PENDING","ITxType","FAUCET","state","setState","prevState","toLowerCase","address","FaucetService","requestChallenge","then","result","success","message","catch","solutionInput","challengeID","solveChallenge","regenerateChallenge","err","async","data","service","get","ApiService","generateInstance","baseURL","FAUCET_API","timeout"],"mappings":"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","file":"Faucet.4ef8782b15d315f870f0.js","sourcesContent":["export { default } from './Faucet';\n","import { useEffect, useState } from 'react';\n\nimport { Heading, Input, Tooltip } from '@mycrypto/ui';\nimport { Field, FieldProps, Form, Formik, FormikProps } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport questionToolTip from '@assets/images/icn-question.svg';\nimport receiveIcon from '@assets/images/icn-receive.svg';\nimport {\n  AccountSelector,\n  Button,\n  ExtendedContentPanel,\n  InlineMessage,\n  LinkApp,\n  TxReceipt\n} from '@components';\nimport { FaucetReceiptBanner } from '@components/TransactionFlow/displays';\nimport {\n  FAUCET_NETWORKS,\n  getKBHelpArticle,\n  KB_HELP_ARTICLE,\n  MYCRYPTO_FAUCET_LINK,\n  ROUTE_PATHS\n} from '@config';\nimport { getStoreAccount, useAccounts, useAssets, useContacts, useNetworks } from '@services/Store';\nimport { getStoreAccounts, useSelector } from '@store';\nimport { COLORS, SPACING } from '@theme';\nimport translate, { Trans, translateRaw } from '@translations';\nimport { IAccount as IIAccount, InlineMessageType, Network, StoreAccount } from '@types';\nimport { generateTweet, noOp, useStateReducer } from '@utils';\n\nimport { Error as ErrorComponent } from './components';\nimport { makeTxConfig, makeTxReceipt, possibleSolution } from './helpers';\nimport FaucetFactory from './stateFactory';\n\n// Legacy\n\nconst SLabel = styled.label`\n  margin-bottom: ${SPACING.SM};\n  color: ${COLORS.GREY_DARKEST};\n  font-weight: normal;\n`;\n\nconst Fieldset = styled.fieldset`\n  margin-bottom: ${SPACING.BASE};\n`;\n\nconst CodeHeader = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CodeHeading = styled(Heading)`\n  margin-top: ${SPACING.SM};\n`;\n\nconst NoTestnetAccounts = styled(InlineMessage)`\n  margin-bottom: ${SPACING.BASE};\n`;\n\nconst IncorrectResponse = styled(InlineMessage)`\n  margin-top: ${SPACING.SM};\n`;\n\nconst Description = styled.p`\n  margin-bottom: ${SPACING.MD};\n`;\n\nconst CenterText = styled.div`\n  margin-top: ${SPACING.MD};\n  text-align: center;\n`;\n\nconst RequestButton = styled(Button)`\n  width: 100%;\n`;\n\nconst SubmitCaptchaButton = styled(Button)`\n  width: 100%;\n  margin-top: ${SPACING.MD};\n`;\n\nconst initialFaucetState = () => ({\n  step: 0,\n  loading: false\n});\n\nexport default function Faucet() {\n  const history = useHistory();\n\n  const { faucetState, reset, setSolution, requestFunds, finalizeRequestFunds } = useStateReducer(\n    FaucetFactory,\n    initialFaucetState\n  );\n\n  const accounts = useSelector(getStoreAccounts);\n\n  const { addTxToAccount } = useAccounts();\n\n  const initialValues = {\n    recipientAddress: {} as StoreAccount\n  };\n\n  const validAccounts = accounts.filter((account) => FAUCET_NETWORKS.includes(account.network.id));\n\n  const { networks, getNetworkById } = useNetworks();\n  const { assets } = useAssets();\n  const { getContactByAddressAndNetworkId } = useContacts();\n\n  const [network, setNetwork] = useState<Network | undefined>(undefined);\n\n  const txConfig =\n    faucetState.txResult &&\n    makeTxConfig(faucetState.txResult, networks, assets, accounts, getContactByAddressAndNetworkId);\n\n  const txReceipt = txConfig && makeTxReceipt(faucetState.txResult, txConfig);\n\n  useEffect(() => {\n    if (txReceipt) {\n      const recipientAccount = getStoreAccount(accounts)(\n        txReceipt.to,\n        txReceipt.baseAsset.networkId\n      );\n      if (recipientAccount) {\n        addTxToAccount(recipientAccount, txReceipt);\n      }\n    }\n  }, [faucetState.txResult]);\n\n  const steps = [\n    <Formik\n      key=\"recipient\"\n      initialValues={initialValues}\n      onSubmit={noOp}\n      render={({ values: { recipientAddress } }: FormikProps<typeof initialValues>) => (\n        <Form>\n          <Description>{translate('FAUCET_DESCRIPTION')}</Description>\n          <Fieldset>\n            <SLabel htmlFor=\"recipientAddress\">{translate('X_RECIPIENT')}</SLabel>\n            <Field\n              name=\"recipientAddress\"\n              component={({ field, form }: FieldProps) => (\n                <AccountSelector\n                  name={field.name}\n                  value={field.value}\n                  accounts={validAccounts}\n                  onSelect={(option: IIAccount) => {\n                    form.setFieldValue(field.name, option);\n                    setNetwork(getNetworkById(option.networkId));\n                  }}\n                />\n              )}\n            />\n          </Fieldset>\n          {validAccounts.length === 0 && (\n            <NoTestnetAccounts type={InlineMessageType.ERROR}>\n              <Trans\n                id=\"FAUCET_NO_ACCOUNTS\"\n                variables={{\n                  $link_add_account: () => (\n                    <LinkApp href={ROUTE_PATHS.ADD_ACCOUNT.path}>\n                      {translateRaw('FAUCET_ADD_ACCOUNT_LINK')}\n                    </LinkApp>\n                  ),\n                  $link_create_account: () => (\n                    <LinkApp href={ROUTE_PATHS.ADD_ACCOUNT.path}>\n                      {translateRaw('FAUCET_CREATE_ACCOUNT_LINK')}\n                    </LinkApp>\n                  )\n                }}\n              />\n            </NoTestnetAccounts>\n          )}\n          <RequestButton\n            name=\"requestFunds\"\n            onClick={() => requestFunds(recipientAddress)}\n            disabled={Object.keys(recipientAddress).length === 0}\n          >\n            {translate('REQUEST')}\n          </RequestButton>\n          <CenterText>\n            {translate('FAUCET_NOT_SURE')}\n            <br />\n            <LinkApp\n              href={getKBHelpArticle(KB_HELP_ARTICLE.WHERE_TO_GET_TESTNET_ETHER)}\n              isExternal={true}\n            >\n              {translate('VISIT_KB')}\n            </LinkApp>\n          </CenterText>\n        </Form>\n      )}\n    />,\n    <>\n      <CodeHeader>\n        <CodeHeading as=\"h3\">{translateRaw('CAPTCHA')}</CodeHeading>\n        <Tooltip tooltip={translate('CAPTCHA_TOOLTIP')}>\n          <img className=\"Tool-tip-img\" src={questionToolTip} />\n        </Tooltip>\n      </CodeHeader>\n      {faucetState.challenge && (\n        <div style={{ width: '100%', marginBottom: '20px' }}>\n          <img\n            style={{ width: '100%' }}\n            src={`data:image/png;base64,${faucetState.challenge.challenge}`}\n          />\n        </div>\n      )}\n      <Input\n        value={faucetState.solution}\n        name=\"captcha\"\n        placeholder={translateRaw('FAUCET_ENTER_RESPONSE')}\n        onChange={(e) => {\n          setSolution(e.target.value);\n        }}\n      />\n      {faucetState.error && faucetState.error === 'INVALID_SOLUTION' && (\n        <IncorrectResponse type={InlineMessageType.ERROR}>\n          {translateRaw('CAPTCHA_INCORRECT_RESPONSE')}\n        </IncorrectResponse>\n      )}\n      <SubmitCaptchaButton\n        name=\"submitCaptcha\"\n        onClick={() => finalizeRequestFunds(faucetState.solution)}\n        disabled={faucetState.loading || !possibleSolution(faucetState.solution)}\n      >\n        {translateRaw('CAPTCHA_SUBMIT')}\n      </SubmitCaptchaButton>\n    </>,\n    <>\n      {faucetState.txResult && (\n        <TxReceipt\n          txConfig={txConfig}\n          txReceipt={txReceipt}\n          onComplete={() => reset()}\n          resetFlow={() => reset()}\n          queryStringsDisabled={true}\n          customBroadcastText={translateRaw('FAUCET_SUCCESS')}\n          disablePendingState={true}\n          customComponent={() => (\n            <FaucetReceiptBanner network={network!} received={faucetState.txResult.value} />\n          )}\n          completeButton={() => (\n            <LinkApp\n              href={generateTweet(\n                translateRaw('FAUCET_TWEET', {\n                  $faucet_url: MYCRYPTO_FAUCET_LINK\n                })\n              )}\n              isExternal={true}\n            >\n              <Button\n                colorScheme={'inverted'}\n                fullwidth={true}\n                className=\"TransactionReceipt-tweet\"\n              >\n                <i className=\"sm-icon sm-logo-twitter TransactionReceipt-tweet-icon\" />{' '}\n                <span className=\"TransactionReceipt-tweet-text\">{translate('FAUCET_SHARE')}</span>\n              </Button>\n            </LinkApp>\n          )}\n        />\n      )}\n    </>\n  ];\n\n  return (\n    <ExtendedContentPanel\n      heading={translateRaw('FAUCET')}\n      icon={receiveIcon}\n      onBack={() => history.push(ROUTE_PATHS.DASHBOARD.path)}\n      stepper={{ current: faucetState.step + 1, total: steps.length }}\n      width=\"750px\"\n    >\n      {faucetState.error && faucetState.error !== 'INVALID_SOLUTION' ? (\n        <ErrorComponent type={faucetState.error} />\n      ) : (\n        steps[faucetState.step]\n      )}\n    </ExtendedContentPanel>\n  );\n}\n","export { default as Error } from './Error';\n","import { FunctionComponent } from 'react';\n\nimport styled from 'styled-components';\n\nimport { InlineMessage } from '@components';\nimport { COLORS, SPACING } from '@theme';\nimport translate from '@translations';\nimport { InlineMessageType } from '@types';\nimport { formatSupportEmail } from '@utils';\n\nconst Box = styled.div`\n  border: 1px solid ${COLORS.WARNING_ORANGE};\n  box-sizing: border-box;\n  border-radius: 2px;\n  margin-top: ${SPACING.LG};\n`;\n\nconst ContactUsText = styled(InlineMessage)`\n  font-style: italic;\n  font-size: 14px;\n  margin: ${SPACING.BASE};\n  a,\n  a:hover {\n    color: ${COLORS.BLUE_MYC};\n    text-decoration: none;\n    font-weight: bold;\n  }\n`;\n\nconst getFailureMessage = (type: string) => {\n  switch (type) {\n    case 'API_FAILURE':\n      return <p>{translate('FAUCET_API_FAILURE')}</p>;\n    case 'RUNNING_LOW':\n      return <p>{translate('FAUCET_RUNNING_LOW')}</p>;\n    case 'DAILY_LIMIT_REACHED':\n      return <p>{translate('FAUCET_LIMIT_REACHED')}</p>;\n    default:\n      return <p>{translate('FAUCET_UNKNOWN_ERROR')}</p>;\n  }\n};\n\ninterface Props {\n  type: string;\n}\n\nconst Error: FunctionComponent<Props> = ({ type }) => {\n  return (\n    <>\n      {getFailureMessage(type)}\n      <Box>\n        <ContactUsText type={InlineMessageType.WARNING}>\n          {translate('FAUCET_ERROR', {\n            $link: formatSupportEmail(`Issue with FAUCET`, `Issue: ${type}`)\n          })}\n        </ContactUsText>\n      </Box>\n    </>\n  );\n};\n\nexport default Error;\n","import { BigNumber } from '@ethersproject/bignumber';\n\nimport { makeTxConfigFromTx, toTxReceipt } from '@helpers';\nimport {\n  ExtendedAsset,\n  ExtendedContact,\n  ITxConfig,\n  ITxReceipt,\n  ITxStatus,\n  ITxType,\n  Network,\n  NetworkId,\n  StoreAccount,\n  TAddress\n} from '@types';\n\nimport { ITxFaucetResult } from './types';\n\nexport const possibleSolution = (solution: string) => {\n  return /^[a-zA-Z0-9]{4}$/.test(solution);\n};\n\nconst getNetworkByLowercaseId = (id: string, networks: Network[] = []): Network => {\n  const capitalizedNetworkId = (id.charAt(0).toUpperCase() + id.slice(1)) as NetworkId;\n  return networks.find((network: Network) => network.id === capitalizedNetworkId) as Network;\n};\n\nexport const makeTxConfig = (\n  txResult: ITxFaucetResult,\n  networks: Network[],\n  assets: ExtendedAsset[],\n  accounts: StoreAccount[],\n  getContactByAddressAndNetworkId: (\n    address: TAddress,\n    networkId: NetworkId\n  ) => ExtendedContact | undefined\n): ITxConfig => {\n  const network = getNetworkByLowercaseId(txResult.network, networks);\n\n  // Guaranteed to work as Faucet address is in STATIC_CONTACTS\n  const senderContact = getContactByAddressAndNetworkId(txResult.from, network.id)!;\n\n  const newTxResult = {\n    ...txResult,\n    gasLimit: BigNumber.from(txResult.gasLimit),\n    maxPriorityFeePerGas: BigNumber.from(txResult.maxPriorityFeePerGas),\n    maxFeePerGas: BigNumber.from(txResult.maxFeePerGas),\n    type: 2,\n    value: BigNumber.from(txResult.value)\n  };\n\n  /*\n   * ITxConfig.senderAccount uses type StoreAccount, but in this case the user is the recipient and the faucet is the sender.\n   * getContactByAddressAndNetworkId() returns ExtendedContact, which is the closest we can get.\n   * The result is casted to make it compatible with ITxConfig.\n   */\n  const txConfig = {\n    ...makeTxConfigFromTx(newTxResult, assets, network, accounts),\n    senderAccount: (senderContact as unknown) as StoreAccount\n  };\n\n  return txConfig;\n};\n\nexport const makeTxReceipt = (txResult: ITxFaucetResult, txConfig: ITxConfig): ITxReceipt => {\n  const txReceipt = toTxReceipt(txResult.hash, ITxStatus.PENDING)(ITxType.FAUCET, txConfig);\n  return txReceipt;\n};\n","import { FaucetService } from '@services/ApiService/Faucet';\nimport { StoreAccount } from '@types';\nimport { TUseStateReducerFactory } from '@utils';\n\nimport { FaucetState, ITxFaucetResult } from './types';\n\nconst FaucetFactory: TUseStateReducerFactory<FaucetState> = ({ state, setState }) => {\n  const reset = () => {\n    setState(() => ({\n      step: 0,\n      loading: false\n    }));\n  };\n\n  const setSolution = (solution: string) => {\n    setState((prevState: FaucetState) => ({\n      ...prevState,\n      solution\n    }));\n  };\n\n  const requestFunds = (recipientAddress: StoreAccount) => {\n    const network = recipientAddress.network.name.toLowerCase();\n    const address = recipientAddress.address;\n    FaucetService.requestChallenge(network, address)\n      .then((result) => {\n        if (!result.success) {\n          throw new Error(result.message);\n        } else {\n          setState((prevState: FaucetState) => ({\n            ...prevState,\n            challenge: result.result,\n            step: 1\n          }));\n        }\n      })\n      .catch((e) => {\n        setState((prevState: FaucetState) => ({\n          ...prevState,\n          error: e.message\n        }));\n      });\n  };\n\n  const finalizeRequestFunds = (solutionInput: string) => {\n    if (state.challenge) {\n      const challengeID = state.challenge.id;\n      setState((prevState: FaucetState) => ({\n        ...prevState,\n        loading: true\n      }));\n      FaucetService.solveChallenge(challengeID, solutionInput)\n        .then((result) => {\n          if (!result.success) {\n            throw new Error(result.message);\n          } else {\n            setState((prevState: FaucetState) => ({\n              ...prevState,\n              loading: false,\n              txResult: result.result as ITxFaucetResult,\n              step: 2\n            }));\n          }\n        })\n        .catch((e) => {\n          if (e.message === 'INVALID_SOLUTION') {\n            FaucetService.regenerateChallenge(challengeID)\n              .then((result) => {\n                if (!result.success) {\n                  throw new Error(result.message);\n                } else {\n                  setState((prevState: FaucetState) => ({\n                    ...prevState,\n                    solution: '',\n                    challenge: result.result,\n                    error: e.message,\n                    loading: false\n                  }));\n                }\n              })\n              .catch((err) => {\n                setState((prevState: FaucetState) => ({\n                  ...prevState,\n                  error: err.message\n                }));\n              });\n          } else {\n            setState((prevState: FaucetState) => ({\n              ...prevState,\n              loading: false,\n              error: e.message\n            }));\n          }\n        });\n    }\n  };\n\n  return {\n    reset,\n    setSolution,\n    requestFunds,\n    finalizeRequestFunds,\n    faucetState: state\n  };\n};\n\nexport default FaucetFactory;\n","export { default as FaucetService } from './Faucet';\nexport * from './types';\n","import { AxiosInstance } from 'axios';\n\nimport { FAUCET_API } from '@config';\nimport { ApiService } from '@services/ApiService';\n\nimport {\n  FaucetChallengeResponse,\n  FaucetErrorResponse,\n  FaucetSolvedChallengeResponse\n} from './types';\n\nexport default abstract class FaucetService {\n  public static requestChallenge = async (network: string, address: string) => {\n    const { data } = await FaucetService.service\n      .get<FaucetErrorResponse | FaucetChallengeResponse>(`/challenge/${network}/${address}`)\n      .catch();\n    return data;\n  };\n\n  public static solveChallenge = async (id: string, solution: string) => {\n    const { data } = await FaucetService.service\n      .get<FaucetErrorResponse | FaucetSolvedChallengeResponse>(`/solve/${id}/${solution}`)\n      .catch();\n    return data;\n  };\n\n  public static regenerateChallenge = async (id: string) => {\n    const { data } = await FaucetService.service\n      .get<FaucetErrorResponse | FaucetChallengeResponse>(`/regenerate/${id}`)\n      .catch();\n    return data;\n  };\n\n  private static service: AxiosInstance = ApiService.generateInstance({\n    baseURL: FAUCET_API,\n    timeout: 5000\n  });\n}\n"],"sourceRoot":""}