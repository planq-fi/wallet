{"version":3,"sources":["webpack:///./src/features/PurchaseMembership/PurchaseMembershipStepper.tsx","webpack:///./src/features/PurchaseMembership/helpers.ts","webpack:///./src/features/SendAssets/index.ts","webpack:///./src/features/PurchaseMembership/components/MembershipReceiptBanner.tsx","webpack:///./src/features/PurchaseMembership/components/ConfirmMembershipPurchase.tsx","webpack:///./src/features/PurchaseMembership/components/ConfirmMembershipPurchaseMultiTx.tsx","webpack:///./src/features/PurchaseMembership/components/MembershipSelectedBanner.tsx","webpack:///./src/features/PurchaseMembership/components/MembershipPurchaseForm.tsx","webpack:///./src/features/PurchaseMembership/components/MembershipSelector.tsx","webpack:///./src/features/PurchaseMembership/components/MembershipPurchaseReceipt.tsx","webpack:///./src/features/PurchaseMembership/stateFactory.tsx"],"names":["initialMembershipFlowState","membershipSelected","defaultMembershipObject","txConfig","undefined","txReceipt","purchaseMembershipFlowState","handleUserInputFormSubmit","useStateReducer","MembershipInteractionFactory","state","prepareTx","sendTx","stopYield","initWith","useTxMulti","canYield","isSubmitting","transactions","error","account","steps","label","translateRaw","component","MembershipPurchaseForm","props","actions","formData","purchaseTx","createPurchaseTx","txType","ITxType","PURCHASE_MEMBERSHIP","approveTx","createApproveTx","APPROVAL","Promise","resolve","isERC20Asset","asset","network","createSignConfirmAndReceiptSteps","backStepTitle","amount","price","flowConfig","receiptTitle","multiTxTitle","receiptComponent","MembershipPurchaseReceipt","multiTxComponent","length","ConfirmMembershipPurchaseMultiTx","ConfirmMembershipPurchase","onRender","goToNextStep","useEffect","status","ITxStatus","PREPARING","txRaw","defaultBackPath","ROUTE_PATHS","MYC_MEMBERSHIP","path","defaultBackPathLabel","title","selectedMembership","today","Date","now","MEMBERSHIP_CONFIG","durationInDays","payload","formatApproveTx","contractAddress","baseTokenAmount","toWei","decimal","DEFAULT_ASSET_DECIMAL","spenderAddress","form","weiPrice","data","UnlockToken","purchase","encodeInput","_value","_recipient","address","_referrer","AddressZero","_data","value","makeTxFromForm","gasLimit","nonce","rawTransaction","to","baseAsset","getAssetByUUID","assets","assetUUID","from","receiverAddress","senderAccount","networkId","id","Image","styled","img","SPACING","SM","className","src","icon","getExpiryDate","key","toLocaleDateString","currentTxIdx","onComplete","map","tx","makePurchaseMembershipTxConfig","ConfirmTransaction","resetFlow","customComponent","t","broadcastingIndex","findIndex","s","BROADCASTED","stepsContent","step","idx","loading","onClick","VerticalStepper","currentStep","BannerContainer","div","BASE","COLORS","GREY_LIGHTEST","MD","MembershipWrapper","IconWrapper","Icon","CostWrapper","CostText","Typography","useAssets","find","a","uuid","as","bold","Tooltip","tooltip","fontSize","FONT_SIZE","XL","style","color","BLUE_DARK","ticker","FormFieldItem","fieldset","LG","FormFieldLabel","FormFieldSubmitButton","Button","MembershipFormUI","relevantNetworks","relevantAccounts","isDemoMode","defaultAccount","useSelector","getDefaultAccount","defaultMembership","IMembershipId","twelvemonths","defaultAsset","initialFormikValues","gasPrice","DEFAULT_NETWORK","maxFeePerGas","maxPriorityFeePerGas","MembershipFormSchema","object","shape","number","min","required","typeError","test","validateAmountField","DemoGatewayBanner","Formik","enableReinitialize","initialValues","validationSchema","onSubmit","noOp","values","errors","touched","setFieldValue","isValid","Object","filter","selectedAccount","convertedAsset","name","filteredAccounts","getAccountsWithAssetBalance","sortByLabel","JSON","stringify","Form","htmlFor","Field","field","onSelect","option","AccountSelector","accounts","async","getNonce","handleNonceEstimate","InlineMessage","$amount","$asset","AmountInput","disabled","onBlur","setFieldTouched","placeholder","type","fetchUniversalGasPriceEstimate","then","estimate","gas","$error","reason","message","connect","getIsDemoMode","connector","getStoreAccounts","networks","useNetworks","networkIds","Set","m","n","includes","options","Selector","onChange","getOptionLabel","optionComponent","selectOption","MembershipSelectorItem","paddingLeft","valueComponent","searchable","SContainer","NetworkName","XS","DiscountTypography","BLUE_BRIGHT","selectNetwork","toLowerCase","discountNotice","settings","useSettings","getAssetRate","useRates","getNetworkById","txItems","makeTxConfigFromTx","makeTxItem","txHash","baseAssetRate","fiat","getFiat","TxReceipt","MultiTxReceipt","transactionsConfigs","setState"],"mappings":"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","file":"PurchaseMembershipStepper.d9ff8f12a5e861aef273.js","sourcesContent":["import { useEffect } from 'react';\n\nimport { createSignConfirmAndReceiptSteps } from '@components';\nimport { default as GeneralStepper, IStepperPath } from '@components/GeneralStepper';\nimport { ROUTE_PATHS } from '@config';\nimport { useTxMulti } from '@hooks';\nimport { translateRaw } from '@translations';\nimport { ITxConfig, ITxReceipt, ITxStatus, ITxType } from '@types';\nimport { useStateReducer } from '@utils';\n\nimport { isERC20Asset } from '../SendAssets';\nimport ConfirmMembershipPurchase from './components/ConfirmMembershipPurchase';\nimport ConfirmMembershipPurchaseMultiTx from './components/ConfirmMembershipPurchaseMultiTx';\nimport MembershipPurchaseForm from './components/MembershipPurchaseForm';\nimport MembershipPurchaseReceipt from './components/MembershipPurchaseReceipt';\nimport { defaultMembershipObject } from './config';\nimport { createApproveTx, createPurchaseTx } from './helpers';\nimport MembershipInteractionFactory from './stateFactory';\nimport { MembershipPurchaseState, MembershipSimpleTxFormFull } from './types';\n\nconst initialMembershipFlowState = {\n  membershipSelected: defaultMembershipObject,\n  txConfig: (undefined as unknown) as ITxConfig,\n  txReceipt: (undefined as unknown) as ITxReceipt\n};\n\nconst PurchaseMembershipStepper = () => {\n  const { purchaseMembershipFlowState, handleUserInputFormSubmit } = useStateReducer(\n    MembershipInteractionFactory,\n    initialMembershipFlowState\n  );\n\n  const { state, prepareTx, sendTx, stopYield, initWith } = useTxMulti();\n  const { canYield, isSubmitting, transactions, error } = state;\n  const { account, membershipSelected }: MembershipPurchaseState = purchaseMembershipFlowState;\n\n  const steps: IStepperPath[] = [\n    {\n      label: translateRaw('PURCHASE_MEMBERSHIP'),\n      component: MembershipPurchaseForm,\n      props: {\n        account,\n        membershipSelected,\n        isSubmitting,\n        error\n      },\n      actions: (formData: MembershipSimpleTxFormFull) => {\n        initWith(\n          () => {\n            const purchaseTx = {\n              ...createPurchaseTx(formData),\n              txType: ITxType.PURCHASE_MEMBERSHIP\n            };\n            const approveTx = { ...createApproveTx(formData), txType: ITxType.APPROVAL };\n            return Promise.resolve(\n              isERC20Asset(formData.asset) ? [approveTx, purchaseTx] : [purchaseTx]\n            );\n          },\n          formData.account,\n          formData.account.network\n        );\n        handleUserInputFormSubmit(formData);\n      }\n    },\n    ...createSignConfirmAndReceiptSteps({\n      transactions,\n      backStepTitle: translateRaw('PURCHASE_MEMBERSHIP'),\n      amount: membershipSelected!.price,\n      account,\n      error,\n      flowConfig: membershipSelected!,\n      receiptTitle: translateRaw('PURCHASE_MEMBERSHIP_RECEIPT'),\n      multiTxTitle: translateRaw('CONFIRM_TRANSACTION'),\n      isSubmitting,\n      receiptComponent: MembershipPurchaseReceipt,\n      multiTxComponent:\n        transactions.length > 1 ? ConfirmMembershipPurchaseMultiTx : ConfirmMembershipPurchase,\n      sendTx,\n      prepareTx\n    })\n  ];\n\n  return (\n    <GeneralStepper\n      onRender={(goToNextStep) => {\n        // Allows to execute code when state has been updated after MTX hook has run\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n          if (!canYield) return;\n          // Make sure to prepare ETH tx before showing to user\n          if (transactions.length === 1 && transactions[0].status === ITxStatus.PREPARING) {\n            prepareTx(transactions[0].txRaw);\n          } else {\n            // Go to next step after preparing tx for MTX\n            goToNextStep();\n          }\n          stopYield();\n        }, [canYield]);\n      }}\n      steps={steps}\n      defaultBackPath={ROUTE_PATHS.MYC_MEMBERSHIP.path}\n      defaultBackPathLabel={ROUTE_PATHS.MYC_MEMBERSHIP.title} // @todo: Change this.\n    />\n  );\n};\nexport default PurchaseMembershipStepper;\n","import { AddressZero } from '@ethersproject/constants';\n\nimport { DEFAULT_ASSET_DECIMAL, donationAddressMap } from '@config';\nimport { formatApproveTx, makeTxFromForm } from '@helpers';\nimport { getAssetByUUID } from '@services';\nimport { UnlockToken } from '@services/EthService/contracts';\nimport { ITxConfig, ITxData, ITxObject, ITxToAddress, StoreAccount, TAddress } from '@types';\nimport { toWei } from '@utils';\n\nimport { isERC20Asset } from '../SendAssets';\nimport { IMembershipConfig, IMembershipId, MEMBERSHIP_CONFIG } from './config';\nimport { MembershipSimpleTxFormFull } from './types';\n\nexport const getExpiryDate = (selectedMembership: IMembershipId): Date => {\n  const today = Date.now();\n  return new Date(today + 86400000 * MEMBERSHIP_CONFIG[selectedMembership].durationInDays);\n};\n\nexport const createApproveTx = (payload: MembershipSimpleTxFormFull): Partial<ITxObject> =>\n  formatApproveTx({\n    contractAddress: payload.asset.contractAddress as ITxToAddress,\n    baseTokenAmount: toWei(\n      payload.membershipSelected.price,\n      payload.asset.decimal ?? DEFAULT_ASSET_DECIMAL\n    ),\n    spenderAddress: payload.membershipSelected.contractAddress as TAddress,\n    form: payload\n  });\n\nexport const createPurchaseTx = (payload: MembershipSimpleTxFormFull): Partial<ITxObject> => {\n  const membershipSelected = payload.membershipSelected;\n\n  const weiPrice = toWei(membershipSelected.price, payload.asset.decimal ?? DEFAULT_ASSET_DECIMAL);\n  // Referrals are disabled for now as per Unlock advice - usually we only want referrals enabled on cheaper networks since the referral logic adds to the gas cost\n  const useReferral = false;\n  const data = UnlockToken.purchase.encodeInput({\n    _value: weiPrice,\n    _recipient: payload.account.address,\n    _referrer: useReferral ? donationAddressMap.ETH : AddressZero,\n    _data: []\n  }) as ITxData;\n\n  const value = isERC20Asset(payload.asset) ? '0' : payload.amount;\n\n  const { gasLimit, nonce, ...tx } = makeTxFromForm(\n    { ...payload, address: membershipSelected.contractAddress as ITxToAddress },\n    value,\n    data\n  );\n  return tx;\n};\n\nexport const makePurchaseMembershipTxConfig = (\n  rawTransaction: ITxObject,\n  account: StoreAccount,\n  membershipSelected: IMembershipConfig\n): ITxConfig => {\n  const { to } = rawTransaction;\n  const { address, network } = account;\n  const baseAsset = getAssetByUUID(account.assets)(network.baseAsset)!;\n  const asset = getAssetByUUID(account.assets)(membershipSelected.assetUUID)!;\n\n  const txConfig: ITxConfig = {\n    from: address,\n    amount: membershipSelected.price,\n    receiverAddress: to,\n    senderAccount: account,\n    networkId: network.id,\n    asset,\n    baseAsset,\n    rawTransaction\n  };\n\n  return txConfig;\n};\n","export * from './types';\nexport * from './helpers';\n","import styled from 'styled-components';\n\nimport { SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\n\nimport { IMembershipConfig } from '../config';\nimport { getExpiryDate } from '../helpers';\n\ninterface Props {\n  membershipSelected: IMembershipConfig;\n}\n\nconst Image = styled.img`\n  height: 25px;\n  margin-right: ${SPACING.SM};\n  vertical-align: middle;\n`;\n\nconst MembershipReceiptBanner = ({ membershipSelected }: Props) => {\n  return (\n    <div className=\"TransactionReceipt-row\">\n      <div className=\"TransactionReceipt-row-column\">\n        <Image src={membershipSelected.icon} />\n        {translate('X_MEMBERSHIP')}\n      </div>\n      <div className=\"TransactionReceipt-row-column rightAligned\">\n        {translateRaw('EXPIRES_ON')}\n        {': '}\n        {getExpiryDate(membershipSelected.key).toLocaleDateString()}\n      </div>\n    </div>\n  );\n};\n\nexport default MembershipReceiptBanner;\n","import { ConfirmTransaction } from '@components';\nimport { ITxType, StoreAccount, TxParcel } from '@types';\n\nimport { IMembershipConfig } from '../config';\nimport { makePurchaseMembershipTxConfig } from '../helpers';\nimport MembershipReceiptBanner from './MembershipReceiptBanner';\n\ninterface Props {\n  flowConfig: IMembershipConfig;\n  currentTxIdx: number;\n  transactions: TxParcel[];\n  account: StoreAccount;\n  onComplete(): void;\n  error?: string;\n}\n\nexport default function ConfirmMembershipPurchase(props: Props) {\n  const { flowConfig, transactions, currentTxIdx, account, onComplete, error } = props;\n\n  const txConfigs = transactions.map((tx) =>\n    makePurchaseMembershipTxConfig(tx.txRaw, account, flowConfig)\n  );\n\n  const txConfig = txConfigs[currentTxIdx];\n\n  return (\n    <ConfirmTransaction\n      onComplete={onComplete}\n      resetFlow={onComplete}\n      txConfig={txConfig}\n      error={error}\n      customComponent={() => <MembershipReceiptBanner membershipSelected={flowConfig} />}\n      txType={ITxType.PURCHASE_MEMBERSHIP}\n    />\n  );\n}\n","import path from 'ramda/src/path';\n\nimport { VerticalStepper } from '@components';\nimport { ITxMultiConfirmProps, ITxStatus } from '@types';\n\nimport { IMembershipConfig, stepsContent } from '../config';\nimport MembershipSelectedBanner from './MembershipSelectedBanner';\n\nexport default function ConfirmMembershipPurchase({\n  flowConfig,\n  currentTxIdx,\n  transactions,\n  onComplete,\n  error\n}: ITxMultiConfirmProps) {\n  const status = transactions.map((t) => path(['status'], t));\n\n  const broadcastingIndex = status.findIndex((s) => s === ITxStatus.BROADCASTED);\n\n  const steps = stepsContent.map((step, idx) => ({\n    ...step,\n    loading: status[idx] === ITxStatus.BROADCASTED,\n    onClick: onComplete\n  }));\n\n  return (\n    <div>\n      <MembershipSelectedBanner membershipSelected={flowConfig as IMembershipConfig} />\n      <VerticalStepper\n        currentStep={broadcastingIndex === -1 ? currentTxIdx : broadcastingIndex}\n        steps={steps}\n        error={error !== undefined}\n      />\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nimport { Tooltip, Typography } from '@components';\nimport { useAssets } from '@services';\nimport { COLORS, FONT_SIZE, SPACING } from '@theme';\nimport { translateRaw } from '@translations';\nimport { Asset } from '@types';\n\nimport { IMembershipConfig } from '../config';\n\ninterface Props {\n  membershipSelected: IMembershipConfig;\n}\n\nconst BannerContainer = styled.div`\n  display: flex;\n  flex: 1;\n  padding: ${SPACING.BASE};\n  flex-direction: row;\n  background-color: ${COLORS.GREY_LIGHTEST};\n  margin-bottom: ${SPACING.MD};\n  justify-content: space-between;\n`;\n\nconst MembershipWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst IconWrapper = styled.div`\n  margin-right: ${SPACING.SM};\n`;\n\nconst Icon = styled.img`\n  width: 45px;\n  height: 48px;\n`;\n\nconst CostWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst CostText = styled(Typography)`\n  margin-right: ${SPACING.BASE};\n`;\n\nconst MembershipSelectedBanner = ({ membershipSelected }: Props) => {\n  const { assets } = useAssets();\n  const asset = assets.find((a) => a.uuid === membershipSelected.assetUUID) as Asset;\n  return (\n    <BannerContainer>\n      <MembershipWrapper>\n        <IconWrapper>\n          <Icon src={membershipSelected.icon} />\n        </IconWrapper>\n        <div>\n          <Typography as=\"div\" bold={true}>\n            {translateRaw('MEMBERSHIP_DETAILS')}\n          </Typography>\n          <Typography as=\"div\">{membershipSelected.title}</Typography>\n        </div>\n      </MembershipWrapper>\n      <CostWrapper>\n        <CostText as=\"div\">\n          {translateRaw('COST')} <Tooltip tooltip={translateRaw('MEMBERSHIP_COST_TOOLTIP')} />\n        </CostText>\n        <Typography\n          as=\"div\"\n          bold={true}\n          fontSize={FONT_SIZE.XL}\n          style={{ color: COLORS.BLUE_DARK }}\n        >\n          {membershipSelected.price} {asset.ticker}\n        </Typography>\n      </CostWrapper>\n    </BannerContainer>\n  );\n};\n\nexport default MembershipSelectedBanner;\n","import { useEffect } from 'react';\n\nimport { Field, FieldProps, Form, Formik } from 'formik';\nimport isEmpty from 'lodash/isEmpty';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\nimport { Overwrite } from 'utility-types';\nimport { number, object } from 'yup';\n\nimport {\n  AccountSelector,\n  AmountInput,\n  Button,\n  DemoGatewayBanner,\n  InlineMessage\n} from '@components';\nimport { DEFAULT_NETWORK } from '@config';\nimport { validateAmountField } from '@features/SendAssets/components/validators/validators';\nimport { getAccountsWithAssetBalance } from '@features/SwapAssets/helpers';\nimport { fetchUniversalGasPriceEstimate } from '@services/ApiService';\nimport { getNonce } from '@services/EthService';\nimport { useAssets, useNetworks } from '@services/Store';\nimport { AppState, getDefaultAccount, getIsDemoMode, getStoreAccounts, useSelector } from '@store';\nimport { SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport { Asset, IAccount, Network, StoreAccount, TUuid } from '@types';\nimport { noOp, sortByLabel } from '@utils';\n\nimport { IMembershipConfig, IMembershipId, MEMBERSHIP_CONFIG } from '../config';\nimport { MembershipPurchaseState, MembershipSimpleTxFormFull } from '../types';\nimport MembershipSelector from './MembershipSelector';\n\ninterface MembershipProps extends MembershipPurchaseState {\n  isSubmitting: boolean;\n  error?: Error;\n  onComplete(fields: any): void;\n  handleUserInputFormSubmit(fields: any): void;\n}\n\ninterface UIProps {\n  relevantNetworks: Network[];\n  relevantAccounts: StoreAccount[];\n  isSubmitting: boolean;\n  error?: CustomError;\n  isDemoMode: boolean;\n  onComplete(fields: any): void;\n}\n\nconst FormFieldItem = styled.fieldset`\n  margin-bottom: ${SPACING.LG};\n`;\n\nconst FormFieldLabel = styled.label`\n  display: flex;\n  font-size: 1rem;\n  margin-bottom: ${SPACING.SM};\n  font-weight: 400;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst FormFieldSubmitButton = styled(Button)`\n  width: 100%;\n  display: inline-block;\n  &:disabled {\n    background-color: rgba(0, 122, 153, 0.3);\n  }\n`;\n\nconst MembershipForm = ({ isSubmitting, error, isDemoMode, onComplete }: Props) => {\n  const accounts = useSelector(getStoreAccounts);\n  const { networks } = useNetworks();\n  const networkIds = [...new Set(Object.values(MEMBERSHIP_CONFIG).map((m) => m.networkId))];\n  const relevantNetworks = networks.filter((n) => networkIds.includes(n.id)) as Network[];\n  const relevantAccounts = accounts.filter((account) => networkIds.includes(account.networkId));\n\n  return (\n    <MembershipFormUI\n      isSubmitting={isSubmitting}\n      error={error}\n      relevantNetworks={relevantNetworks}\n      relevantAccounts={relevantAccounts}\n      isDemoMode={isDemoMode}\n      onComplete={onComplete}\n    />\n  );\n};\n\nexport const MembershipFormUI = ({\n  isSubmitting,\n  error,\n  relevantNetworks,\n  relevantAccounts,\n  isDemoMode,\n  onComplete\n}: UIProps) => {\n  const { getAssetByUUID } = useAssets();\n  const defaultAccount = useSelector(getDefaultAccount());\n  const defaultMembership = MEMBERSHIP_CONFIG[IMembershipId.twelvemonths];\n  const defaultAsset = (getAssetByUUID(defaultMembership.assetUUID as TUuid) ?? {}) as Asset;\n  const initialFormikValues: Overwrite<MembershipSimpleTxFormFull, { account?: StoreAccount }> = {\n    membershipSelected: defaultMembership,\n    account: defaultAccount,\n    amount: defaultMembership.price,\n    asset: defaultAsset,\n    nonce: '0',\n    gasPrice: '20',\n    address: '',\n    gasLimit: '',\n    network: relevantNetworks.find(({ id }) => id === DEFAULT_NETWORK)!,\n    maxFeePerGas: '20',\n    maxPriorityFeePerGas: '1'\n  };\n\n  const MembershipFormSchema = object().shape({\n    amount: number()\n      .min(0, translateRaw('ERROR_0'))\n      .required(translateRaw('REQUIRED'))\n      .typeError(translateRaw('ERROR_0'))\n      .test(validateAmountField())\n  });\n\n  return (\n    <div>\n      {isDemoMode && <DemoGatewayBanner />}\n      <Formik\n        enableReinitialize={true}\n        initialValues={initialFormikValues}\n        validationSchema={MembershipFormSchema}\n        onSubmit={noOp}\n      >\n        {({ values, errors, touched, setFieldValue }) => {\n          const handleNonceEstimate = async (account: IAccount) => {\n            const nonce: number = await getNonce(values.network, account.address);\n            setFieldValue('nonce', nonce);\n          };\n          const isValid =\n            Object.values(errors).filter((error) => error !== undefined && !isEmpty(error))\n              .length === 0;\n\n          const { amount, asset, account: selectedAccount } = values;\n          const convertedAsset = {\n            name: asset.name,\n            ticker: asset.ticker,\n            uuid: asset.uuid\n          };\n          const filteredAccounts = getAccountsWithAssetBalance(\n            relevantAccounts,\n            convertedAsset,\n            amount\n          );\n\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useEffect(() => {\n            const defaultAccount = sortByLabel(filteredAccounts)[0];\n            if (\n              defaultAccount &&\n              ((values.account && values.account.uuid !== defaultAccount.uuid) || !values.account)\n            ) {\n              setFieldValue('account', defaultAccount);\n            }\n          }, [JSON.stringify(filteredAccounts)]);\n\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useEffect(() => {\n            if (\n              amount &&\n              asset &&\n              selectedAccount &&\n              !getAccountsWithAssetBalance(filteredAccounts, convertedAsset, amount).find(\n                (a) => a.uuid === selectedAccount.uuid\n              )\n            ) {\n              setFieldValue('account', undefined);\n            }\n          }, [amount, asset]);\n          return (\n            <Form>\n              <FormFieldItem>\n                <FormFieldLabel htmlFor=\"membershipSelected\">\n                  {translate('SELECT_MEMBERSHIP')}\n                </FormFieldLabel>\n                <Field\n                  name=\"membershipSelected\"\n                  value={values.membershipSelected}\n                  component={({ field, form }: FieldProps) => (\n                    <MembershipSelector\n                      name={field.name}\n                      value={field.value}\n                      onSelect={(option: IMembershipConfig) => {\n                        const asset = getAssetByUUID(option.assetUUID as TUuid);\n                        const network =\n                          asset && relevantNetworks.find(({ id }) => asset.networkId === id);\n                        // if this gets deleted, it no longer shows as selected on interface,\n                        // would like to set only object keys that are needed instead of full object\n                        form.setFieldValue('membershipSelected', option);\n                        form.setFieldValue('amount', option.price);\n                        form.setFieldValue('asset', asset);\n                        network && form.setFieldValue('network', network);\n                      }}\n                    />\n                  )}\n                />\n              </FormFieldItem>\n              <FormFieldItem>\n                <FormFieldLabel htmlFor=\"account\">\n                  {translate('SELECT_YOUR_ACCOUNT')}\n                </FormFieldLabel>\n                <Field\n                  name=\"account\"\n                  value={values.account}\n                  component={({ field, form }: FieldProps) => (\n                    <AccountSelector\n                      name={field.name}\n                      value={field.value}\n                      accounts={filteredAccounts}\n                      asset={values.asset}\n                      onSelect={(option: IAccount) => {\n                        form.setFieldValue('account', option); //if this gets deleted, it no longer shows as selected on interface, would like to set only object keys that are needed instead of full object\n                        handleNonceEstimate(option);\n                      }}\n                    />\n                  )}\n                />\n                {filteredAccounts.length === 0 && (\n                  <InlineMessage>\n                    {translateRaw('NO_RELEVANT_ACCOUNTS_DETAILED', {\n                      $amount: values.amount,\n                      $asset: values.asset.ticker\n                    })}\n                  </InlineMessage>\n                )}\n              </FormFieldItem>\n              <FormFieldItem>\n                <FormFieldLabel htmlFor=\"amount\">\n                  <div>{translate('SEND_ASSETS_AMOUNT_LABEL')}</div>\n                </FormFieldLabel>\n                <Field name=\"amount\">\n                  {({ field, form }: FieldProps) => (\n                    <>\n                      <AmountInput\n                        {...field}\n                        disabled={true}\n                        asset={values.asset}\n                        value={field.value}\n                        onBlur={() => {\n                          form.setFieldTouched('amount');\n                        }}\n                        placeholder={'0.00'}\n                      />\n                      {errors && errors.amount && touched && touched.amount ? (\n                        <InlineMessage className=\"SendAssetsForm-errors\">\n                          {errors.amount}\n                        </InlineMessage>\n                      ) : null}\n                    </>\n                  )}\n                </Field>\n              </FormFieldItem>\n              <FormFieldSubmitButton\n                type=\"submit\"\n                disabled={isDemoMode || !isValid || !selectedAccount}\n                loading={isSubmitting}\n                onClick={() => {\n                  if (isValid) {\n                    fetchUniversalGasPriceEstimate(values.network).then(({ estimate: gas }) => {\n                      onComplete({ ...values, ...gas });\n                    });\n                  }\n                }}\n              >\n                {translateRaw('BUY_MEMBERSHIP')}\n              </FormFieldSubmitButton>\n              {error && (\n                <InlineMessage\n                  value={translate('GAS_LIMIT_ESTIMATION_ERROR_MESSAGE', {\n                    $error: error.reason ? error.reason : error.message\n                  })}\n                />\n              )}\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  isDemoMode: getIsDemoMode(state)\n});\n\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector> & MembershipProps;\n\nexport default connector(MembershipForm);\n","import { useSelector } from 'react-redux';\nimport { OptionProps } from 'react-select';\nimport styled from 'styled-components';\n\nimport { Selector, Typography } from '@components';\nimport { selectNetwork } from '@store';\nimport { COLORS, FONT_SIZE, SPACING } from '@theme';\nimport { translateRaw } from '@translations';\n\nimport { IMembershipConfig, MEMBERSHIP_CONFIG } from '../config';\n\ninterface StyleProps {\n  paddingLeft?: string;\n}\n\ninterface MembershipItemProps {\n  option: IMembershipConfig;\n  onClick?(option: IMembershipConfig): void;\n}\n\nconst SContainer = styled('div')<StyleProps>`\n  display: flex;\n  flex-direction: row;\n  padding: 11px 12px 11px 0px;\n  ${({ paddingLeft }) => paddingLeft && `padding-left: ${paddingLeft};`}\n`;\n\nconst NetworkName = styled(Typography)`\n  margin-left: ${SPACING.XS};\n  font-weight: 300;\n`;\n\nconst DiscountTypography = styled(Typography)`\n  color: ${COLORS.BLUE_BRIGHT};\n  font-size: ${FONT_SIZE.XS};\n  margin-left: ${SPACING.XS};\n`;\n\nexport const MembershipSelectorItem = ({\n  option,\n  paddingLeft,\n  onClick\n}: MembershipItemProps & StyleProps) => {\n  const network = useSelector(selectNetwork(option.networkId));\n  return (\n    <SContainer paddingLeft={paddingLeft} onClick={() => onClick && onClick(option)}>\n      <Typography value={option.title} />\n      <NetworkName value={` (${network.name.toLowerCase()})`} />\n      <DiscountTypography value={option.discountNotice} />\n    </SContainer>\n  );\n};\n\nexport interface MembershipSelectorProps {\n  name: string;\n  value: IMembershipConfig | null;\n  onSelect(option: IMembershipConfig): void;\n}\n\nexport default function MembershipSelector({ name, value, onSelect }: MembershipSelectorProps) {\n  const options: IMembershipConfig[] = Object.values(MEMBERSHIP_CONFIG).filter(\n    ({ disabled }) => !disabled\n  );\n\n  return (\n    <Selector<IMembershipConfig>\n      name={name}\n      placeholder={translateRaw('MEMBERSHIP_DROPDOWN_PLACEHOLDER')}\n      options={options}\n      onChange={(option) => onSelect(option)}\n      getOptionLabel={(option) => option.title}\n      optionComponent={({ data, selectOption }: OptionProps<IMembershipConfig, false>) => (\n        <MembershipSelectorItem option={data} onClick={selectOption} paddingLeft={SPACING.SM} />\n      )}\n      valueComponent={({ value: option }) => <MembershipSelectorItem option={option} />}\n      value={value}\n      searchable={false}\n    />\n  );\n}\n","import { MultiTxReceipt, TxReceipt } from '@components/TransactionFlow';\nimport { getFiat } from '@config/fiats';\nimport { makeTxConfigFromTx, makeTxItem } from '@helpers';\nimport { useAssets, useNetworks, useRates, useSettings } from '@services';\nimport { ITxType, StoreAccount, TxParcel } from '@types';\n\nimport { IMembershipConfig, stepsContent } from '../config';\nimport { makePurchaseMembershipTxConfig } from '../helpers';\nimport MembershipReceiptBanner from './MembershipReceiptBanner';\n\nexport interface IMembershipPurchaseReceiptProps {\n  account: StoreAccount;\n  transactions: TxParcel[];\n  flowConfig: IMembershipConfig;\n  onComplete(): void;\n}\n\nexport default function MembershipReceipt({\n  account,\n  transactions,\n  flowConfig,\n  onComplete,\n  ...props\n}: IMembershipPurchaseReceiptProps) {\n  const { getAssetByUUID, assets } = useAssets();\n  const { settings } = useSettings();\n  const { getAssetRate } = useRates();\n  const { getNetworkById } = useNetworks();\n\n  const txItems = transactions.map((tx) => {\n    const txConfig =\n      tx.txType === ITxType.PURCHASE_MEMBERSHIP\n        ? makePurchaseMembershipTxConfig(tx.txRaw, account, flowConfig)\n        : makeTxConfigFromTx(tx.txRaw, assets, account.network, [account]);\n    return makeTxItem(tx.txType!, txConfig, tx.txHash!, tx.txReceipt);\n  });\n\n  const network = getNetworkById(txItems[0].txConfig.networkId);\n\n  const baseAsset = getAssetByUUID(network.baseAsset)!;\n\n  const baseAssetRate = getAssetRate(baseAsset);\n\n  const fiat = getFiat(settings);\n\n  const customComponent = () => <MembershipReceiptBanner membershipSelected={flowConfig} />;\n\n  return txItems.length === 1 ? (\n    <TxReceipt\n      txReceipt={txItems.map(({ txReceipt }) => txReceipt)[0]}\n      txConfig={txItems.map(({ txConfig }) => txConfig)[0]}\n      customComponent={customComponent}\n      resetFlow={onComplete}\n      onComplete={onComplete}\n      {...props}\n    />\n  ) : (\n    <MultiTxReceipt\n      txType={ITxType.PURCHASE_MEMBERSHIP}\n      transactions={transactions}\n      transactionsConfigs={txItems.map(({ txConfig }) => txConfig)}\n      steps={stepsContent}\n      account={account}\n      network={account.network}\n      resetFlow={onComplete}\n      onComplete={onComplete}\n      fiat={fiat}\n      baseAssetRate={baseAssetRate}\n      customComponent={customComponent}\n    />\n  );\n}\n","import { TStepAction } from '@types';\nimport { TUseStateReducerFactory } from '@utils';\n\nimport { MembershipPurchaseState, MembershipSimpleTxFormFull } from './types';\n\nconst MembershipPurchaseFactory: TUseStateReducerFactory<MembershipPurchaseState> = ({\n  state,\n  setState\n}) => {\n  const handleUserInputFormSubmit: TStepAction = (payload: MembershipSimpleTxFormFull) => {\n    const { membershipSelected, account } = payload;\n\n    setState({\n      ...state,\n      account,\n      membershipSelected\n    });\n  };\n\n  return {\n    handleUserInputFormSubmit,\n    purchaseMembershipFlowState: state\n  };\n};\n\nexport default MembershipPurchaseFactory;\n"],"sourceRoot":""}