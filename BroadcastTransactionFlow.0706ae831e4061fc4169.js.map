{"version":3,"sources":["webpack:///./src/features/BroadcastTransaction/BroadcastTransactionFlow.tsx","webpack:///./src/features/BroadcastTransaction/components/index.ts","webpack:///./src/features/BroadcastTransaction/components/BroadcastTx.tsx","webpack:///./src/features/BroadcastTransaction/stateFactory.tsx"],"names":["handleNetworkChanged","handleSendClicked","handleConfirmClick","handleResetFlow","broadcastTxState","useStateReducer","BroadcastTxConfigFactory","broadcastTxInitialState","steps","label","translateRaw","component","BroadcastTx","props","signedTx","network","networkId","actions","cb","ConfirmTransaction","txConfig","error","_","TxReceipt","txReceipt","GeneralStepper","defaultBackPath","ROUTE_PATHS","DASHBOARD","path","defaultBackPathLabel","completeBtnText","ContentWrapper","styled","div","Description","p","theme","text","InputWrapper","SendButton","Button","CodeBlockWrapper","StyledLabel","Label","NetworkSelectWrapper","makeTxFromSignedTx","signedTransaction","bufferTransaction","toBuffer","parse","err","console","debug","onComplete","userInput","setUserInput","useState","inputError","setInputError","transaction","setTransaction","networks","useSelector","selectNetworks","useEffect","verifyTransaction","validNetwork","chainId","getNetworkByChainId","isValid","undefined","length","Box","pb","width","InputField","value","textarea","height","placeholder","onChange","currentTarget","trimmedValue","trim","marginBottom","InlineMessage","$chain_id","toString","Fragment","NetworkSelector","Tooltip","tooltip","CodeBlock","tx","JSON","stringify","disabled","onClick","DEFAULT_NETWORK","state","setState","getNetworkById","useNetworks","assets","useAssets","accounts","getStoreAccounts","prevState","makeTxConfigFromSignedTx","async","Error","provider","ProviderHandler","response","sendRawTx","pendingTxReceipt","makePendingTxReceipt","hash","ITxType","STANDARD","reason","message"],"mappings":"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","file":"BroadcastTransactionFlow.0706ae831e4061fc4169.js","sourcesContent":["import { ConfirmTransaction, GeneralStepper, TxReceipt } from '@components';\nimport { IStepperPath } from '@components/GeneralStepper/types';\nimport { ROUTE_PATHS } from '@config';\nimport { translateRaw } from '@translations';\nimport { ISignedTx } from '@types';\nimport { useStateReducer } from '@utils';\n\nimport { BroadcastTx } from './components';\nimport { BroadcastTxConfigFactory, broadcastTxInitialState } from './stateFactory';\n\nconst BroadcastTransactionFlow = () => {\n  const {\n    handleNetworkChanged,\n    handleSendClicked,\n    handleConfirmClick,\n    handleResetFlow,\n    broadcastTxState\n  } = useStateReducer(BroadcastTxConfigFactory, broadcastTxInitialState);\n\n  const steps: IStepperPath[] = [\n    {\n      label: translateRaw('BROADCAST_TX_TITLE'),\n      component: BroadcastTx,\n      props: (({ signedTx, network: networkId }) => ({\n        signedTx,\n        networkId,\n        handleNetworkChanged\n      }))(broadcastTxState),\n      actions: (signedTx: ISignedTx, cb: any) => handleSendClicked(signedTx, cb)\n    },\n    {\n      label: translateRaw('CONFIRM_TX_MODAL_TITLE'),\n      component: ConfirmTransaction,\n      props: (({ txConfig, error }) => ({ txConfig, error }))(broadcastTxState),\n      actions: (_: any, cb: any) => handleConfirmClick(cb)\n    },\n    {\n      label: translateRaw('BROADCAST_TX_RECEIPT_TITLE'),\n      component: TxReceipt,\n      props: (({ txConfig, txReceipt }) => ({ txConfig, txReceipt }))(broadcastTxState),\n      actions: (cb: any) => handleResetFlow(cb)\n    }\n  ];\n\n  return (\n    <GeneralStepper\n      steps={steps}\n      defaultBackPath={ROUTE_PATHS.DASHBOARD.path}\n      defaultBackPathLabel={translateRaw('DASHBOARD')}\n      completeBtnText={translateRaw('BROADCAST_TX_BROADCAST_ANOTHER')}\n    />\n  );\n};\n\nexport default BroadcastTransactionFlow;\n","export { BroadcastTx } from './BroadcastTx';\n","import { FormEvent, Fragment, useEffect, useState } from 'react';\n\nimport { parse as parseTransaction, Transaction } from '@ethersproject/transactions';\nimport { toBuffer } from 'ethereumjs-util';\nimport styled from 'styled-components';\n\nimport {\n  Box,\n  Button,\n  CodeBlock,\n  InlineMessage,\n  InputField,\n  Label,\n  NetworkSelector,\n  Tooltip\n} from '@components';\nimport { verifyTransaction } from '@helpers';\nimport { getNetworkByChainId } from '@services/Store/Network';\nimport { useSelector } from '@store';\nimport { selectNetworks } from '@store/network.slice';\nimport translate, { translateRaw } from '@translations';\nimport { ISignedTx, NetworkId } from '@types';\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  label {\n    align-self: flex-start;\n  }\n`;\n\nconst Description = styled.p`\n  font-size: 18px;\n  line-height: 1.5;\n  font-weight: normal;\n  text-align: center;\n  color: ${(props) => props.theme.text};\n  white-space: pre-line;\n\n  strong {\n    font-weight: 900;\n  }\n\n  @media (max-width: 700px) {\n    padding: 0 8px;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  margin-top: 30px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst SendButton = styled(Button)`\n  width: 100%;\n`;\n\nconst CodeBlockWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  overflow-x: auto;\n`;\n\nconst StyledLabel = styled(Label)`\n  align-self: flex-start;\n  margin-top: 8px;\n`;\n\nconst NetworkSelectWrapper = styled.div`\n  width: 100%;\n`;\n\nconst getStringifiedTx = (tx: Transaction) => JSON.stringify(tx, null, 2);\n\nconst makeTxFromSignedTx = (signedTransaction: string) => {\n  try {\n    const bufferTransaction = toBuffer(signedTransaction);\n    const decoded: Transaction = parseTransaction(bufferTransaction);\n    return decoded;\n  } catch (err) {\n    console.debug(`[BroadcastTx] ${err}`);\n    return undefined;\n  }\n};\n\ninterface Props {\n  networkId: NetworkId;\n  signedTx: ISignedTx;\n  transaction: Transaction | undefined;\n  onComplete(signedTx: string): void;\n  handleNetworkChanged(network: NetworkId): void;\n}\n\nexport const BroadcastTx = ({ signedTx, networkId, onComplete, handleNetworkChanged }: Props) => {\n  const [userInput, setUserInput] = useState(signedTx);\n  const [inputError, setInputError] = useState('');\n  const [transaction, setTransaction] = useState<Transaction | undefined>(\n    makeTxFromSignedTx(signedTx)\n  );\n  const networks = useSelector(selectNetworks);\n\n  useEffect(() => {\n    if (transaction && verifyTransaction(transaction)) {\n      setInputError('');\n    } else {\n      setInputError(translateRaw('BROADCAST_TX_INPUT_ERROR'));\n    }\n  }, [transaction]);\n\n  const handleChange = ({ currentTarget }: FormEvent<HTMLInputElement>) => {\n    const { value } = currentTarget;\n    const trimmedValue = value.trim();\n    setUserInput(value);\n    setInputError('');\n    setTransaction(makeTxFromSignedTx(trimmedValue));\n  };\n\n  const validNetwork =\n    transaction && transaction.chainId ? getNetworkByChainId(transaction?.chainId, networks) : true;\n  const isValid = transaction !== undefined && inputError.length === 0 && validNetwork;\n\n  return (\n    <ContentWrapper>\n      <Description>{translate('BROADCAST_TX_DESCRIPTION')}</Description>\n      <Box pb=\"15px\" width=\"100%\">\n        <InputWrapper>\n          <InputField\n            label={translateRaw('SEND_SIGNED')}\n            value={userInput}\n            textarea={true}\n            height={'250px'}\n            placeholder=\"0xf86b0284ee6b2800825208944bbeeb066ed09b7aed07bf39eee0460dfa26152088016345785d8a00008029a03ba7a0cc6d1756cd771f2119cf688b6d4dc9d37096089f0331fe0de0d1cc1254a02f7bcd19854c8d46f8de09e457aec25b127ab4328e1c0d24bfbff8702ee1f474\"\n            onChange={handleChange}\n            inputError={userInput.length > 0 ? inputError : ''}\n            marginBottom=\"0\"\n          />\n        </InputWrapper>\n        {!validNetwork && transaction && (\n          <InlineMessage>\n            {translate('BROADCAST_TX_INVALID_CHAIN_ID', {\n              $chain_id: transaction.chainId.toString()\n            })}\n          </InlineMessage>\n        )}\n      </Box>\n      {isValid && (\n        <Fragment>\n          {!transaction!.chainId && (\n            <NetworkSelectWrapper>\n              <NetworkSelector network={networkId} onChange={handleNetworkChanged} />\n            </NetworkSelectWrapper>\n          )}\n          <StyledLabel>\n            {translate('SEND_RAW')}\n            <Tooltip tooltip={translateRaw('BROADCAST_TX_RAW_TOOLTIP')} />\n          </StyledLabel>\n          <CodeBlockWrapper>\n            <CodeBlock>{getStringifiedTx(transaction!)}</CodeBlock>\n          </CodeBlockWrapper>\n        </Fragment>\n      )}\n      <SendButton disabled={!isValid} onClick={() => onComplete(userInput.trim())}>\n        {translateRaw('SEND_TRANS')}\n      </SendButton>\n    </ContentWrapper>\n  );\n};\n","import { DEFAULT_NETWORK } from '@config';\nimport { makePendingTxReceipt, makeTxConfigFromSignedTx } from '@helpers';\nimport { ProviderHandler } from '@services/EthService';\nimport { useAssets, useNetworks } from '@services/Store';\nimport { getStoreAccounts, useSelector } from '@store';\nimport { ISignedTx, ITxConfig, ITxHash, ITxReceipt, ITxType, NetworkId } from '@types';\nimport { TUseStateReducerFactory } from '@utils';\n\nconst broadcastTxInitialState: State = {\n  network: DEFAULT_NETWORK,\n  txReceipt: undefined,\n  txConfig: undefined,\n  signedTx: '',\n  error: undefined\n};\n\ninterface State {\n  network: NetworkId;\n  txConfig: ITxConfig | undefined;\n  txReceipt: ITxReceipt | undefined;\n  signedTx: ISignedTx;\n  error: string | undefined;\n}\n\nconst BroadcastTxConfigFactory: TUseStateReducerFactory<State> = ({ state, setState }) => {\n  const { networks, getNetworkById } = useNetworks();\n  const { assets } = useAssets();\n  const accounts = useSelector(getStoreAccounts);\n\n  const handleNetworkChanged = (network: NetworkId) => {\n    setState((prevState: State) => ({\n      ...prevState,\n      network\n    }));\n  };\n\n  const handleSendClicked = (signedTx: ISignedTx, cb: any) => {\n    const { network } = state;\n    const txConfig = makeTxConfigFromSignedTx(signedTx, assets, networks, accounts, network);\n\n    setState((prevState: State) => ({\n      ...prevState,\n      txConfig,\n      signedTx\n    }));\n\n    cb();\n  };\n\n  const handleConfirmClick = async (cb: any) => {\n    try {\n      const { txConfig, signedTx } = state;\n      if (!txConfig) {\n        throw new Error();\n      }\n      const provider = new ProviderHandler(getNetworkById(txConfig.networkId));\n      const response = await provider.sendRawTx(signedTx);\n      const pendingTxReceipt = makePendingTxReceipt(response.hash as ITxHash)(\n        ITxType.STANDARD,\n        txConfig\n      );\n      setState((prevState: State) => ({\n        ...prevState,\n        txReceipt: pendingTxReceipt\n      }));\n      cb();\n    } catch (err) {\n      console.debug(`[BroadcastTx] ${err}`);\n      setState((prevState: State) => ({\n        ...prevState,\n        error: err.reason ? err.reason : err.message\n      }));\n    }\n  };\n\n  const handleResetFlow = (cb: any) => {\n    setState(broadcastTxInitialState);\n    cb();\n  };\n\n  return {\n    handleNetworkChanged,\n    handleSendClicked,\n    handleConfirmClick,\n    handleResetFlow,\n    broadcastTxState: state\n  };\n};\n\nexport { broadcastTxInitialState, BroadcastTxConfigFactory };\n"],"sourceRoot":""}