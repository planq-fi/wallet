{"version":3,"sources":["webpack:///./src/features/Settings/Settings.tsx","webpack:///./src/components/MobileNavBar.tsx","webpack:///./src/features/Settings/components/FlippablePanel.tsx","webpack:///./src/features/Settings/components/AddOrEditNetworkNode.tsx","webpack:///./src/features/Settings/components/AddressBook.tsx","webpack:///./src/features/Settings/components/AddToAddressBook.tsx","webpack:///./src/features/Settings/components/DangerZone.tsx","webpack:///./src/features/Settings/components/ExcludedAssets.tsx","webpack:///./src/features/Settings/components/GeneralSettings.tsx","webpack:///./src/features/Settings/components/NetworkNodes.tsx","webpack:///./src/components/NetworkNodeDropdown.tsx","webpack:///./src/assets/images/icn-add.svg","webpack:///./src/assets/images/icn-edit.svg"],"names":["tab","setTab","useState","currentTab","RenderAccountPanel","RenderAddressPanel","RenderGeneralSettingsPanel","RenderNetworkNodes","StyledLayout","Mobile","className","onClick","Desktop","SettingsHeading","as","Icon","style","marginRight","marginTop","type","width","color","COLORS","BLUE_BRIGHT","alt","RendedExcludedAssetsPanel","Heading","styled","div","BREAK_POINTS","SCREEN_SM","accounts","useSelector","getStoreAccounts","settings","useSettings","getAssetRate","getAssetChange","useRates","currentAccounts","selectCurrentAccounts","balances","buildBalances","isExcludedAsset","totalFiatValue","buildTotalFiatValue","fiat","getFiat","selected","dashboardAccounts","isFeatureActive","useFeatureFlags","AccountList","deletable","copyable","privacyCheckboxEnabled","createContact","contacts","contactRestore","deleteContact","updateContact","restoreDeletedContact","useContacts","flipped","toggleFlipped","networks","allNetworks","getNetworkById","useNetworks","networkId","setNetworkId","DEFAULT_NETWORK","editNode","setEditNode","undefined","isAddingNetwork","setAddingNetwork","contactNetworks","NetworkUtils","getDistinctNetworks","filter","n","isCustom","some","a","id","onComplete","isAddingCustomNetwork","node","toggleNetworkCreation","MobileNavBarStyled","SPACING","BASE","BLUE_DARK_SLATE","GREY_GEYSER","WHITE","FONT_SIZE","SM","MD","children","FlippablePanel","Component","this","setState","prevState","render","props","state","addNetwork","addNodeToNetwork","isNodeNameAvailable","updateNode","deleteNodeOrNetwork","createAsset","useAssets","isConnectionError","setIsConnectionError","editMode","canDeleteNode","initialState","useCallback","name","service","url","auth","username","password","onDeleteNodeClick","e","preventDefault","Schema","lazy","values","object","shape","string","required","translateRaw","test","boolean","nullable","AddToNetworkNodePanel","heading","BackButton","basic","src","backArrowIcon","padChildren","SubtitleRow","Column","t","tSplit","split","length","LinkApp","href","GITHUB_RELEASE_NOTES_URL","isExternal","LETS_ENCRYPT_URL","Formik","validationSchema","initialValues","onSubmit","async","setSubmitting","formSelectedNetworkId","networkName","chainId","baseUnit","selectedNetworkId","Object","assign","makeNodeName","NodeType","MYC_CUSTOM","network","parseInt","baseAsset","generateAssetUUID","nodes","dPaths","WalletId","TREZOR","DEFAULT_ETH","LEDGER_NANO_S","default","gasPriceSettings","min","max","initial","shouldEstimateGasPrice","selectedNode","blockExplorer","makeExplorer","origin","ETHPLORER_URL","provider","ProviderHandler","getLatestBlockNumber","uuid","ticker","console","error","isSubmitting","errors","Form","Row","AddressFieldset","htmlFor","Field","field","InputField","inputError","placeholder","form","SNetworkSelector","value","onChange","setFieldValue","disabled","alignSelf","SCheckbox","checked","label","hidden","ReferralLink","Trans","variables","$link","EXT_URLS","QUICKNODE_REFERRAL","NetworkNodeFieldsButtons","Button","Tooltip","tooltip","DeleteButton","data-testid","SError","DashboardPanel","UIButton","SCREEN_XS","LG","XS","fieldset","NetworkSelector","Checkbox","PASTEL_RED","ERROR_RED","isMobile","useScreenSize","sortingState","setSortingState","initialSortingState","deletingIndex","setDeletingIndex","undoDeletingIndexes","setUndoDeletingIndexes","overlayRows","overlayRowsFlat","map","row","displayAddressBook","accountsTemp","sort","b","forEach","index","splice","localeCompare","getDisplayAddressBook","sortKey","address","getSortingFunction","activeSort","getColumnSortDirection","sortState","indexOf","convertColumnToClickable","Box","variant","currentBtnState","newActiveSort","updateSortingState","Text","textTransform","fontSize","letterSpacing","ml","isActive","size","addressBookTable","head","overlay","indexKey","RowDeleteOverlay","prompt","$label","deleteAction","prev","cancelAction","includes","UndoDeleteOverlay","overlayText","restoreAccount","i","body","notes","networkData","LIGHT_PURPLE","Label","SIdenticon","SEditableText","truncate","EthAddress","isCopyable","Network","EditableText","maxWidth","config","primaryColumn","headingRight","mb","FixedSizeCollapsibleTable","breakpoint","maxHeight","span","Identicon","ADDRESSBOOK_LABEL","ADDRESSBOOK_ADDRESS","getContactByAddress","isResolvingDomain","setIsResolvingDomain","isValidETHAddress","contact","createError","message","displayToast","toastTemplates","useToasts","AddToAddressBookPanel","display","addedAddress","touched","setFieldError","setFieldTouched","options","isResolvingName","textarea","AddressBookButtons","secondary","SettingsField","SettingsControl","SettingsButton","SDashboardPanel","theme","colors","warning","connect","dispatch","bindActionCreators","appReset","connector","confirmDelete","setConfirmDelete","Divider","deleteText","SubHeading","fontWeight","SIconContainer","UnHideAssetButton","removeAssetfromExclusionList","AddIcon","BalanceDetailsTable","firstAction","SelectContainer","BLUE_LIGHT","fiatCurrency","canTrackProductAnalytics","setFiat","setProductAnalyticsAuthorisation","eip1559","setEIP1559","getEIP1559FeatureFlag","ROUTE_PATHS","SETTINGS_IMPORT","path","SETTINGS_EXPORT","event","target","String","keys","Fiats","option","Switch","$greyable","setEIP1559FeatureFlag","labelLeft","labelRight","PRIVACY_POLICY_LINK","featureFlags","isXsScreen","networkNodesTable","onEdit","sortableColumn","sortFunction","aLabel","bLabel","CUSTOM_NETWORKS","CollapsibleTable","SContainer","paddingLeft","SContainerValue","SContainerOption","EditIcon","img","NetworkNodeOption","data","selectOption","handleSelect","d","Typography","addIcon","ownProps","selectNetwork","setNetworkSelectedNode","autoNode","getSelectedNode","displayNodes","Selector","getOptionLabel","searchable","optionComponent","valueComponent","editIcon"],"mappings":"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","file":"Settings.4ca692a009a0fd49e552.js","sourcesContent":["import { ReactNode, useState } from 'react';\n\nimport { Heading } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { AccountList, Desktop, Icon, Mobile } from '@components';\nimport MobileNavBar from '@components/MobileNavBar';\nimport { DEFAULT_NETWORK } from '@config';\nimport { getFiat } from '@config/fiats';\nimport FlippablePanel from '@features/Settings/components/FlippablePanel';\nimport { buildBalances, buildTotalFiatValue } from '@helpers';\nimport { useFeatureFlags, useRates } from '@services';\nimport { NetworkUtils, useContacts, useNetworks, useSettings } from '@services/Store';\nimport { isExcludedAsset } from '@services/Store/helpers';\nimport { getStoreAccounts, selectCurrentAccounts, useSelector } from '@store';\nimport { BREAK_POINTS, COLORS } from '@theme';\nimport translate from '@translations';\nimport { Balance, CustomNodeConfig, NetworkId } from '@types';\n\nimport AddOrEditNetworkNode from './components/AddOrEditNetworkNode';\nimport AddressBookPanel from './components/AddressBook';\nimport AddToAddressBook from './components/AddToAddressBook';\nimport DangerZone from './components/DangerZone';\nimport ExcludedAssetsPanel from './components/ExcludedAssets';\nimport GeneralSettings from './components/GeneralSettings';\nimport NetworkNodes from './components/NetworkNodes';\n\nconst SettingsHeading = styled(Heading)<{ forwardedAs?: string }>`\n  display: flex;\n  align-items: center;\n  margin-bottom: 24px;\n  font-weight: bold;\n  margin-top: 0;\n`;\n\nconst StyledLayout = styled.div`\n  width: 960px;\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    width: 100%;\n  }\n  .Layout-content {\n    padding: 0;\n  }\n`;\n\nfunction RendedExcludedAssetsPanel() {\n  const accounts = useSelector(getStoreAccounts);\n  const { settings } = useSettings();\n  const { getAssetRate, getAssetChange } = useRates();\n  const currentAccounts = useSelector(selectCurrentAccounts);\n  const balances: Balance[] = buildBalances(\n    currentAccounts,\n    settings,\n    getAssetRate,\n    getAssetChange,\n    isExcludedAsset\n  );\n\n  const totalFiatValue = buildTotalFiatValue(balances);\n\n  const fiat = getFiat(settings);\n\n  return (\n    <ExcludedAssetsPanel\n      balances={balances}\n      totalFiatValue={totalFiatValue}\n      fiat={fiat}\n      accounts={accounts}\n      selected={settings.dashboardAccounts}\n    />\n  );\n}\n\nfunction RenderAccountPanel() {\n  const { isFeatureActive } = useFeatureFlags();\n  const accounts = useSelector(getStoreAccounts);\n  return (\n    <AccountList\n      accounts={accounts}\n      deletable={true}\n      copyable={true}\n      privacyCheckboxEnabled={isFeatureActive('PRIVATE_TAGS')}\n    />\n  );\n}\n\nfunction RenderAddressPanel() {\n  const {\n    createContact,\n    contacts,\n    contactRestore,\n    deleteContact,\n    updateContact,\n    restoreDeletedContact\n  } = useContacts();\n\n  return (\n    <FlippablePanel>\n      {({ flipped, toggleFlipped }) =>\n        flipped ? (\n          <AddToAddressBook toggleFlipped={toggleFlipped} createContact={createContact} />\n        ) : (\n          <AddressBookPanel\n            contacts={contacts}\n            toggleFlipped={toggleFlipped}\n            updateContact={updateContact}\n            deleteContact={deleteContact}\n            restoreDeletedContact={restoreDeletedContact}\n            contactRestore={contactRestore}\n          />\n        )\n      }\n    </FlippablePanel>\n  );\n}\n\nfunction RenderNetworkNodes() {\n  const { networks: allNetworks, getNetworkById } = useNetworks();\n  const { contacts } = useContacts();\n  const [networkId, setNetworkId] = useState<NetworkId>(DEFAULT_NETWORK);\n  const [editNode, setEditNode] = useState<CustomNodeConfig | undefined>(undefined);\n  const [isAddingNetwork, setAddingNetwork] = useState(false);\n\n  const contactNetworks = NetworkUtils.getDistinctNetworks(contacts, getNetworkById);\n  const networks = allNetworks.filter(\n    (n) => n.isCustom || contactNetworks.some((a) => a.id === n.id)\n  );\n\n  return (\n    <FlippablePanel>\n      {({ flipped, toggleFlipped }) =>\n        flipped ? (\n          <>\n            <AddOrEditNetworkNode\n              networkId={networkId}\n              editNode={editNode}\n              onComplete={toggleFlipped}\n              isAddingCustomNetwork={isAddingNetwork}\n            />\n          </>\n        ) : (\n          <NetworkNodes\n            networks={networks}\n            toggleFlipped={(id, node) => {\n              setNetworkId(id);\n              setEditNode(node);\n              setAddingNetwork(false);\n\n              toggleFlipped();\n            }}\n            toggleNetworkCreation={() => {\n              setAddingNetwork(true);\n              setEditNode(undefined);\n              toggleFlipped();\n            }}\n          />\n        )\n      }\n    </FlippablePanel>\n  );\n}\n\nfunction RenderGeneralSettingsPanel() {\n  return (\n    <>\n      <GeneralSettings />\n      <DangerZone />\n    </>\n  );\n}\n\ninterface TabOptions {\n  [key: string]: ReactNode;\n}\n\nexport default function Settings() {\n  // In Mobile view we display a tab instead\n  const [tab, setTab] = useState('accounts');\n  const tabOptions: TabOptions = {\n    ['accounts']: RenderAccountPanel(),\n    ['addresses']: RenderAddressPanel(),\n    ['general']: RenderGeneralSettingsPanel(),\n    ['nodes']: RenderNetworkNodes()\n  };\n  const currentTab = tabOptions[tab];\n\n  return (\n    <StyledLayout>\n      <Mobile>\n        <MobileNavBar>\n          <div\n            className={`tab ${tab === 'accounts' ? 'active' : ''}`}\n            onClick={() => setTab('accounts')}\n          >\n            <h6>Accounts</h6>\n          </div>\n          <div\n            className={`tab ${tab === 'addresses' ? 'active' : ''}`}\n            onClick={() => setTab('addresses')}\n          >\n            <h6>Addresses</h6>\n          </div>\n          <div className=\"w-100\" />\n          <div className={`tab ${tab === 'nodes' ? 'active' : ''}`} onClick={() => setTab('nodes')}>\n            <h6>Network & Nodes</h6>\n          </div>\n          <div\n            className={`tab ${tab === 'general' ? 'active' : ''}`}\n            onClick={() => setTab('general')}\n          >\n            <h6>General</h6>\n          </div>\n        </MobileNavBar>\n        <>{currentTab}</>\n      </Mobile>\n      <Desktop>\n        <SettingsHeading as=\"h2\">\n          <Icon\n            style={{ marginRight: '24px', marginTop: '2px' }}\n            type=\"nav-settings\"\n            width=\"30px\"\n            color={COLORS.BLUE_BRIGHT}\n            alt=\"Settings\"\n          />\n          {translate('SETTINGS_HEADING')}\n        </SettingsHeading>\n        {RenderAccountPanel()}\n        {RenderAddressPanel()}\n        {RendedExcludedAssetsPanel()}\n        {RenderNetworkNodes()}\n        {RenderGeneralSettingsPanel()}\n      </Desktop>\n    </StyledLayout>\n  );\n}\n","import { FC } from 'react';\n\nimport styled from 'styled-components';\n\nimport { COLORS, FONT_SIZE, SPACING } from '../theme';\n\nconst MobileNavBarStyled = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 1px -1px 10px;\n\n  > div {\n    &.tab {\n      position: relative;\n      flex-basis: 0;\n      flex-grow: 1;\n      width: 100%;\n      max-width: 100%;\n\n      padding: ${SPACING.BASE} 0;\n      background-color: ${COLORS.BLUE_DARK_SLATE};\n      border: 1px solid ${COLORS.GREY_GEYSER};\n\n      &.active {\n        &:after {\n          content: ' ';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background-color: ${COLORS.WHITE};\n          opacity: 0.15;\n        }\n      }\n\n      > h6 {\n        display: inline-block;\n        width: 100%;\n        margin: 0;\n        text-align: center;\n        font-weight: bold;\n        font-size: ${FONT_SIZE.SM};\n        line-height: ${FONT_SIZE.MD};\n        letter-spacing: 1.07692px;\n        text-transform: uppercase;\n        color: ${COLORS.WHITE};\n      }\n    }\n\n    &.w-100 {\n      width: 100%;\n    }\n  }\n`;\n\nconst MobileNavBar: FC = ({ children }) => {\n  return <MobileNavBarStyled>{children}</MobileNavBarStyled>;\n};\n\nexport default MobileNavBar;\n","import { Component } from 'react';\n\ninterface RenderProps {\n  flipped: boolean;\n  toggleFlipped(): void;\n}\n\ninterface Props {\n  children(props: RenderProps): any;\n}\n\ninterface State {\n  flipped: boolean;\n}\n\nexport default class FlippablePanel extends Component<Props> {\n  public state: State = {\n    flipped: false\n  };\n\n  public render() {\n    const { children } = this.props;\n    const { flipped } = this.state;\n\n    return children({\n      flipped,\n      toggleFlipped: this.toggleFlipped\n    });\n  }\n\n  private toggleFlipped = () =>\n    this.setState((prevState: State) => ({\n      flipped: !prevState.flipped\n    }));\n}\n","import { MouseEventHandler, useCallback, useState } from 'react';\n\nimport { Tooltip, Button as UIButton } from '@mycrypto/ui';\nimport { DEFAULT_ETH } from '@mycrypto/wallets';\nimport { Field, FieldProps, Form, Formik } from 'formik';\nimport styled from 'styled-components';\nimport { boolean, lazy, object, string } from 'yup';\n\nimport backArrowIcon from '@assets/images/icn-back-arrow.svg';\nimport {\n  Button,\n  Checkbox,\n  DashboardPanel,\n  InputField,\n  LinkApp,\n  NetworkSelector\n} from '@components';\nimport {\n  DEFAULT_NETWORK,\n  ETHPLORER_URL,\n  EXT_URLS,\n  GITHUB_RELEASE_NOTES_URL,\n  LETS_ENCRYPT_URL\n} from '@config';\nimport { useAssets } from '@services';\nimport { ProviderHandler } from '@services/EthService/network';\nimport { NetworkUtils, useNetworks } from '@services/Store/Network';\nimport { canDeleteNode as canDeleteNodeSelector, useSelector } from '@store';\nimport { BREAK_POINTS, COLORS, SPACING } from '@theme';\nimport { Trans, translateRaw } from '@translations';\nimport {\n  CustomNodeConfig,\n  ExtendedAsset,\n  Network,\n  NetworkId,\n  NodeType,\n  TTicker,\n  WalletId\n} from '@types';\nimport { generateAssetUUID, makeExplorer } from '@utils';\n\nconst AddToNetworkNodePanel = styled(DashboardPanel)`\n  padding: 0 ${SPACING.MD} ${SPACING.SM};\n`;\n\nconst BackButton = styled(UIButton)`\n  margin-right: ${SPACING.BASE};\n`;\n\nconst Row = styled.div<{ hidden?: boolean }>`\n  flex-direction: column;\n  ${({ hidden }) => `display: ${hidden ? 'none' : 'flex'};`};\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_XS}) {\n    flex-direction: row;\n    align-items: flex-start;\n    padding-left: ${SPACING.LG};\n  }\n`;\n\nconst SubtitleRow = styled(Row)`\n  margin-top: -${SPACING.BASE};\n  padding-bottom: ${SPACING.BASE};\n`;\n\nconst Column = styled.div<{ alignSelf?: string }>`\n  flex: 1;\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    ${({ alignSelf = 'auto' }) => `align-self: ${alignSelf};`};\n\n    &:not(:first-child) {\n      padding-left: ${SPACING.BASE};\n    }\n\n    &:not(:last-child) {\n      padding-right: ${SPACING.BASE};\n    }\n  }\n\n  label {\n    padding-left: ${SPACING.XS};\n  }\n`;\n\nconst AddressFieldset = styled.fieldset`\n  margin-bottom: ${SPACING.SM};\n\n  label {\n    display: block;\n    margin-bottom: ${SPACING.SM};\n    color: ${COLORS.BLUE_DARK_SLATE};\n  }\n  input,\n  textarea {\n    display: block;\n    width: 100%;\n  }\n`;\n\nconst NetworkNodeFieldsButtons = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: ${SPACING.BASE};\n  button {\n    text-transform: capitalize;\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-top: 0;\n  }\n`;\n\nconst SNetworkSelector = styled(NetworkSelector)`\n  margin-bottom: ${SPACING.SM};\n`;\n\nconst SCheckbox = styled(Checkbox)`\n  margin-bottom: 0;\n  ${({ checked }) => checked && `margin-bottom: ${SPACING.BASE};`};\n  ${({ checked }) =>\n    checked && `@media (min-width: ${BREAK_POINTS.SCREEN_SM}) {margin-bottom: 0;}`};\n`;\n\nconst SError = styled.div`\n  margin-top: ${SPACING.SM};\n  color: ${COLORS.PASTEL_RED};\n`;\n\nconst DeleteButton = styled(Button)<{ disabled: boolean }>`\n  ${(props) =>\n    !props.disabled &&\n    `\n    background-color: ${COLORS.PASTEL_RED};\n\n\n  :hover {\n    background-color: ${COLORS.ERROR_RED};\n  }\n  `}\n`;\n\nconst ReferralLink = styled.div`\n  margin-bottom: ${SPACING.BASE};\n\n  @media (max-width: ${BREAK_POINTS.SCREEN_XS}) {\n    margin-bottom: 0px;\n    margin-top: ${SPACING.BASE};\n  }\n`;\n\ninterface NetworkNodeFields {\n  name: string;\n  networkId: NetworkId;\n  url: string;\n  auth: boolean;\n  username: string;\n  password: string;\n\n  // CUSTOM NETWORK\n  networkName?: string;\n  baseUnit?: string;\n  chainId?: string;\n}\n\ninterface Props {\n  networkId: NetworkId;\n  editNode: CustomNodeConfig | undefined;\n  isAddingCustomNetwork: boolean;\n  onComplete(): void;\n}\n\nexport default function AddOrEditNetworkNode({\n  networkId,\n  isAddingCustomNetwork,\n  onComplete,\n  editNode\n}: Props) {\n  const {\n    addNetwork,\n    addNodeToNetwork,\n    isNodeNameAvailable,\n    getNetworkById,\n    updateNode,\n    deleteNodeOrNetwork\n  } = useNetworks();\n  const { createAsset } = useAssets();\n  const [isConnectionError, setIsConnectionError] = useState(false);\n  const [editMode] = useState(!!editNode);\n  const canDeleteNode = useSelector(canDeleteNodeSelector(networkId)) && editMode;\n  const initialState = useCallback((): NetworkNodeFields => {\n    if (editNode) {\n      return {\n        networkId,\n        name: editNode.service,\n        url: editNode.url,\n        auth: !!editNode.auth,\n        username: editNode.auth ? editNode.auth.username : '',\n        password: editNode.auth ? editNode.auth.password : ''\n      };\n    }\n\n    return {\n      name: '',\n      networkId: networkId || DEFAULT_NETWORK,\n      url: '',\n      auth: false,\n      username: '',\n      password: ''\n    };\n  }, []);\n\n  const onDeleteNodeClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n\n    deleteNodeOrNetwork(networkId, editNode!.name);\n\n    onComplete();\n  };\n\n  const Schema = lazy((values: NetworkNodeFields) =>\n    object().shape({\n      name: string()\n        .required(translateRaw('REQUIRED'))\n        .test('check-name-available', 'Duplicated name, please change name!', (name) => {\n          return isNodeNameAvailable(values.networkId, name, editNode ? [editNode.name] : []);\n        }),\n      networkId: string().required(translateRaw('REQUIRED')),\n      url: string().required(translateRaw('REQUIRED')),\n      auth: boolean().nullable(false),\n      username: string().test('auth-required', translateRaw('REQUIRED'), (username) => {\n        return values.auth ? !!username : true;\n      }),\n      password: string().test('auth-required', translateRaw('REQUIRED'), (password) => {\n        return values.auth ? !!password : true;\n      })\n    })\n  );\n\n  return (\n    <AddToNetworkNodePanel\n      heading={\n        <>\n          <BackButton basic={true} onClick={onComplete}>\n            <img src={backArrowIcon} alt=\"Back\" />\n          </BackButton>\n          {editMode ? translateRaw('CUSTOM_NODE_EDIT') : translateRaw('CUSTOM_NODE_ADD')}\n        </>\n      }\n      padChildren={true}\n    >\n      <SubtitleRow>\n        <Column>\n          {((t) => {\n            const tSplit = t.split(/\\$myCryptoRepo|\\$letsEncrypt/);\n            if (tSplit.length === 3) {\n              return (\n                <>\n                  {tSplit[0]}\n                  <LinkApp href={GITHUB_RELEASE_NOTES_URL} isExternal={true}>\n                    {translateRaw('CUSTOM_NODE_SUBTITLE_REPO')}\n                  </LinkApp>\n                  {tSplit[1]}\n                  <LinkApp href={LETS_ENCRYPT_URL} isExternal={true}>\n                    LetsEncrypt\n                  </LinkApp>\n                  {tSplit[2]}\n                </>\n              );\n            }\n            return t;\n          })(translateRaw('CUSTOM_NODE_SUBTITLE'))}\n        </Column>\n      </SubtitleRow>\n      <Formik\n        validationSchema={Schema}\n        initialValues={initialState()}\n        onSubmit={async (values: NetworkNodeFields, { setSubmitting }) => {\n          const {\n            url,\n            username,\n            password,\n            name,\n            auth,\n            networkId: formSelectedNetworkId,\n            networkName,\n            chainId,\n            baseUnit\n          } = values;\n\n          const selectedNetworkId = isAddingCustomNetwork\n            ? (networkName! as NetworkId)\n            : formSelectedNetworkId;\n\n          const node = Object.assign(\n            {\n              url,\n              service: name,\n              name: NetworkUtils.makeNodeName(selectedNetworkId, name),\n              isCustom: true,\n              type: NodeType.MYC_CUSTOM\n            },\n            auth ? { auth: { username, password } } : {}\n          ) as CustomNodeConfig;\n\n          try {\n            const network: Network = !isAddingCustomNetwork\n              ? getNetworkById(selectedNetworkId)\n              : {\n                  id: selectedNetworkId,\n                  name: networkName!,\n                  chainId: parseInt(chainId!, 10),\n                  baseUnit: baseUnit as TTicker,\n                  baseAsset: generateAssetUUID(chainId!),\n                  isCustom: true,\n                  nodes: [node],\n                  dPaths: {\n                    [WalletId.TREZOR]: DEFAULT_ETH,\n                    [WalletId.LEDGER_NANO_S]: DEFAULT_ETH,\n                    default: DEFAULT_ETH\n                  },\n                  gasPriceSettings: {\n                    min: 1,\n                    max: 100,\n                    initial: 1\n                  },\n                  shouldEstimateGasPrice: false,\n                  color: undefined,\n                  selectedNode: node.name,\n                  blockExplorer: makeExplorer({\n                    name: networkName!,\n                    origin: ETHPLORER_URL\n                  })\n                };\n            const provider = new ProviderHandler({ ...network, nodes: [node] }, false);\n            await provider.getLatestBlockNumber();\n\n            if (isAddingCustomNetwork) {\n              const baseAsset: ExtendedAsset = {\n                uuid: network.baseAsset,\n                name: network.baseUnit,\n                ticker: network.baseUnit,\n                type: 'base',\n                networkId: network.id,\n                isCustom: true\n              };\n              createAsset(baseAsset);\n              addNetwork(network);\n            } else if (editNode) {\n              updateNode(node, selectedNetworkId, editNode.name);\n            } else {\n              addNodeToNetwork(node, selectedNetworkId);\n            }\n\n            setIsConnectionError(false);\n            onComplete();\n          } catch (e) {\n            console.error(e);\n            setIsConnectionError(true);\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ values, isSubmitting, errors }) => (\n          <Form>\n            <Row>\n              <Column>\n                <AddressFieldset>\n                  <label htmlFor=\"name\">{translateRaw('CUSTOM_NODE_FORM_NODE_NAME')}</label>\n                  <Field name=\"name\">\n                    {({ field }: FieldProps<string>) => (\n                      <InputField\n                        {...field}\n                        inputError={errors && errors.name}\n                        placeholder={translateRaw('CUSTOM_NODE_FORM_NODE_NAME')}\n                      />\n                    )}\n                  </Field>\n                </AddressFieldset>\n              </Column>\n              {!isAddingCustomNetwork && (\n                <Column>\n                  <AddressFieldset>\n                    <Field name=\"networkId\">\n                      {({ field, form }: FieldProps<NetworkId>) => (\n                        <SNetworkSelector\n                          network={field.value}\n                          onChange={(e) => form.setFieldValue(field.name, e)}\n                          disabled={editMode}\n                        />\n                      )}\n                    </Field>\n                  </AddressFieldset>\n                </Column>\n              )}\n            </Row>\n            {isAddingCustomNetwork && (\n              <Row>\n                <Column>\n                  <AddressFieldset>\n                    <label htmlFor=\"networkName\">\n                      {translateRaw('CUSTOM_NODE_FORM_NETWORK_NAME')}\n                    </label>\n                    <Field name=\"networkName\">\n                      {({ field }: FieldProps<string>) => (\n                        <InputField\n                          {...field}\n                          inputError={errors && errors.networkName}\n                          placeholder={translateRaw('CUSTOM_NODE_FORM_NETWORK_NAME_PLACEHOLDER')}\n                        />\n                      )}\n                    </Field>\n                  </AddressFieldset>\n                </Column>\n                <Column>\n                  <AddressFieldset>\n                    <label htmlFor=\"baseUnit\"> {translateRaw('CUSTOM_NODE_FORM_BASE_UNIT')}</label>\n                    <Field name=\"baseUnit\">\n                      {({ field }: FieldProps<string>) => (\n                        <InputField\n                          {...field}\n                          inputError={errors && errors.baseUnit}\n                          placeholder={translateRaw('BASE_UNIT')}\n                        />\n                      )}\n                    </Field>\n                  </AddressFieldset>\n                </Column>\n                <Column>\n                  <AddressFieldset>\n                    <label htmlFor=\"chainId\">{translateRaw('CUSTOM_NODE_FORM_CHAIN_ID')}</label>\n                    <Field name=\"chainId\">\n                      {({ field }: FieldProps<string>) => (\n                        <InputField\n                          {...field}\n                          inputError={errors && errors.chainId}\n                          placeholder={translateRaw('CUSTOM_NODE_FORM_CHAIN_ID_PLACEHOLDER')}\n                        />\n                      )}\n                    </Field>\n                  </AddressFieldset>\n                </Column>\n              </Row>\n            )}\n            <Row>\n              <Column>\n                <AddressFieldset>\n                  <label htmlFor=\"url\">{translateRaw('CUSTOM_NODE_FORM_NODE_ADDRESS')}</label>\n                  <Field name=\"url\">\n                    {({ field }: FieldProps<string>) => (\n                      <InputField\n                        inputError={errors && errors.url}\n                        placeholder={translateRaw('CUSTOM_NODE_FORM_NODE_ADDRESS_PLACEHOLDER')}\n                        {...field}\n                      />\n                    )}\n                  </Field>\n                </AddressFieldset>\n              </Column>\n              <Column alignSelf=\"center\">\n                <Field name=\"auth\">\n                  {({ field, form }: FieldProps<boolean>) => (\n                    <SCheckbox\n                      {...field}\n                      onChange={() => form.setFieldValue(field.name, !field.value)}\n                      checked={field.value}\n                      label={translateRaw('CUSTOM_NODE_FORM_AUTH_TOGGLE')}\n                    />\n                  )}\n                </Field>\n              </Column>\n            </Row>\n            <Row hidden={!values.auth}>\n              <Column>\n                <AddressFieldset>\n                  <label htmlFor=\"username\">{translateRaw('CUSTOM_NODE_FORM_USERNAME')}</label>\n                  <Field name=\"username\">\n                    {({ field }: FieldProps<string>) => (\n                      <InputField\n                        {...field}\n                        inputError={errors && errors.username}\n                        placeholder={translateRaw('CUSTOM_NODE_FORM_USERNAME_PLACEHOLDER')}\n                      />\n                    )}\n                  </Field>\n                </AddressFieldset>\n              </Column>\n              <Column>\n                <AddressFieldset>\n                  <label htmlFor=\"password\">{translateRaw('CUSTOM_NODE_FORM_PASSWORD')}</label>\n                  <Field name=\"password\">\n                    {({ field }: FieldProps<string>) => (\n                      <InputField\n                        {...field}\n                        inputError={errors && errors.password}\n                        type=\"password\"\n                        placeholder={translateRaw('CUSTOM_NODE_FORM_PASSWORD')}\n                      />\n                    )}\n                  </Field>\n                </AddressFieldset>\n              </Column>\n            </Row>\n            <Row>\n              <ReferralLink>\n                <Trans\n                  id=\"CUSTOM_NODE_QUICKNODE_LINK\"\n                  variables={{\n                    $link: () => (\n                      <LinkApp href={EXT_URLS.QUICKNODE_REFERRAL.url} isExternal={true}>\n                        {translateRaw('CUSTOM_NODE_QUICKNODE_TEXT')}\n                      </LinkApp>\n                    )\n                  }}\n                />\n              </ReferralLink>\n            </Row>\n            <Row>\n              <Column>\n                <NetworkNodeFieldsButtons>\n                  <Button type=\"submit\" disabled={isSubmitting}>\n                    {translateRaw('CUSTOM_NODE_SAVE_NODE')}\n                  </Button>\n                  {editMode && (\n                    <Tooltip tooltip={translateRaw('DELETE_NETWORK_TOOLTIP')}>\n                      <DeleteButton\n                        type=\"button\"\n                        onClick={onDeleteNodeClick}\n                        disabled={!canDeleteNode}\n                        data-testid=\"deleteButton\"\n                      >\n                        {translateRaw('CUSTOM_NODE_REMOVE_NODE')}\n                      </DeleteButton>\n                    </Tooltip>\n                  )}\n                </NetworkNodeFieldsButtons>\n              </Column>\n            </Row>\n            <Row hidden={!isConnectionError}>\n              <Column>\n                <SError>{translateRaw('CUSTOM_NODE_ERROR_CONNECTION')}</SError>\n              </Column>\n            </Row>\n          </Form>\n        )}\n      </Formik>\n    </AddToNetworkNodePanel>\n  );\n}\n","import { useState } from 'react';\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport isNumber from 'lodash/isNumber';\nimport styled from 'styled-components';\n\nimport {\n  Box,\n  DashboardPanel,\n  EditableText,\n  EthAddress,\n  FixedSizeCollapsibleTable,\n  Icon,\n  Identicon,\n  LinkApp,\n  Network,\n  RowDeleteOverlay,\n  Text,\n  Tooltip,\n  UndoDeleteOverlay\n} from '@components';\nimport { useNetworks } from '@services';\nimport { BREAK_POINTS, COLORS, SPACING } from '@theme';\nimport { translateRaw } from '@translations';\nimport { ExtendedContact, TUuid } from '@types';\nimport { useScreenSize } from '@utils';\n\ninterface Props {\n  contacts: ExtendedContact[];\n  contactRestore: { [name: string]: ExtendedContact | undefined };\n  toggleFlipped(): void;\n  deleteContact(uuid: string): void;\n  updateContact(addressBooksData: ExtendedContact): void;\n  restoreDeletedContact(id: TUuid): void;\n}\n\nconst Label = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nconst SIdenticon = styled(Identicon)`\n  > img {\n    height: 2em;\n  }\n  margin-right: ${SPACING.SM};\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-right: ${SPACING.MD};\n  }\n`;\n\nconst SEditableText = styled(EditableText)`\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    font-weight: inherit;\n  }\n`;\n\ntype ISortTypes = 'label' | 'label-reverse' | 'address' | 'address-reverse';\ntype IColumnValues = 'ADDRESSBOOK_LABEL' | 'ADDRESSBOOK_ADDRESS';\n\nexport interface ISortingState {\n  sortState: {\n    ADDRESSBOOK_LABEL: 'label' | 'label-reverse';\n    ADDRESSBOOK_ADDRESS: 'address' | 'address-reverse';\n  };\n  activeSort: ISortTypes;\n}\n\nconst initialSortingState: ISortingState = {\n  sortState: {\n    ADDRESSBOOK_LABEL: 'label',\n    ADDRESSBOOK_ADDRESS: 'address'\n  },\n  activeSort: 'label'\n};\n\ninterface ITableFullContactType {\n  label: string;\n  address: string;\n}\n\ntype TSortFunction = (a: ITableFullContactType, b: ITableFullContactType) => number;\n\nconst getSortingFunction = (sortKey: ISortTypes): TSortFunction => {\n  switch (sortKey) {\n    case 'label':\n      return (a: ITableFullContactType, b: ITableFullContactType) => a.label.localeCompare(b.label);\n    case 'label-reverse':\n      return (a: ITableFullContactType, b: ITableFullContactType) => b.label.localeCompare(a.label);\n    case 'address':\n      return (a: ITableFullContactType, b: ITableFullContactType) =>\n        a.address.localeCompare(b.address);\n    case 'address-reverse':\n      return (a: ITableFullContactType, b: ITableFullContactType) =>\n        b.address.localeCompare(a.address);\n  }\n};\n\nexport default function AddressBook({\n  contacts,\n  contactRestore,\n  toggleFlipped,\n  deleteContact,\n  updateContact,\n  restoreDeletedContact\n}: Props) {\n  const { isMobile } = useScreenSize();\n  const { getNetworkById } = useNetworks();\n  const [sortingState, setSortingState] = useState(initialSortingState);\n  const [deletingIndex, setDeletingIndex] = useState<number>();\n  const [undoDeletingIndexes, setUndoDeletingIndexes] = useState<[number, TUuid][]>([]);\n  const overlayRows: [number[], [number, TUuid][]] = [\n    isNumber(deletingIndex) ? [deletingIndex] : [],\n    [...undoDeletingIndexes]\n  ];\n  const overlayRowsFlat = [...overlayRows[0], ...overlayRows[1].map((row) => row[0])];\n\n  const getDisplayAddressBook = (): ExtendedContact[] => {\n    const accountsTemp = cloneDeep(contacts);\n    overlayRows[1]\n      .sort((a, b) => a[0] - b[0])\n      .forEach((index) => {\n        accountsTemp.splice(index[0], 0, contactRestore[index[1]] as ExtendedContact);\n      });\n    return accountsTemp.sort((a, b) => a.uuid.localeCompare(b.uuid));\n  };\n  const displayAddressBook = getDisplayAddressBook().sort(\n    getSortingFunction(sortingState.activeSort)\n  );\n\n  const updateSortingState = (id: IColumnValues) => {\n    // In case overlay active, disable changing sorting state\n    if (overlayRowsFlat.length) return;\n\n    const currentBtnState = sortingState.sortState[id];\n    if (currentBtnState.indexOf('-reverse') > -1) {\n      const newActiveSort = currentBtnState.split('-reverse')[0] as ISortTypes;\n      setSortingState({\n        sortState: {\n          ...sortingState.sortState,\n          [id]: newActiveSort\n        },\n        activeSort: newActiveSort\n      });\n    } else {\n      const newActiveSort = (currentBtnState + '-reverse') as ISortTypes;\n      setSortingState({\n        sortState: {\n          ...sortingState.sortState,\n          [id]: newActiveSort\n        },\n        activeSort: newActiveSort\n      });\n    }\n  };\n\n  const getColumnSortDirection = (id: IColumnValues): boolean =>\n    sortingState.sortState[id].indexOf('-reverse') > -1;\n\n  const convertColumnToClickable = (id: IColumnValues) =>\n    isMobile ? (\n      translateRaw(id)\n    ) : (\n      <Box variant=\"rowAlign\" key={id} onClick={() => updateSortingState(id)}>\n        <Text as=\"span\" textTransform=\"uppercase\" fontSize=\"14px\" letterSpacing=\"0.0625em\">\n          {translateRaw(id)}\n        </Text>\n        <Icon\n          ml=\"0.3ch\"\n          type=\"sort\"\n          isActive={getColumnSortDirection(id)}\n          size=\"1em\"\n          color=\"linkAction\"\n        />\n      </Box>\n    );\n\n  const addressBookTable = {\n    head: [\n      convertColumnToClickable('ADDRESSBOOK_LABEL'),\n      convertColumnToClickable('ADDRESSBOOK_ADDRESS'),\n      translateRaw('ADDRESSBOOK_NETWORK'),\n      translateRaw('ADDRESSBOOK_NOTES'),\n      isMobile ? (\n        translateRaw('ADDRESSBOOK_REMOVE')\n      ) : (\n        <Box variant=\"columnCenter\" key={'ADDRESSBOOK_REMOVE'} width=\"100%\">\n          <Text as=\"span\" textTransform=\"uppercase\" fontSize=\"14px\" letterSpacing=\"0.0625em\">\n            {translateRaw('ADDRESSBOOK_REMOVE')}\n          </Text>\n        </Box>\n      )\n    ],\n    overlay: ({ indexKey }: { indexKey: number }) => {\n      if (!overlayRows) return <></>;\n\n      if (overlayRows[0].length && overlayRows[0][0] === indexKey) {\n        // Row delete overlay\n        const { uuid, label } = displayAddressBook[indexKey];\n        return (\n          <RowDeleteOverlay\n            prompt={translateRaw('ADDRESS_BOOK_REMOVE_OVERLAY_TEXT', {\n              $label: label\n            })}\n            deleteAction={() => {\n              setDeletingIndex(undefined);\n              setUndoDeletingIndexes((prev) => [...prev, [indexKey, uuid]]);\n              deleteContact(uuid);\n            }}\n            cancelAction={() => setDeletingIndex(undefined)}\n          />\n        );\n      } else if (overlayRows[1].length && overlayRows[1].map((row) => row[0]).includes(indexKey)) {\n        // Undo delete overlay\n        const { uuid, label, address } = displayAddressBook[indexKey];\n\n        return (\n          <UndoDeleteOverlay\n            address={address}\n            overlayText={translateRaw('ADDRESS_BOOK_UNDO_REMOVE_OVERLAY_TEXT', {\n              $label: label\n            })}\n            restoreAccount={() => {\n              restoreDeletedContact(uuid);\n              setUndoDeletingIndexes((prev) => prev.filter((i) => i[0] !== indexKey));\n            }}\n          />\n        );\n      }\n\n      return <></>;\n    },\n    overlayRows: overlayRowsFlat,\n    body: displayAddressBook.map(\n      ({ uuid, address, label, network, notes }: ExtendedContact, index) => {\n        const networkData = getNetworkById(network);\n        const color = networkData && networkData.color ? networkData.color : COLORS.LIGHT_PURPLE;\n        return [\n          // Eslint requires a key because it identifies a jsx element in an array.\n          // CollapsibleTable uses an array for mobile display\n          // When displayed as a row, the primary row key is provided by AbstractTable\n          /* eslint-disable react/jsx-key */\n          <Label>\n            <SIdenticon address={address} />\n            <SEditableText\n              truncate={true}\n              value={label}\n              onChange={(value: string) =>\n                updateContact({ address, label: value, network, notes, uuid })\n              }\n            />\n          </Label>,\n          <EthAddress address={address} truncate={true} isCopyable={true} />,\n          <Network color={color}>{networkData.name || network}</Network>,\n          <EditableText\n            maxWidth=\"260px\"\n            placeholder=\"(empty)\"\n            truncate={true}\n            value={notes}\n            onChange={(value) => updateContact({ address, label, network, notes: value, uuid })}\n          />,\n          <>\n            {isMobile ? (\n              <Box key={index}>\n                <LinkApp href=\"#\" onClick={() => setDeletingIndex(index)}>\n                  {translateRaw('ADDRESSBOOK_REMOVE')}\n                </LinkApp>\n              </Box>\n            ) : (\n              <Box variant=\"rowCenter\" key={index}>\n                <Icon type=\"delete\" size=\"0.8em\" onClick={() => setDeletingIndex(index)} />\n              </Box>\n            )}\n          </>\n          /* eslint-enable react/jsx-key */\n        ];\n      }\n    ),\n    config: {\n      primaryColumn: translateRaw('ADDRESSBOOK_LABEL')\n    }\n  };\n  return (\n    <DashboardPanel\n      heading={\n        <Box variant=\"rowAlign\">\n          {translateRaw('ADDRESSBOOK')}{' '}\n          <Tooltip ml=\"0.5ch\" width=\"16px\" tooltip={translateRaw('ADDRESS_BOOK_TOOLTIP')} />\n        </Box>\n      }\n      headingRight={\n        <LinkApp href={'#'} onClick={toggleFlipped}>\n          <Box variant=\"rowAlign\">\n            <Icon type=\"add-bold\" width=\"16px\" />\n            <Text ml={SPACING.XS} mb={0} color=\"BLUE_BRIGHT\">\n              {translateRaw('ADD')}\n            </Text>\n          </Box>\n        </LinkApp>\n      }\n    >\n      <FixedSizeCollapsibleTable breakpoint={450} maxHeight={'450px'} {...addressBookTable} />\n    </DashboardPanel>\n  );\n}\n","import { useState } from 'react';\n\nimport { Button } from '@mycrypto/ui';\nimport { Field, FieldProps, Form, Formik } from 'formik';\nimport styled from 'styled-components';\nimport { object, string } from 'yup';\n\nimport backArrowIcon from '@assets/images/icn-back-arrow.svg';\nimport { DashboardPanel, InputField, NetworkSelector } from '@components';\nimport GeneralLookupField from '@components/GeneralLookupField';\nimport { DEFAULT_NETWORK } from '@config/constants';\nimport { useToasts } from '@features/Toasts';\nimport { useContacts, useNetworks } from '@services';\nimport { isValidETHAddress } from '@services/EthService';\nimport { translateRaw } from '@translations';\nimport { Contact, NetworkId } from '@types';\n\nconst AddToAddressBookPanel = styled(DashboardPanel)`\n  padding: 24px 30px;\n`;\n\nconst BackButton = styled(Button)`\n  margin-right: 16px;\n`;\n\nconst AddressFieldset = styled.fieldset`\n  margin-bottom: 15px;\n\n  label {\n    display: block;\n    margin-bottom: 9px;\n    color: #163150;\n  }\n  input,\n  textarea {\n    display: block;\n    width: 100%;\n  }\n`;\n\nconst AddressBookButtons = styled.div`\n  button {\n    &:first-of-type {\n      margin-right: 12px;\n    }\n  }\n`;\n\nconst SNetworkSelector = styled(NetworkSelector)`\n  margin-bottom: 15px;\n`;\n\ninterface Props {\n  toggleFlipped(): void;\n  createContact(values: Contact): void;\n}\n\nexport default function AddToAddressBook({ toggleFlipped, createContact }: Props) {\n  const { getContactByAddress } = useContacts();\n  const { getNetworkById } = useNetworks();\n  const [isResolvingDomain, setIsResolvingDomain] = useState(false);\n\n  const Schema = object().shape({\n    label: string().required(translateRaw('REQUIRED')),\n    address: object()\n      .test('check-eth-address', translateRaw('TO_FIELD_ERROR'), (value) =>\n        isValidETHAddress(value.value)\n      )\n      .test('doesnt-exist', translateRaw('ADDRESS_ALREADY_ADDED'), function (value) {\n        const contact = getContactByAddress(value.value);\n        if (contact !== undefined) {\n          return this.createError({\n            message: translateRaw('ADDRESS_ALREADY_ADDED', { $label: contact.label })\n          });\n        }\n        return true;\n      })\n  });\n\n  const { displayToast, toastTemplates } = useToasts();\n\n  return (\n    <AddToAddressBookPanel\n      heading={\n        <>\n          <BackButton basic={true} onClick={toggleFlipped}>\n            <img src={backArrowIcon} alt=\"Back\" />\n          </BackButton>\n          {translateRaw('ADDRESS_BOOK_TABLE_ADD_ADDRESS')}\n        </>\n      }\n      padChildren={true}\n    >\n      <Formik\n        validationSchema={Schema}\n        initialValues={{\n          label: '',\n          address: {\n            value: '',\n            display: ''\n          },\n          notes: '',\n          network: DEFAULT_NETWORK\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          createContact({ ...values, address: values.address.value });\n          setSubmitting(false);\n          displayToast(toastTemplates.addedAddress, { label: values.label });\n          toggleFlipped();\n        }}\n      >\n        {({\n          isSubmitting,\n          errors,\n          values,\n          touched,\n          setFieldValue,\n          setFieldError,\n          setFieldTouched\n        }) => (\n          <Form>\n            <AddressFieldset>\n              <label htmlFor=\"label\">{translateRaw('ACCOUNT_LIST_LABEL')}</label>\n              <Field name=\"label\">\n                {({ field }: FieldProps<string>) => (\n                  <InputField\n                    {...field}\n                    placeholder={translateRaw('ADDRESS_BOOK_NAME_OF_ADDRESS_PLACEHOLDER')}\n                  />\n                )}\n              </Field>\n            </AddressFieldset>\n            <AddressFieldset>\n              <label htmlFor=\"address\">{translateRaw('ADDRESSBOOK_ADDRESS')}</label>\n              <GeneralLookupField\n                name=\"address\"\n                value={values.address}\n                options={[]}\n                isResolvingName={isResolvingDomain}\n                setIsResolvingDomain={setIsResolvingDomain}\n                network={getNetworkById(values.network)}\n                error={\n                  errors && touched.address && errors.address\n                    ? (errors.address as string)\n                    : undefined\n                }\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                setFieldError={setFieldError}\n                placeholder={translateRaw('ADDRESSBOOK_ADDRESS_PLACEHOLDER')}\n              />\n            </AddressFieldset>\n            <AddressFieldset>\n              <Field name=\"network\">\n                {({ field, form }: FieldProps<NetworkId>) => (\n                  <SNetworkSelector\n                    network={field.value}\n                    onChange={(e) => form.setFieldValue(field.name, e)}\n                  />\n                )}\n              </Field>\n            </AddressFieldset>\n            <AddressFieldset>\n              <label htmlFor=\"notes\">{translateRaw('ADDRESSBOOK_NOTES')}</label>\n              <Field name=\"notes\">\n                {({ field }: FieldProps<string>) => (\n                  <InputField\n                    {...field}\n                    textarea={true}\n                    placeholder={translateRaw('ADDRESSBOOK_NOTES_PLACEHOLDER')}\n                  />\n                )}\n              </Field>\n            </AddressFieldset>\n            <AddressBookButtons>\n              <Button type=\"button\" secondary={true} onClick={toggleFlipped}>\n                {translateRaw('CANCEL_ACTION')}\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {translateRaw('ADDRESS_BOOK_TABLE_ADD_ADDRESS')}\n              </Button>\n            </AddressBookButtons>\n          </Form>\n        )}\n      </Formik>\n    </AddToAddressBookPanel>\n  );\n}\n","import { FC, useState } from 'react';\n\nimport { Button } from '@mycrypto/ui';\nimport { AnyAction, bindActionCreators, Dispatch } from '@reduxjs/toolkit';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { DashboardPanel, Divider, RowDeleteOverlay, SubHeading, Tooltip } from '@components';\nimport { appReset } from '@store';\nimport { BREAK_POINTS, SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\n\nconst SettingsField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${SPACING.BASE} ${SPACING.BASE} ${SPACING.BASE};\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    display: block;\n  }\n`;\n\nconst SettingsControl = styled.div`\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-top: ${SPACING.SM};\n    width: 100%;\n  }\n`;\n\nconst SettingsButton = styled(Button)`\n  width: 125px;\n  padding: ${SPACING.SM};\n`;\n\nconst SDashboardPanel = styled(DashboardPanel)`\n  border: 1px solid ${({ theme }) => theme.colors.warning};\n`;\n\nconst DangerZone: FC<Props> = ({ appReset }) => {\n  const [confirmDelete, setConfirmDelete] = useState(false);\n\n  return (\n    <SDashboardPanel heading={translate('SETTINGS_DANGER_ZONE')}>\n      <Divider mb={SPACING.BASE} />\n      {confirmDelete ? (\n        <RowDeleteOverlay\n          prompt={translateRaw('DANGERZONE_CONFIRM')}\n          deleteText={translateRaw('SETTINGS_DB_RESET_ACTION')}\n          deleteAction={() => {\n            appReset();\n            setConfirmDelete(false);\n          }}\n          cancelAction={() => setConfirmDelete(false)}\n        />\n      ) : (\n        <SettingsField>\n          <SubHeading fontWeight=\"initial\">\n            {translate('SETTINGS_DB_RESET_LABEL')}{' '}\n            <Tooltip\n              width=\"16px\"\n              tooltip={<span>{translate('SETTINGS_DANGER_ZONE_TOOLTIP')}</span>}\n            />\n          </SubHeading>\n          <SettingsControl>\n            <SettingsButton secondary={true} onClick={() => setConfirmDelete(true)}>\n              {translate('SETTINGS_DB_RESET_ACTION')}\n            </SettingsButton>\n          </SettingsControl>\n        </SettingsField>\n      )}\n    </SDashboardPanel>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators({ appReset }, dispatch);\n\nconst connector = connect(null, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\nexport default connector(DangerZone);\n","import styled from 'styled-components';\n\nimport { AddIcon, BalanceDetailsTable, DashboardPanel, Tooltip } from '@components';\nimport { ColumnAction } from '@components/BalanceDetailsTable';\nimport { useSettings } from '@services/Store';\nimport { translateRaw } from '@translations';\nimport { Balance, Fiat, IAccount } from '@types';\nimport { useScreenSize } from '@utils';\n\nconst SIconContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst UnHideAssetButton: ColumnAction = ({ uuid }) => {\n  const { removeAssetfromExclusionList } = useSettings();\n  return (\n    <SIconContainer onClick={() => removeAssetfromExclusionList(uuid)}>\n      <Tooltip tooltip={translateRaw('UNHIDE_ASSET_TOOLTIP')}>\n        <SIconContainer>\n          <AddIcon size=\"xl\" />\n        </SIconContainer>\n      </Tooltip>\n    </SIconContainer>\n  );\n};\n\ninterface ExcludedAssetsProps {\n  balances: Balance[];\n  totalFiatValue: string;\n  fiat: Fiat;\n  accounts: IAccount[];\n  selected: string[];\n}\n\nconst ExcludedAssets = (props: ExcludedAssetsProps) => {\n  const { isMobile } = useScreenSize();\n  return (\n    <>\n      {props.balances && props.balances.length !== 0 && (\n        <DashboardPanel\n          heading={\n            <>\n              {translateRaw('EXCLUDED_ASSET_TABLE_HEADER')}{' '}\n              <Tooltip tooltip={translateRaw('EXCLUDED_ASSET_TABLE_HEADER_TOOLTIP')} />\n            </>\n          }\n          className={`ExcludedAssetTableList E`}\n        >\n          <BalanceDetailsTable\n            isMobile={isMobile}\n            {...props}\n            firstAction={(props) => <UnHideAssetButton {...props} isMobile={isMobile} />}\n          />\n        </DashboardPanel>\n      )}\n    </>\n  );\n};\n\nexport default ExcludedAssets;\n","import { FormEvent, useState } from 'react';\n\nimport { Button } from '@mycrypto/ui';\nimport { AnyAction, bindActionCreators, Dispatch } from '@reduxjs/toolkit';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { DashboardPanel, Divider, LinkApp, SubHeading, Switch, Tooltip } from '@components';\nimport { Fiats, PRIVACY_POLICY_LINK, ROUTE_PATHS } from '@config';\nimport { getEIP1559FeatureFlag, setEIP1559FeatureFlag } from '@helpers';\nimport {\n  AppState,\n  canTrackProductAnalytics,\n  getFiat,\n  setFiat,\n  setProductAnalyticsAuthorisation\n} from '@store';\nimport { BREAK_POINTS, COLORS, SPACING } from '@theme';\nimport translate from '@translations';\nimport { TFiatTicker } from '@types';\n\nconst SettingsField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${SPACING.BASE};\n  padding-top: 0;\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    display: block;\n  }\n`;\n\nconst SettingsControl = styled.div`\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-top: ${SPACING.SM};\n    width: 100%;\n    div {\n      justify-content: flex-start;\n    }\n  }\n`;\n\nconst SettingsButton = styled(Button)`\n  width: 125px;\n  padding: ${SPACING.SM};\n`;\n\nconst SelectContainer = styled.div`\n  border: 0.125em solid ${COLORS.BLUE_LIGHT};\n  border-radius: 0.125em;\n  padding: 0.6rem;\n  width: 125px;\n  select {\n    width: 100%;\n    border: none;\n    height: 2em;\n    background: none;\n  }\n`;\n\nconst GeneralSettings = ({\n  fiatCurrency,\n  setFiat,\n  canTrackProductAnalytics,\n  setProductAnalyticsAuthorisation\n}: Props) => {\n  const toggleAnalytics = () => {\n    setProductAnalyticsAuthorisation(!canTrackProductAnalytics);\n  };\n\n  const [eip1559, setEIP1559] = useState(getEIP1559FeatureFlag());\n\n  const toggleEIP1559 = () => {\n    setEIP1559(!eip1559);\n    setEIP1559FeatureFlag(!eip1559);\n  };\n\n  const changeCurrencySelection = (event: FormEvent<HTMLSelectElement>) => {\n    const target = event.target as HTMLSelectElement;\n    setFiat(target.value as TFiatTicker);\n  };\n\n  return (\n    <DashboardPanel heading={translate('SETTINGS_GENERAL_LABEL')}>\n      <Divider mb={SPACING.BASE} />\n      <SettingsField>\n        <SubHeading fontWeight=\"initial\">\n          {translate('SETTINGS_HANDLING_LABEL')}{' '}\n          <Tooltip width=\"16px\" tooltip={<span>{translate('SETTINGS_TOOLTIP')}</span>} />\n        </SubHeading>\n        <SettingsControl>\n          <LinkApp href={ROUTE_PATHS.SETTINGS_IMPORT.path}>\n            <SettingsButton secondary={true}>{translate('SETTINGS_IMPORT_LABEL')}</SettingsButton>\n          </LinkApp>\n          <LinkApp href={ROUTE_PATHS.SETTINGS_EXPORT.path} ml={SPACING.SM}>\n            <SettingsButton secondary={true}>{translate('SETTINGS_EXPORT_LABEL')}</SettingsButton>\n          </LinkApp>\n        </SettingsControl>\n      </SettingsField>\n      <SettingsField>\n        <SubHeading fontWeight=\"initial\">\n          {translate('SETTINGS_FIAT_SELECTION_LABEL')}{' '}\n          <Tooltip\n            width=\"16px\"\n            tooltip={<span>{translate('SETTINGS_FIAT_SELECTION_TOOLTIP')}</span>}\n          />\n        </SubHeading>\n        <SettingsControl>\n          <SelectContainer>\n            <select onChange={changeCurrencySelection} value={String(fiatCurrency)}>\n              {Object.keys(Fiats).map((option) => (\n                <option value={option} key={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </SelectContainer>\n        </SettingsControl>\n      </SettingsField>\n      <SettingsField>\n        <SubHeading fontWeight=\"initial\">{translate('EIP_1559_SETTINGS_HEADER')}</SubHeading>\n        <SettingsControl>\n          <Switch\n            id=\"toggle-eip1559\"\n            $greyable={true}\n            checked={getEIP1559FeatureFlag()}\n            onChange={toggleEIP1559}\n            labelLeft=\"OFF\"\n            labelRight=\"ON\"\n          />\n        </SettingsControl>\n      </SettingsField>\n      <SettingsField>\n        <SubHeading fontWeight=\"initial\">\n          {translate('SETTINGS_PRODUCT_ANALYTICS')}{' '}\n          <Tooltip\n            width=\"16px\"\n            tooltip={\n              <span>\n                {translate('SETTINGS_PRODUCT_ANALYTICS_TOOLTIP', { $link: PRIVACY_POLICY_LINK })}\n              </span>\n            }\n          />\n        </SubHeading>\n        <SettingsControl>\n          <Switch\n            id=\"toggle-analytics\"\n            $greyable={true}\n            checked={canTrackProductAnalytics}\n            onChange={toggleAnalytics}\n            labelLeft=\"OFF\"\n            labelRight=\"ON\"\n          />\n        </SettingsControl>\n      </SettingsField>\n    </DashboardPanel>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  fiatCurrency: getFiat(state),\n  canTrackProductAnalytics: canTrackProductAnalytics(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      setFiat,\n      setProductAnalyticsAuthorisation\n    },\n    dispatch\n  );\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nexport default connector(GeneralSettings);\n","import { FC } from 'react';\n\nimport { Box, CollapsibleTable, DashboardPanel, Icon, LinkApp, Network, Text } from '@components';\nimport NetworkNodeDropdown from '@components/NetworkNodeDropdown';\nimport { useFeatureFlags } from '@services';\nimport { COLORS, SPACING } from '@theme';\nimport { translateRaw } from '@translations';\nimport { CustomNodeConfig, Network as INetwork, NetworkId } from '@types';\nimport useScreenSize from '@utils/useScreenSize';\n\ninterface Props {\n  networks: INetwork[];\n  toggleFlipped(networkId: NetworkId, node?: CustomNodeConfig): void;\n  toggleNetworkCreation(): void;\n}\n\nconst NetworkNodes: FC<Props> = ({ networks, toggleFlipped, toggleNetworkCreation }) => {\n  const { featureFlags } = useFeatureFlags();\n  const { isXsScreen } = useScreenSize();\n\n  const networkNodesTable = {\n    head: [\n      translateRaw('CUSTOM_NODE_SETTINGS_TABLE_NETWORK_HEADER'),\n      translateRaw('CUSTOM_NODE_SETTINGS_TABLE_NETWORK_NODE')\n    ],\n    body: networks.map(({ id, name, color = COLORS.LIGHT_PURPLE }: INetwork, index) => [\n      <Network key={index} color={color}>\n        {name}\n      </Network>,\n      <NetworkNodeDropdown\n        key={index}\n        networkId={id}\n        onEdit={(node: CustomNodeConfig) => toggleFlipped(id, node)}\n      />\n    ]),\n    config: {\n      primaryColumn: translateRaw('CUSTOM_NODE_SETTINGS_TABLE_NETWORK_HEADER'),\n      sortableColumn: translateRaw('CUSTOM_NODE_SETTINGS_TABLE_NETWORK_HEADER'),\n      sortFunction: () => (a: any, b: any) => {\n        const aLabel = a.props.label;\n        const bLabel = b.props.label;\n        return aLabel === bLabel ? true : aLabel.localeCompare(bLabel);\n      }\n    }\n  };\n  return (\n    <DashboardPanel\n      heading={isXsScreen ? <>{translateRaw('NETWORK_AND_NODES')}</> : null}\n      headingRight={\n        featureFlags.CUSTOM_NETWORKS ? (\n          <LinkApp href=\"#\" onClick={toggleNetworkCreation}>\n            <Box variant=\"rowAlign\">\n              <Icon type=\"add-bold\" width=\"16px\" />\n              <Text ml={SPACING.XS} mb={0} color=\"BLUE_BRIGHT\">\n                {translateRaw('ADD_NETWORK')}\n              </Text>\n            </Box>\n          </LinkApp>\n        ) : undefined\n      }\n    >\n      <CollapsibleTable breakpoint={450} {...networkNodesTable} />\n    </DashboardPanel>\n  );\n};\n\nexport default NetworkNodes;\n","import { FC, useCallback } from 'react';\n\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { OptionProps } from 'react-select';\nimport styled from 'styled-components';\n\nimport addIcon from '@assets/images/icn-add.svg';\nimport editIcon from '@assets/images/icn-edit.svg';\nimport { Selector, Typography } from '@components/index';\nimport { NetworkUtils, useNetworks } from '@services/Store';\nimport { AppState, selectNetwork } from '@store';\nimport { COLORS, SPACING } from '@theme';\nimport { translateRaw } from '@translations';\nimport { CustomNodeConfig, NetworkId, NodeOptions } from '@types';\n\nconst SContainer = styled.div<StyleProps>`\n  display: flex;\n  flex-direction: row;\n  padding: ${SPACING.SM};\n  ${({ paddingLeft }) => paddingLeft && `padding-left: ${paddingLeft};`}\n`;\n\ninterface StyleProps {\n  paddingLeft?: string;\n}\n\nconst SContainerValue = styled(SContainer)<StyleProps>`\n  padding: ${SPACING.XS} ${SPACING.XS} ${SPACING.XS} 0px;\n  ${({ paddingLeft }) => paddingLeft && `padding-left: ${paddingLeft};`}\n  > img {\n    position: absolute;\n    right: ${SPACING.SM};\n  }\n`;\n\nconst SContainerOption = styled(SContainer)`\n  display: flex;\n  position: relative;\n  align-content: center;\n  color: ${COLORS.BLUE_BRIGHT};\n`;\n\nconst EditIcon = styled.img`\n  cursor: pointer;\n  padding: ${SPACING.XS} ${SPACING.SM};\n  &:hover {\n    transition: 200ms ease all;\n    opacity: 0.7;\n  }\n`;\n\nconst AddIcon = styled.img`\n  display: flex;\n  align-self: center;\n  height: 12px;\n  width: 12px;\n  margin-right: ${SPACING.XS};\n`;\n\nconst newNode = 'NEW_NODE';\n\ntype NetworkNodeOptionProps = OptionProps<CustomNodeConfig, false> & {\n  isEditEnabled: boolean;\n};\n\nconst NetworkNodeOption: FC<NetworkNodeOptionProps> = ({ data, label, selectOption }) => {\n  const handleSelect = (d: CustomNodeConfig) => selectOption && selectOption(d);\n\n  if (label !== newNode) {\n    return (\n      <SContainerValue\n        paddingLeft={SPACING.SM}\n        data-testid={`node-selector-option-${data.service}`}\n        onClick={() => handleSelect(data)}\n      >\n        <Typography value={label} />\n      </SContainerValue>\n    );\n  } else {\n    return (\n      <SContainerOption\n        paddingLeft={SPACING.SM}\n        data-testid=\"node-selector-option-custom\"\n        onClick={() => handleSelect(data)}\n      >\n        <AddIcon src={addIcon} />\n        {translateRaw('CUSTOM_NODE_DROPDOWN_NEW_NODE')}\n      </SContainerOption>\n    );\n  }\n};\n\ninterface OwnProps {\n  networkId: NetworkId;\n  onEdit?(node?: CustomNodeConfig): void;\n}\n\nconst NetworkNodeDropdown: FC<Props> = ({ networkId, network, onEdit }) => {\n  const { setNetworkSelectedNode } = useNetworks();\n\n  const onChange = useCallback(\n    (node: NodeOptions) => {\n      if (!isEmpty(node) && node.service !== newNode) {\n        const { name } = node;\n        setNetworkSelectedNode(networkId, name);\n      } else if (onEdit) {\n        onEdit();\n      }\n    },\n    [networkId, setNetworkSelectedNode]\n  );\n\n  const { nodes } = network;\n  const autoNode = {\n    service: translateRaw('AUTO_NODE')\n  };\n  const selectedNode = NetworkUtils.getSelectedNode(network) ?? autoNode;\n  const displayNodes = [autoNode, ...nodes, ...(isFunction(onEdit) ? [{ service: newNode }] : [])];\n\n  return (\n    <Selector<NodeOptions & any>\n      value={selectedNode}\n      options={displayNodes}\n      getOptionLabel={(n) => n.service}\n      placeholder={'Auto'}\n      searchable={true}\n      onChange={(option) => onChange(option)}\n      optionComponent={NetworkNodeOption}\n      valueComponent={({ value }) => (\n        <SContainerValue>\n          <Typography value={value.service} />\n          {isFunction(onEdit) && value.isCustom && (\n            <EditIcon onClick={() => onEdit(value)} src={editIcon} />\n          )}\n        </SContainerValue>\n      )}\n    />\n  );\n};\n\nconst mapStateToProps = (state: AppState, ownProps: OwnProps) => {\n  const { networkId } = ownProps;\n  return {\n    network: selectNetwork(networkId)(state)\n  };\n};\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport default connector(NetworkNodeDropdown);\n","export default __webpack_public_path__ + \"src/assets/icn-add.21e830c630dd3317d165883bc2051ea4.svg\";","export default __webpack_public_path__ + \"src/assets/icn-edit.a701a87c144f92a8962b1e849266070e.svg\";"],"sourceRoot":""}