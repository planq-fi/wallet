{"version":3,"sources":["webpack:///./src/features/BuyAssets/BuyAssetsForm.tsx"],"names":["styled","fieldset","SPACING","LG","label","FONT_SIZE","BASE","SM","Button","COLORS","BLUE_MYC","div","GREY","Icon","XS","SubmissionType","BuyAssetsForm","history","useHistory","assets","useSelector","getStoreAccounts","useAssets","ethAsset","getAssetByUUID","PLQUUID","goBack","getDefaultAccount","object","shape","account","required","translateRaw","asset","filter","uuid","MOONPAY_ASSET_UUIDS","includes","push","ROUTE_PATHS","DASHBOARD","path","ContentPanel","onBack","backBtnText","heading","InlineMessage","className"],"mappings":"yKAAA,I,EAAA,QAEA,GADA,OACA,OACA,G,EAAA,O,2BACA,SAEA,QAOA,QASA,GAFA,QACA,OACA,QACA,QACA,OACA,E,4bAAA,O,GACA,MACA,K,qIAEsBA,UAAOC,SAAV,+EAAGD,CAAH,uBACAE,UAAQC,IAGJH,UAAOI,MAAV,gFAAGJ,CAAH,oGAELK,YAAUC,KACNJ,UAAQK,KAMG,aAAOC,UAAV,uFAAG,CAAH,wFAGRN,UAAQI,KAEHG,SAAOC,UAILV,UAAOW,IAAV,mFAAGX,CAAH,qEACZS,SAAOG,KACCV,UAAQK,KAKP,aAAOM,QAAV,6EAAG,CAAH,2DACCX,UAAQY,GAIbL,SAAOG,M,IASfG,G,SAAAA,O,+BAAAA,I,kCAAAA,M,KAKE,MAAMC,EAAgB,KAC3B,MAAMC,GAAU,IAAAC,eAEV,OAAEC,KADS,IAAAC,aAAYC,qBACV,IAAAC,cACbC,GAAW,IAAAC,gBAAeL,EAAf,CAAuBM,WAmClCC,IAlCiB,IAAAN,cAAY,IAAAO,oBAAkB,KAO/B,IAAAC,UAASC,MAAM,CACnCC,SAAS,IAAAF,UAASG,UAAS,IAAAC,cAAa,aACxCC,OAAO,IAAAL,UAASG,UAAS,IAAAC,cAAa,eAGjBb,EAAOe,OAAO,EAAGC,UAAWC,sBAAoBC,SAASF,IAsBjE,IAAMlB,EAAQqB,KAAKC,cAAYC,UAAUC,OACxD,OAAS,SAAC,EAAAC,aAAD,CACPC,OAAQjB,EACRkB,aAAa,IAAAZ,cAAa,aAC1Ba,SAAS,IAAAb,cAAa,+BAHf,UAKP,SAAC,EAAAc,cAAD,CAAeC,UAAU,iBAAzB,4B,wBAwFW/B,E","file":"BuyAssetsForm.76e2059afb279582666b.js","sourcesContent":["import { Button, Icon } from '@mycrypto/ui';\nimport { Field, FieldProps, Form, Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { object } from 'yup';\n\nimport {\n  AccountSelector,\n  AssetSelector,\n  BusyBottom,\n  ContentPanel,\n  InlineMessage\n} from '@components';\nimport {\n  BUY_MYCRYPTO_WEBSITE,\n  PLQUUID,\n  MOONPAY_API_QUERYSTRING,\n  MOONPAY_ASSET_UUIDS,\n  ROUTE_PATHS\n} from '@config';\nimport { MoonpaySignerService } from '@services/ApiService/MoonpaySigner';\nimport { isAccountInNetwork } from '@services/Store/Account/helpers';\nimport { getAssetByUUID, useAssets } from '@services/Store/Asset';\nimport { getDefaultAccount, getStoreAccounts, useSelector } from '@store';\nimport { COLORS, FONT_SIZE, SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport { Asset, BusyBottomConfig, IAccount, StoreAccount, TURL } from '@types';\nimport { openLink } from '@utils';\n\nconst FormFieldItem = styled.fieldset`\n  margin-bottom: ${SPACING.LG};\n`;\n\nconst FormFieldLabel = styled.label`\n  display: flex;\n  font-size: ${FONT_SIZE.BASE};\n  margin-bottom: ${SPACING.SM};\n  font-weight: 400;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst FormFieldSubmitButton = styled(Button)`\n  width: 100%;\n  display: inline-block;\n  margin-bottom: ${SPACING.BASE};\n  &:disabled {\n    background-color: ${COLORS.BLUE_MYC};\n  }\n`;\n\nconst NavigationWarning = styled.div`\n  color: ${COLORS.GREY};\n  margin-bottom: ${SPACING.SM};\n  display: flex;\n  justify-content: center;\n`;\n\nconst WarningIcon = styled(Icon)`\n  margin-right: ${SPACING.XS};\n  vertical-align: middle;\n\n  svg {\n    color: ${COLORS.GREY};\n  }\n`;\n\ninterface IBuyFormState {\n  account: StoreAccount;\n  asset: Asset;\n}\n\nenum SubmissionType {\n  SEND_TO_SELF,\n  SEND_TO_OTHER\n}\n\nexport const BuyAssetsForm = () => {\n  const history = useHistory();\n  const accounts = useSelector(getStoreAccounts);\n  const { assets } = useAssets();\n  const ethAsset = getAssetByUUID(assets)(PLQUUID) as Asset;\n  const defaultAccount = useSelector(getDefaultAccount(true));\n\n  const initialFormikValues: IBuyFormState = {\n    account: defaultAccount!,\n    asset: ethAsset\n  };\n\n  const BuyFormSchema = object().shape({\n    account: object().required(translateRaw('REQUIRED')),\n    asset: object().required(translateRaw('REQUIRED'))\n  });\n\n  const filteredAssets = assets.filter(({ uuid }) => MOONPAY_ASSET_UUIDS.includes(uuid));\n\n  const handleSubmission = (values: IBuyFormState, typeOfSubmission: SubmissionType) => {\n    if (typeOfSubmission === SubmissionType.SEND_TO_SELF) {\n      const urlQuery = `${MOONPAY_API_QUERYSTRING}&currencyCode=${values.asset.ticker}&walletAddress=${values.account.address}`;\n\n      MoonpaySignerService.instance\n        .signUrlQuery(urlQuery)\n        .then((signature: any) => {\n          const redirectQueryParams = `?currencyCode=${values.asset.ticker}&walletAddress=${\n            values.account.address\n          }&signature=${encodeURIComponent(signature)}`;\n          openLink(`${BUY_MYCRYPTO_WEBSITE}${redirectQueryParams}` as TURL);\n        })\n        .catch(() => {\n          openLink(BUY_MYCRYPTO_WEBSITE);\n        });\n    } else {\n      openLink(BUY_MYCRYPTO_WEBSITE);\n    }\n  };\n\n  const goBack = () => history.push(ROUTE_PATHS.DASHBOARD.path);\n  return ( <ContentPanel\n    onBack={goBack}\n    backBtnText={translateRaw('DASHBOARD')}\n    heading={translateRaw('DASHBOARD_ACTIONS_BUY_TITLE')}\n  >\n    <InlineMessage className=\"SendAssetsForm\">Coming soon</InlineMessage>\n  </ContentPanel>);\n  return (\n    <ContentPanel\n      onBack={goBack}\n      backBtnText={translateRaw('DASHBOARD')}\n      heading={translateRaw('DASHBOARD_ACTIONS_BUY_TITLE')}\n    >\n      <Formik\n        initialValues={initialFormikValues}\n        validationSchema={BuyFormSchema}\n        onSubmit={(vals) => handleSubmission(vals, SubmissionType.SEND_TO_SELF)}\n      >\n        {({ values, errors, touched, setFieldValue }) => {\n          const relevantAccounts = accounts.filter((account) => {\n            return values.asset && values.asset.networkId\n              ? isAccountInNetwork(account, values.asset.networkId)\n              : true;\n          });\n\n          return (\n            <Form>\n              <FormFieldItem>\n                <FormFieldLabel htmlFor=\"account\">{translate('X_RECIPIENT')}</FormFieldLabel>\n                <Field\n                  name=\"account\"\n                  value={values.account}\n                  component={({ field }: FieldProps) => (\n                    <AccountSelector\n                      name={field.name}\n                      value={field.value}\n                      accounts={relevantAccounts}\n                      onSelect={(option: IAccount) => {\n                        setFieldValue('account', option); //if this gets deleted, it no longer shows as selected on interface, would like to set only object keys that are needed instead of full object\n                      }}\n                    />\n                  )}\n                />\n                {errors && errors.account && touched && touched.account && (\n                  <InlineMessage className=\"SendAssetsForm-errors\">{errors.asset}</InlineMessage>\n                )}\n              </FormFieldItem>\n              <FormFieldItem>\n                <FormFieldLabel htmlFor=\"asset\">\n                  {translate('SEND_ASSETS_ASSET_SELECTION_PLACEHOLDER')}\n                </FormFieldLabel>\n                <Field\n                  name=\"asset\"\n                  value={values.asset}\n                  component={({ field, form }: FieldProps) => (\n                    <AssetSelector\n                      selectedAsset={field.value}\n                      assets={filteredAssets}\n                      onSelect={(option: Asset) => {\n                        form.setFieldValue('asset', option || {}); //if this gets deleted, it no longer shows as selected on interface (find way to not need this)\n                      }}\n                    />\n                  )}\n                />\n                {errors && errors.asset && touched && touched.asset && (\n                  <InlineMessage className=\"SendAssetsForm-errors\">{errors.asset}</InlineMessage>\n                )}\n              </FormFieldItem>\n              <NavigationWarning>\n                <WarningIcon icon=\"warning\" />\n                {translateRaw('EXTERNAL_NAVIGATION_WARNING')}\n              </NavigationWarning>\n              <FormFieldSubmitButton\n                onClick={() => handleSubmission(values, SubmissionType.SEND_TO_SELF)}\n              >\n                {translateRaw('CHECKOUT_CTA')}\n              </FormFieldSubmitButton>\n\n              <FormFieldSubmitButton\n                secondary={true}\n                onClick={() => handleSubmission(values, SubmissionType.SEND_TO_OTHER)}\n              >\n                {translateRaw('CHECKOUT_OTHER_CTA')}\n              </FormFieldSubmitButton>\n            </Form>\n          );\n        }}\n      </Formik>\n      <BusyBottom type={BusyBottomConfig.SUPPORT} />\n    </ContentPanel>\n  );\n};\n\nexport default BuyAssetsForm;\n"],"sourceRoot":""}