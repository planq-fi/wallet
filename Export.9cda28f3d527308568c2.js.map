{"version":3,"sources":["webpack:///./src/features/Settings/Export/Export.tsx"],"names":["CodeBlock","styled","code","Export","props","history","appState","isMobile","useScreenSize","track","useAnalytics","updateUserAction","findUserAction","useUserActions","backupAction","ACTION_NAME","BACKUP","ContentPanel","width","onBack","goBack","heading","translateRaw","Box","variant","Typography","data-testid","InlineMessage","type","InlineMessageType","INFO_CIRCLE","Downloader","fileName","getExportFileName","getCurrentDBConfig","Date","data","onClick","action","uuid","state","ACTION_STATE","COMPLETED","connector","connect","JSON","stringify","exportState","withRouter"],"mappings":"oKAAA,I,EAAA,QACA,QACA,QACA,G,EAAA,O,2BAEA,QACA,SACA,QACA,QACA,QACA,E,4bAAA,OACA,QACA,O,6zBAEA,MAAMA,EAAYC,UAAOC,KAAV,uEAAGD,CAAH,4CAMR,SAASE,EAAOC,GACrB,MAAM,QAAEC,EAAF,SAAWC,GAAaF,GAExB,SAAEG,IAAa,IAAAC,kBACf,MAAEC,IAAU,IAAAC,iBAEZ,iBAAEC,EAAF,eAAoBC,IAAmB,IAAAC,kBAEvCC,EAAeF,EAAeG,cAAYC,QAEhD,OACE,SAAC,EAAAC,aAAD,CAAcC,MAAO,IAAKC,OATb,KAAM,IAAAC,QAAOf,GASgBgB,SAAS,IAAAC,cAAa,2BAAhE,UACE,UAAC,EAAAC,IAAD,CAAKC,QAAQ,cAAb,WACE,SAAC,EAAAC,WAAD,WAAa,aAAU,2BACvB,SAACzB,EAAD,CAAW0B,cAAY,sBAAvB,SAA8CpB,IAC7CC,IACC,UAAC,EAAAoB,cAAD,CAAeC,KAAMC,oBAAkBC,YAAvC,WACG,IAAAR,cAAa,wBAAyB,QAG3C,SAAC,EAAAS,WAAD,CACEC,UAAU,IAAAC,oBAAkB,IAAAC,sBAAsB,IAAIC,MACtDC,KAAM9B,EACN+B,QAAS,KACP5B,EAAM,CAAE6B,OAAQ,oBACZxB,GACFH,EAAiBG,EAAayB,KAAd,OACXzB,GADW,IAEd0B,MAAOC,eAAaC,qBAUpC,MAIMC,GAAY,IAAAC,SAJOJ,IAAD,CACtBlC,SAAUuC,KAAKC,WAAU,IAAAC,aAAYP,O,OAMxB,IAAAQ,YAAWL,EAAUxC,I","file":"Export.9cda28f3d527308568c2.js","sourcesContent":["import { Typography } from '@mycrypto/ui';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Box, ContentPanel, Downloader, InlineMessage } from '@components';\nimport { getCurrentDBConfig, getExportFileName } from '@database';\nimport { useAnalytics } from '@services';\nimport { useUserActions } from '@services/Store';\nimport { AppState, exportState } from '@store';\nimport translate, { translateRaw } from '@translations';\nimport { ACTION_NAME, ACTION_STATE, InlineMessageType } from '@types';\nimport { goBack, useScreenSize } from '@utils';\n\nconst CodeBlock = styled.code`\n  overflow: auto;\n  width: 100%;\n  height: 30rem;\n`;\n\nexport function Export(props: Props) {\n  const { history, appState } = props;\n  const onBack = () => goBack(history);\n  const { isMobile } = useScreenSize();\n  const { track } = useAnalytics();\n\n  const { updateUserAction, findUserAction } = useUserActions();\n\n  const backupAction = findUserAction(ACTION_NAME.BACKUP);\n\n  return (\n    <ContentPanel width={560} onBack={onBack} heading={translateRaw('SETTINGS_EXPORT_HEADING')}>\n      <Box variant=\"columnAlign\">\n        <Typography>{translate('SETTINGS_EXPORT_INFO')}</Typography>\n        <CodeBlock data-testid=\"export-json-display\">{appState}</CodeBlock>\n        {isMobile && (\n          <InlineMessage type={InlineMessageType.INFO_CIRCLE}>\n            {translateRaw('EXPORT_MOBILE_NOTICE')}{' '}\n          </InlineMessage>\n        )}\n        <Downloader\n          fileName={getExportFileName(getCurrentDBConfig(), new Date())}\n          data={appState}\n          onClick={() => {\n            track({ action: 'Export AppState' });\n            if (backupAction) {\n              updateUserAction(backupAction.uuid, {\n                ...backupAction,\n                state: ACTION_STATE.COMPLETED\n              });\n            }\n          }}\n        />\n      </Box>\n    </ContentPanel>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  appState: JSON.stringify(exportState(state))\n});\n\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector> & RouteComponentProps;\n\nexport default withRouter(connector(Export));\n"],"sourceRoot":""}