{"version":3,"sources":["webpack:///./src/features/InteractWithContracts/InteractWithContractsFlow.tsx","webpack:///./src/features/InteractWithContracts/helpers.ts","webpack:///./src/features/InteractWithContracts/components/fields/FieldLabel.tsx","webpack:///./src/features/InteractWithContracts/constants.ts","webpack:///./src/features/InteractWithContracts/components/index.ts","webpack:///./src/features/InteractWithContracts/components/Interact.tsx","webpack:///./src/features/InteractWithContracts/utils.ts","webpack:///./src/features/InteractWithContracts/components/GeneratedInteractionForm.tsx","webpack:///./src/features/InteractWithContracts/types.ts","webpack:///./src/features/InteractWithContracts/components/fields/index.ts","webpack:///./src/features/InteractWithContracts/components/fields/BooleanOutputField.tsx","webpack:///./src/assets/images/checkmark_outline.svg","webpack:///./src/assets/images/cross_outline.svg","webpack:///./src/features/InteractWithContracts/components/fields/BooleanSelector.tsx","webpack:///./src/features/InteractWithContracts/components/FunctionDropdownItem.tsx","webpack:///./src/features/InteractWithContracts/components/WriteForm.tsx","webpack:///./src/features/InteractWithContracts/components/InteractionReceipt.tsx","webpack:///./src/features/InteractWithContracts/components/InteractionConfirm.tsx","webpack:///./src/features/InteractWithContracts/stateFactory.tsx"],"names":["SCREEN_XS","BREAK_POINTS","Heading","styled","div","TabsWrapper","step","setStep","useState","networks","useNetworks","defaultAccount","useSelector","getDefaultAccount","initialState","interactWithContractsInitialState","account","network","getNetworkById","DEFAULT_NETWORK","interactWithContractsState","handleNetworkSelected","handleContractSelected","handleContractAddressChanged","handleAddressOrDomainChanged","handleAbiChanged","handleCustomContractNameChanged","updateNetworkContractOptions","displayGeneratedForm","handleInteractionFormSubmit","handleInteractionFormWriteSubmit","handleAccountSelected","handleTxSigned","handleSaveContractSubmit","handleGasSelectorChange","handleGasLimitChange","handleNonceChange","handleDeleteContract","useStateReducer","InteractWithContractsFactory","history","useHistory","location","useLocation","goToNextStep","tabClickRedirect","url","push","tabs","title","translateRaw","path","ROUTE_PATHS","INTERACT_WITH_CONTRACTS","onClick","DEPLOY_CONTRACTS","currentRoute","find","tab","pathname","steps","component","Interact","props","actions","payload","InteractionConfirm","txConfig","WALLET_STEPS","wallet","senderAccount","rawTransaction","onSuccess","InteractionReceipt","txReceipt","goToFirstStep","stepObject","StepComponent","stepProps","stepActions","ExtendedContentPanel","onBack","DASHBOARD","stepper","current","total","length","width","heading","Tabs","selectedIndex","findIndex","abiFunction","stateMutability","StateMutabilityType","PURE","VIEW","constant","PAYABLE","payable","tempFunction","inputs","forEach","input","index","displayName","name","toString","outputs","output","payAmount","outputValues","outputValue","Buffer","isBuffer","bufferToHex","value","pAbi","filter","x","type","ABIItemType","FUNCTION","item","toLowerCase","map","label","reduceInputParams","submitedFunction","reduce","accu","inputValue","every","includes","JSON","parse","contractAddress","currentFunction","encodeInput","AbiFunction","data","from","address","to","inputValueToHex","fieldName","fieldType","isOutput","Wrapper","LabelWraper","GREY","COLORS","Typography","customContract","networkId","abi","BLUE_BRIGHT","WHITE","BLUE_LIGHT","SCREEN_SM","NetworkSelectorWrapper","ContractSelectionWrapper","FieldWrapper","Label","InputWrapper","ButtonWrapper","SaveContractWrapper","SaveButtonWrapper","ErrorWrapper","ContractSelectLabelWrapper","DeleteLabel","FormSchema","object","shape","string","test","isValidETHAddress","isValidENSName","required","withRouter","contract","contracts","showGeneratedForm","customContractName","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","error","setError","undefined","isResolvingName","setIsResolvingDomain","areFieldsPopulatedFromUrl","setAreFieldsPopulatedFromUrl","wasAbiEditedManually","setWasAbiEditedManually","wasContractInteracted","setWasContractInteracted","interactionDataFromURL","setInteractionDataFromURL","networkIdFromUrl","addressFromUrl","functionFromUrl","inputsFromUrl","getParsedQueryString","search","networkAndAddressMatchURL","id","isSameAddress","useEffect","submitInteract","functionName","saveContract","e","message","tryAbiParse","customEditingMode","CUSTOM_CONTRACT_ADDRESS","Formik","initialValues","display","validationSchema","onSubmit","values","errors","touched","setFieldValue","setFieldError","setFieldTouched","resetForm","NetworkSelector","onChange","htmlFor","className","isCustom","uuid","ContractLookupField","onSelect","option","InputField","LinkApp","href","getKBHelpArticle","KB_HELP_ARTICLE","WHAT_IS_CONTRACT_ABI","isExternal","Icon","placeholder","target","textarea","resizableTextArea","height","maxHeight","disabled","Button","color","large","secondary","InlineMessage","fullwidth","queryString","function","Array","isArray","i","substr","indexOf","isLoading","setIsLoading","setCurrentFunction","gasCallProps","setGasCallProps","isFormFilledFromURL","setIsFormFilledFromURL","functions","getFunctionsFromABI","updateGasCallProps","constructGasCallProps","handleFunctionSelected","selectedFunction","newFunction","generateFunctionFieldsDisplayNames","isReadOperation","submitFormRead","handleInputChange","updatedFunction","Object","assign","inputIndexToChange","async","functionWithOutputValues","setFunctionOutputValues","reason","isRead","functionNameFromURL","inputsFromURL","functionFromURL","inputFromURL","HorizontalLine","DropdownWrapper","Selector","options","optionComponent","selectOption","paddingLeft","SPACING","SM","valueComponent","searchable","FormFieldsWrapper","field","BooleanSelector","fieldDisplayName","FieldLabel","validate","BooleanOutputField","fieldValue","ActionWrapper","ActionButton","WriteFormWrapper","isPayable","handleSubmit","estimateGasCallProps","SpinnerWrapper","Spinner","size","ErrorMessage","$error","GREY_LIGHTER","monospace","XS","ABIFieldType","isTrue","src","checkmark","cross","LabelWrapper","img","o","ContractDropdownItem","style","padding","OptionWrapper","isSelectable","Sticker","toUpperCase","SUCCESS_GREEN","WriteActionWrapper","AccountSelectorWrapper","CustomLabel","WriteForm","isDemoMode","accounts","getStoreAccounts","filteredAccounts","pipe","a","getAccountsByNetwork","getAccountsByViewOnly","DemoGatewayBanner","AccountSelector","GasSelector","setGasPrice","setGasLimit","setNonce","connect","state","getIsDemoMode","connector","rest","TxReceipt","completeButton","resetFlow","onComplete","ConfirmTransaction","txType","ITxType","CONTRACT_INTERACT","addressOrDomainInput","resolvingDomain","setState","getContractsByNetwork","createContract","deleteContract","useContracts","addTxToAccount","useAccounts","ethNetwork","prevState","contractAbi","debouncedResolveAddressFromDomain","useCallback","resolveAddressFromDomain","provider","ProviderHandler","resolvedAddress","resolveName","domain","CREATION_ADDRESS","selectExistingContract","fetchABI","existingContract","c","fetchedAbi","EtherscanService","instance","getContractAbi","getIsValidENSAddressFunction","chainId","Error","visible","decodeOutput","parsedInputs","providerHandler","call","submittedFunction","after","makeTxFromForm","unusedGasLimit","transaction","getGasEstimate","tx","inputGasLimitToHex","makeBasicTxConfig","signResponse","isWeb3Wallet","hash","toTxReceipt","ITxStatus","PENDING","receiverAddress","amount","sendRawTx","then","retrievedTxReceipt","catch","txHash","pendingTxReceipt","makePendingTxReceipt","finally","contractUuid"],"mappings":"0JAAA,WAEA,QACA,UAEA,QACA,QACA,QACA,QACA,OACA,OAEA,OAEA,UACA,aACA,U,ivBAGA,MAAM,UAAEA,GAAcC,eAahBC,EAAUC,UAAOC,IAAV,qFAAGD,CAAH,mKAOUH,GAMjBK,EAAcF,UAAOC,IAAV,yFAAGD,CAAH,uC,MAKiB,KAChC,MAAOG,EAAMC,IAAW,IAAAC,UAAS,IAC3B,SAAEC,IAAa,IAAAC,eACfC,GAAiB,IAAAC,cAAY,IAAAC,sBAC7BC,EAAe,EAAH,KACbC,qCADa,IAEhBC,QAASL,EACTM,SAAS,IAAAC,gBAAeC,kBAAiBV,MAErC,2BACJW,EADI,sBAEJC,EAFI,uBAGJC,EAHI,6BAIJC,EAJI,6BAKJC,EALI,iBAMJC,EANI,gCAOJC,EAPI,6BAQJC,EARI,qBASJC,EATI,4BAUJC,EAVI,iCAWJC,EAXI,sBAYJC,EAZI,eAaJC,EAbI,yBAcJC,EAdI,wBAeJC,EAfI,qBAgBJC,EAhBI,kBAiBJC,EAjBI,qBAkBJC,IACE,IAAAC,iBAAgBC,+BAA8BzB,IAE5C,QAAEE,GAAuCI,EACzCoB,GAAU,IAAAC,cACVC,GAAW,IAAAC,eAMXC,EAAe,KACnBrC,EAAQD,EAAO,IAWXuC,EAAoBC,IACxBN,EAAQO,KAAKD,IAGTE,EAAsB,CAC1B,CACEC,OAAO,IAAAC,cAAa,sBACpBC,KAAMC,cAAYC,wBAAwBF,KAC1CG,QAAS,IAAMT,EAAiBO,cAAYC,wBAAwBF,OAEtE,CACEF,OAAO,IAAAC,cAAa,oBACpBC,KAAMC,cAAYG,iBAAiBJ,KACnCG,QAAS,IAAMT,EAAiBO,cAAYG,iBAAiBJ,QAI3DK,EAAeR,EAAKS,KAAMC,GAAQA,EAAIP,OAAST,EAASiB,UAExDC,EAAiB,CACrB,CACEX,OAAO,IAAAC,cAAa,sBACpBW,UAAWC,WACXC,MAAO3C,EACP4C,QAAS,CACP3C,wBACAC,yBACAC,+BACAC,+BACAC,mBACAC,kCACAC,+BACAC,uBACAC,8BACAI,2BACAH,iCAAmCmC,GACjCnC,EAAiCmC,EAASrB,GAC5Cb,wBACAG,0BACAG,uBACAF,uBACAC,sBAGJ,CACEa,OAAO,IAAAC,cAAa,0BACpBW,UAAWK,UACXH,MAAO,GAAII,eAAH,CAAqBA,aAAtB,CAAmC/C,GAC1C4C,QAAS,CAAEpB,iBAEb,CACEK,OAAO,IAAAC,cAAa,uBACpBW,UAAW7C,GAAWoD,eAAapD,EAAQqD,QAC3CN,MAAO,GAAII,eAAH,CACNlD,QAASD,GAAWA,EAAQC,QAC5BqD,cAAetD,EACfuD,eAAc,MAAEJ,OAAF,EAAEA,EAAUI,iBAHrB,CAIHnD,GACJ4C,QAAS,CACPQ,UAAYP,GAAoCjC,EAAeiC,EAASrB,KAG5E,CACEK,OAAO,IAAAC,cAAa,oBACpBW,UAAWY,qBACXV,MAAO,GAAII,WAAUO,gBAAb,CAAgCP,WAAUO,cAA3C,CAAyDtD,GAChE4C,QAAS,CAAEW,cAlFO,KACpBpE,EAAQ,OAqFJqE,EAAahB,EAAMtD,GACnBuE,EAAgBD,EAAWf,UAC3BiB,EAAYF,EAAWb,MACvBgB,EAAcH,EAAWZ,QAE/B,OACE,SAAC,EAAAgB,qBAAD,CACEC,OArFqB,KACV,IAAT3E,EACFkC,EAAQO,KAAKK,cAAY8B,UAAU/B,MAEnC5C,EAAQD,EAAO,IAkFf6E,QAAS,CAAEC,QAAS9E,EAAO,EAAG+E,MAAOzB,EAAM0B,QAC3CC,MAAM,QACNC,SACE,UAACtF,EAAD,WACG0E,EAAW3B,OACZ,SAAC5C,EAAD,WACE,SAAC,EAAAoF,KAAD,CACEzC,KAAMA,EACN0C,cAAe1C,EAAK2C,UAAWjC,GAAQA,EAAIP,OAASK,EAAcL,aAV5E,UAgBE,SAAC0B,EAAD,OAAmBC,GAAeC,O,mRChMxC,YACA,aACA,YAEA,UAEA,OAEA,U,4vBAEgCa,IAC9B,MAAM,gBAAEC,GAAoBD,EAE5B,OAAIC,EAEAA,IAAoBC,sBAAoBC,MAAQF,IAAoBC,sBAAoBE,OAGjFJ,EAAYK,U,YAICL,IACxB,MAAM,gBAAEC,GAAoBD,EAC5B,OAAOC,EAAkBA,IAAoBC,sBAAoBI,UAAYN,EAAYO,S,qCAGxCP,IACjD,MAAMQ,GAAe,aAAUR,GA6B/B,OA3BAQ,EAAaC,OAAOC,QAAQ,CAACC,EAAOC,KAC9BD,EAAME,cAIS,KAAfF,EAAMG,MACRH,EAAMG,KAAOF,EAAMG,WACnBJ,EAAME,YAAe,SAAQD,GAE7BD,EAAME,YAAcF,EAAMG,QAI9BN,EAAaQ,QAAQN,QAAQ,CAACO,EAAQL,KAChCK,EAAOJ,cAIS,KAAhBI,EAAOH,MACTG,EAAOH,KAAOF,EAAMG,WACpBE,EAAOJ,YAAe,UAASD,GAE/BK,EAAOJ,YAAcI,EAAOH,QAIhCN,EAAaU,UAAY,IAClBV,G,0BAG8B,CAACR,EAAsBmB,KAC5D,MAAMX,GAAe,aAAUR,GAW/B,OATAQ,EAAaQ,QAAQN,QAASO,IAC5B,IAAIG,EAAcD,EAAaF,EAAOH,MAClCO,EAAOC,SAASF,KAClBA,GAAc,IAAAG,aAAYH,IAG5BH,EAAOO,MAAQJ,IAGVZ,G,sBAG2BiB,IAClC,aACEA,EAAKC,OAAQC,GAAMA,EAAEC,OAASC,cAAYC,UACzCC,GAASA,EAAKjB,KAAKkB,eACpBC,IAAKN,GAAD,OAAaA,GAAb,IAAgBO,MAAOP,EAAEb,QAE1B,MAAMqB,EAAqBC,GAChCA,EAAiB3B,OAAO4B,OAAO,CAACC,EAAM3B,KACpC,IAAI4B,EAAa5B,EAAMa,MAKvB,OAJIe,GAAc,CAAC,IAAK,KAAKC,MAAOb,GAAMhB,EAAMiB,KAAKa,SAASd,MAC5DY,EAAaG,KAAKC,MAAMJ,IAG1B,OAAYD,GAAZ,IAAkB,CAAC3B,EAAMG,MAAOH,EAAMa,SACrC,I,8CAEgC,CACnCoB,EACAC,EACAzH,KAEA,IACE,MAAM,YAAE0H,GAAgB,IAAIC,cAAYF,EAAiB,IAEnDG,EAAOF,EADQX,EAAkBU,IAGvC,MAAO,CACLI,KAAM7H,EAAQ8H,QACdC,GAAIP,EACJpB,OAAO,IAAA4B,iBAAgBP,EAAgB3B,WACvC8B,QAEF,MACA,MAAO,O,sHCnFI,SAAoB7E,GACjC,MAAM,UAAEkF,EAAF,UAAaC,EAAb,SAAwBC,GAAapF,EAC3C,OACE,UAACqF,EAAD,YACE,yBACGD,GAAY,KACZF,KAEFC,IAAa,SAACG,EAAD,UAAcH,QAjClC,I,EAAA,G,EAAA,O,2BAEA,QACA,O,OAEA,MAAM,KAAEI,GAASC,SAEXH,EAAUjJ,UAAOC,IAAV,0EAAGD,CAAH,oDAMPkJ,GAAc,aAAOG,cAAV,8EAAG,CAAH,2CAGNF,I,qIChBX,Y,0BAGuC,SAEhC,MAAMG,EAA2B,CACtC/C,KAAM,SACNgD,UAAWvI,kBACX2H,QALqC,SAMrCa,IAAK,I,2RCTP,iBACA,a,yJCDA,WAEA,SACA,QACA,UACA,SAEA,QASA,QACA,QACA,OACA,OAUA,OAEA,UAEA,UACA,a,ivBAEA,MAAM,YAAEC,EAAF,MAAeC,EAAf,WAAsBC,GAAeP,UACrC,UAAEQ,GAAc9J,eAEhB+J,EAAyB7J,UAAOC,IAAV,mFAAGD,CAAH,mDAOtB8J,EAA2B9J,UAAOC,IAAV,qFAAGD,CAAH,oDAMxB+J,EAAe/J,UAAOC,IAAV,yEAAGD,CAAH,iFAUZgK,EAAQhK,UAAOC,IAAV,kEAAGD,CAAH,sCAKLiK,EAAejK,UAAOC,IAAV,yEAAGD,CAAH,iDAMZkK,EAAgBlK,UAAOC,IAAV,0EAAGD,CAAH,mDAMbmK,EAAsBnK,UAAOC,IAAV,gFAAGD,CAAH,yGAKF4J,GAKjBQ,EAAoBpK,UAAOC,IAAV,8EAAGD,CAAH,mMAQA4J,GAOjBS,EAAerK,UAAOC,IAAV,yEAAGD,CAAH,yBAIZsK,EAA6BtK,UAAOC,IAAV,uFAAGD,CAAH,iDAK1BuK,GAAc,aAAOP,GAAV,yEAAG,CAAH,8BACNP,GAyCLe,GAAa,IAAAC,UAASC,MAAM,CAChC/B,SAAS,IAAA8B,QAAO,CACdxD,OAAO,IAAA0D,UAASC,KACd,qBACA,IAAA7H,cAAa,kBACZkE,IAAU,IAAA4D,mBAAkB5D,KAAU,IAAA6D,gBAAe7D,MAEvD8D,UAAS,IAAAhI,cAAa,e,OAsSZ,IAAAiI,aAjSf,SAAkBpH,GAChB,MAAM,QACJ9C,EADI,gBAEJuH,EAFI,IAGJmB,EAHI,SAIJyB,EAJI,UAKJC,EALI,kBAMJC,EANI,sBAOJjK,EAPI,uBAQJC,EARI,6BASJE,EATI,iBAUJC,EAVI,gCAWJC,EAXI,6BAYJC,EAZI,qBAaJC,EAbI,4BAcJC,EAdI,QAeJb,EAfI,mBAgBJuK,EAhBI,sBAiBJxJ,EAjBI,iCAkBJD,EAlBI,yBAmBJG,EAnBI,MAoBJuJ,EApBI,SAqBJC,EArBI,SAsBJC,EAtBI,aAuBJC,EAvBI,qBAwBJC,EAxBI,wBAyBJ1J,EAzBI,qBA0BJG,EA1BI,qBA2BJF,EA3BI,kBA4BJC,GACE2B,GAEG8H,GAAOC,KAAY,IAAAtL,eAA6BuL,IAChDC,GAAiBC,KAAwB,IAAAzL,WAAS,IAClD0L,GAA2BC,KAAgC,IAAA3L,WAAS,IACpE4L,GAAsBC,KAA2B,IAAA7L,WAAS,IAC1D8L,GAAuBC,KAA4B,IAAA/L,WAAS,IAC5DgM,GAAwBC,KAA6B,IAAAjM,UAAc,KACpE,SAAEC,KAAa,IAAAC,gBACf,iBAAEgM,GAAF,eAAoBC,GAApB,gBAAoCC,GAApC,cAAqDC,KAAkB,IAAAC,sBAC3E/I,EAAMrB,SAASqK,QAEXC,GACJ/L,EAAQgM,KAAOP,KACf,IAAAQ,eAAc1E,EAA6BmE,KAE7C,IAAAQ,WAAU,KACRxL,IACA4K,IAAyB,IACxB,CAACtL,KAEJ,IAAAkM,WAAU,KACRvL,GAAqB,GACrB2K,IAAyB,GAErBL,IAA6Bc,KAA8BZ,KAC7DgB,KACAX,GAA0B,EAAD,KACpBD,IADoB,IAEvBa,aAAcT,GACdvG,OAAQwG,QAGX,CAAClD,IAEJ,MAAM2D,GAAe,KACnBxB,QAASC,GACT,IACE9J,IACA,MAAOsL,GACPzB,GAASyB,EAAEC,WAITJ,GAAiB,KACrBtB,QAASC,GACT,IACEnK,GAAqB,GACrB2K,IAAyB,GACzB,MAAOgB,GACPzB,GAASyB,EAAEC,WAITC,GAAerG,IACnB,IACE,OAAOkB,KAAKC,MAAMnB,GAClB,MAAOmG,GACP,MAAO,MAIX,IAAAJ,WAAU,MACJ,IAAAjM,gBAAewL,GAAkBjM,IACnCY,EAAsBqL,IACbA,IACTZ,IAAS,IAAA5I,cAAa,oCAEvB,IAEH,MAAMwK,GAAoBtC,IAAY,IAAA8B,eAAc9B,EAAStC,QAAS6E,2BAStE,OACE,SAAC,EAAAC,OAAD,CACEC,cATuD,CACzD/E,QAAS,CACPgF,QAAS,GACT1G,MAAO,KAOP2G,iBAAkBpD,EAElBqD,SAAU,OAJZ,SAMG,EAAGC,SAAQC,SAAQC,UAASC,gBAAeC,gBAAeC,kBAAiBC,iBAE1E,IAAApB,WAAU,MAEL,IAAAjM,gBAAewL,GAAkBjM,MAClCyL,IACqB,IAArBb,EAAU/F,QACTqH,KAKCA,IACFnL,EAA6BmL,IAE/BR,IAA6B,KAC5B,CAACd,KAEJ,IAAA8B,WAAU,KAEJ/B,GAAYA,EAAS1B,YAAczI,EAAQgM,IAC7CzL,EAA6BgH,GAG3B4C,GAAYA,EAAStC,UAAY6E,2BACnCS,EAAc,UAAW,CACvBN,QAAS1C,EAAS1E,KAClBU,MAAOgE,EAAStC,UAIpBgD,QAASC,IACR,CAACX,KAIF,iCACE,SAACpB,EAAD,WACE,SAAC,EAAAwE,gBAAD,CACEvN,QAASA,EAAQgM,GACjBwB,SAAW/E,IACTrI,EAAsBqI,GACtB6E,UAIN,SAACtE,EAAD,WACE,UAACC,EAAD,YACE,UAACO,EAAD,YACE,kBAAOiE,QAAQ,UAAUC,UAAU,qBAAnC,UACG,IAAAzL,cAAa,oBAEfkI,GAAYA,EAASwD,WACpB,SAAClE,EAAD,CAAapH,QAAS,IAAMjB,EAAqB+I,EAASyD,MAA1D,UACG,IAAA3L,cAAa,mBAIpB,SAAC,EAAA4L,oBAAD,CACEpI,KAAK,UACL2E,UAAWA,EACXQ,MAAOqC,GAAUC,EAAQrF,SAAWoF,EAAOpF,SAAWoF,EAAOpF,QAAQ1B,MACrEnG,QAASA,EACT+K,gBAAiBA,GACjBC,qBAAsBA,GACtB8C,SAAWC,IAET1N,EAAuB0N,GAEvBxN,EAA6BwN,EAAO5H,QAEtCqH,SAAW3F,GAAYtH,EAA6BsH,GACpD1B,MAAO6G,EAAOnF,QACdsF,cAAeA,EACfE,gBAAiBA,EACjBD,cAAeA,UAIrB,UAACnE,EAAD,YACE,SAACE,EAAD,CAAc9G,QAAS,IAAMiJ,IAAyB,GAAtD,UACE,SAAC,EAAA0C,WAAD,CACEvI,KAAK,MACLoB,OACE,iCACG,IAAA5E,cAAa,kBACd,SAAC,EAAAgM,QAAD,CACEC,MAAM,IAAAC,kBAAiBC,kBAAgBC,sBACvCC,YAAY,EAFd,UAIE,SAAC,EAAAC,KAAD,CAAMjK,MAAM,OAAOiC,KAAK,uBAI9BJ,MAAOuC,EACP8F,YAAc,8LACdhB,SAAU,EAAGiB,QAAUtI,aACrB3F,EAAiB2F,GACjBiF,IAAwB,IAE1BsD,UAAU,EACVC,mBAAmB,EACnBC,OAAQ,QACRC,UAAWxD,GAAwB,QAAU,OAC7CyD,UAAWrC,OAGdA,KACC,+BACE,UAACpD,EAAD,YACE,SAAC,EAAA2E,WAAD,CACEnH,OAAO,IAAA5E,cAAa,iBACpBkE,MAAOmE,EACPkE,aAAa,IAAAvM,cAAa,6BAC1BuL,SAAU,EAAGiB,QAAUtI,YAAc1F,EAAgC0F,MAEvE,SAACmD,EAAD,WACE,SAAC,EAAAyF,OAAD,CACEC,MAAOnG,EACPoG,OAAO,EACPC,WAAW,EACX7M,QAASgK,GAJX,UAMG,IAAApK,cAAa,0BAMvB2I,KACC,SAACrB,EAAD,WACE,SAAC,EAAA4F,cAAD,UAAgBvE,WAKtB,SAACxB,EAAD,WACE,SAAC,EAAA2F,OAAD,CACEC,MAAOpG,EACPkG,SAAUzD,GACVhJ,QAAS8J,GACTiD,WAAW,EAJb,UAMG,IAAAnN,cAAa,8BAGjBoI,GAAqB3B,IACpB,SAAC,UAAD,CACEA,IAAK8D,GAAY9D,GACjB9H,4BAA6BA,EAC7Bb,QAASA,EACTe,sBAAuBA,EACvBD,iCAAkCA,EAClCb,QAASA,EACTiB,wBAAyBA,EACzBsG,gBAAiBA,EACjBgE,uBAAwBA,GACxBhB,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVC,aAAcA,EACdC,qBAAsBA,EACtBxJ,kBAAmBA,EACnBD,qBAAsBA,a,8HC9btC,a,uBAEqCmO,IACnC,MACErP,QAASyL,EACT5D,QAAS6D,EACT4D,SAAU3D,EAHN,MAIJrG,IACE,IAAAgC,OAAM+H,GASV,MAAO,CACL5D,mBACAC,iBACAC,kBACAC,eAX6BtG,EAAaiK,MAAMC,QAAQlK,GAASA,EAAQ,CAACA,GAArC,IAELsB,IAAK6I,IAAD,CACpChK,KAAMgK,EAAErI,SAAS,KAAOqI,EAAEC,OAAO,EAAGD,EAAEE,QAAQ,MAAQ,GACtDxJ,MAAOsJ,EAAErI,SAAS,KAAOqI,EAAEC,OAAOD,EAAEE,QAAQ,KAAO,EAAGF,EAAEpL,QAAU,S,6FCqGvD,UAAkC,IAC/CqE,EAD+C,4BAE/C9H,EAF+C,QAG/Cb,EAH+C,QAI/CC,EAJ+C,MAK/CuK,EAL+C,SAM/CC,EAN+C,SAO/CC,EAP+C,aAQ/CC,EAR+C,qBAS/CC,EAT+C,gBAU/CpD,EAV+C,sBAW/CzG,EAX+C,iCAY/CD,EAZ+C,wBAa/CI,EAb+C,kBAc/CE,EAd+C,qBAe/CD,EAf+C,uBAgB/CqK,IAEA,MAAOqE,EAAWC,IAAgB,IAAAtQ,WAAS,IACpCiI,EAAiBsI,IAAsB,IAAAvQ,eAA8BuL,IACrEF,EAAOC,IAAY,IAAAtL,eAA6BuL,IAChDiF,EAAcC,IAAmB,IAAAzQ,UAAS,KAC1C0Q,EAAqBC,IAA0B,IAAA3Q,WAAS,GACzD4Q,GAAY,IAAAC,qBAAoB1H,GAEhC2H,EAAqB,KACpBtQ,GAAYyH,GACjBwI,GAAgB,IAAAM,uBAAsB/I,EAAiBC,EAAiBzH,MAG1E,IAAAmM,WAAUmE,EAAoB,CAACtQ,IAE/B,MAAMwQ,EAA0BC,IAC9B,IAAKA,EAAkB,OAEvB,MAAMC,GAAc,IAAAC,oCAAmCF,GACvDV,EAAmBW,GACnB5F,OAASC,IAEL,IAAA6F,iBAAgBF,IAA8C,IAA9BA,EAAYrL,OAAOf,QACrDuM,EAAeH,IAIbI,EAAoB,CAAC7I,EAAmB7B,KAC5C,MAAM2K,EAAkBC,OAAOC,OAAO,GAAIxJ,GACpCyJ,EAAqBH,EAAgB1L,OAAOV,UAAW4B,GAAMA,EAAEb,OAASuC,GAE1E8I,EAAgB1L,OAAO6L,KACzBH,EAAgB1L,OAAO6L,GAAoB9K,MAAQA,GAGrD2J,EAAmBgB,IAGfF,EAAiBM,UACrB,GAAKnK,EAAL,CAEA8D,OAASC,GACT,IACE+E,GAAa,GACb,MAAM/J,QAAqBlF,EAA4BmG,GACjDoK,GAA2B,IAAAC,yBAAwBrK,EAAkBjB,GAC3EgK,EAAmBqB,GACnB,MAAO7E,GACPzB,EAASyB,EAAE+E,OAAS/E,EAAE+E,OAAS/E,EAAEC,SANnC,QAQEsD,GAAa,MAkBjB,IAAIyB,GAAS,EACTlM,EAAqB,GACrBO,GAAsB,QAEFmF,IAApBtD,IACF8J,GAAS,IAAAX,iBAAgBnJ,GACzBpC,EAASoC,EAAgBpC,OACzBO,GAAU6B,EAAgB7B,SAG5B,MAAQyG,aAAcmF,GAAqBnM,OAAQoM,IAAkBjG,EAC/DkG,GAAkBtB,EAAU3N,KAAM8D,GAAMA,EAAEb,OAAS8L,IAErDE,KAAoBjK,GACtB+I,EAAuBkB,IAgBzB,OAbA,IAAAvF,WAAU,MACH+D,GAAuBzI,GAAmB+J,KAAwB/J,EAAgB/B,OACrF+L,GAAcnM,QAASqM,IACrBb,EAAkBa,EAAajM,KAAMiM,EAAavL,SAEpD+J,GAAuB,GAEnBoB,GAAU9J,EAAgBpC,OAAO+B,MAAO7B,GAAUA,EAAMa,QAC1DyK,EAAepJ,KAGlB,CAACA,KAGF,iCACE,SAACmK,EAAD,KACA,UAACC,EAAD,YACE,SAAC1I,EAAD,WAAQ,IAAAjH,cAAa,8BACrB,SAAC,EAAA4P,SAAD,CACE1L,MAAOqB,EACPsK,QAAS3B,EACT3C,SAAWgD,IACTD,EAAuBC,IAEzBuB,gBAAiB,EAAGpK,OAAMqK,mBACxB,SAAC,UAAD,CAAsBjE,OAAQpG,EAAMmG,SAAUkE,EAAcC,YAAaC,UAAQC,KAEnFC,eAAgB,EAAGjM,YAAY,SAAC,UAAD,CAAsB4H,OAAQ5H,IAC7DkM,YAAY,QAIhB,SAACC,EAAD,UACG9K,IACC,gCACGpC,EAAOf,OAAS,IACf,yBACGe,EAAOwB,IAAI,CAAC2L,EAAOhN,KAEhB,SAAC0D,EAAD,UACkB,SAAfsJ,EAAMhM,MACL,SAAC,EAAAiM,gBAAD,CACExK,UAAWuK,EAAM9M,KACjBwC,UAAWsK,EAAMhM,KACjBkM,iBAAkBF,EAAM/M,YACxBqL,kBAAmBA,EACnB1K,MAAOoM,EAAMpM,SAGf,SAAC,EAAA6H,WAAD,CACEvI,KAAM8M,EAAM9M,KACZoB,OACE,SAAC,EAAA6L,WAAD,CAAY1K,UAAWuK,EAAM/M,YAAcyC,UAAWsK,EAAMhM,OAE9DJ,MAAOoM,EAAMpM,MACbqH,SAAU,EAAGiB,QAAUtI,YAAc0K,EAAkB0B,EAAM9M,KAAMU,GACnEwM,SAAUtC,KAjBI,GAAEkC,EAAM/M,cAAcD,IAAQiC,EAAgB/B,WA0BzE6L,IACC,yBACG3L,GAAQiB,IAAI,CAAC2L,EAAOhN,KAEjB,SAAC0D,EAAD,CACEf,UAAU,EADZ,cAImB4C,IAAhByH,EAAMpM,OAAsC,SAAfoM,EAAMhM,MAClC,SAAC,EAAAqM,mBAAD,CACE5K,UAAWuK,EAAM/M,YACjByC,UAAWsK,EAAMhM,KACjBsM,WAAYN,EAAMpM,SAGpB,SAAC,EAAA6H,WAAD,CACEnH,OACE,SAAC,EAAA6L,WAAD,CACE1K,UAAWuK,EAAM/M,YACjByC,UAAWsK,EAAMhM,KACjB2B,UAAU,IAGd/B,MAAOoM,EAAMpM,MACb2I,UAAU,KAlBR,GAAEyD,EAAM/M,cAAcD,IAAQiC,EAAgB/B,YA0B9D,UAACqN,EAAD,WACGxB,GAAUlM,EAAOf,OAAS,IACzB,SAAC0O,EAAD,CACE/D,MAAOpG,EACPvG,QAAS,IAAMuO,EAAepJ,GAC9B4H,WAAW,EAHb,UAKG,IAAAnN,cAAa,gBAGhBqP,IACA,UAAC0B,EAAD,YACE,SAACrB,EAAD,KACC,IAAAsB,WAAUzL,KACT,SAACyB,EAAD,WACE,SAAC,EAAA+E,WAAD,CACEnH,OAAO,IAAA5E,cAAa,SACpBkE,MAAOqB,EAAgB3B,UACvB2H,SAAU,EAAGiB,QAAUtI,YACrB2J,EAAmB,EAAD,KACbtI,GADa,IAEhB3B,UAAWM,KAGfwM,SAAUtC,OAIhB,SAAC,UAAD,CACEtQ,QAASA,EACTC,QAASA,EACTc,sBAAuBA,EACvBoS,aAhKMhC,UACtB,IAAKnK,EAAkB,OAEvB8D,OAASC,GACT,IACE+E,GAAa,SACPhP,EAAiCkG,GACvC,MAAOuF,GACPzB,EAASyB,EAAE+E,OAAS/E,EAAE+E,OAAS/E,EAAEC,SAJnC,QAMEsD,GAAa,KAuJCrI,gBAAiBA,EACjBvG,wBAAyBA,EACzBC,qBAAsBA,EACtBC,kBAAmBA,EACnBgS,qBAAsBpD,EACtBxF,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVC,aAAcA,EACdC,qBAAsBA,WAK9B,SAACyI,EAAD,UAAiBxD,IAAa,SAAC,EAAAyD,QAAD,CAASC,KAAM,MAC5C1I,IACC,SAAC2I,EAAD,WACG,aAAU,qCAAsC,CAAEC,OAAQ5I,eA5W3E,WAEA,UAEA,QACA,OACA,E,4bAAA,OAGA,UASA,UACA,aACA,a,g3BAEA,MAAM,aAAE6I,EAAF,MAAgB7K,GAAUN,SAM1BsJ,EAAkB1S,UAAOC,IAAV,4FAAGD,CAAH,4DAMf+J,EAAe/J,UAAOC,IAAV,yFAAGD,CAAH,iFAGC4D,GAAWA,EAAMoF,SAAW,OAAS,GAQlDgB,GAAQ,aAAOX,cAAV,kFAAG,CAAH,uDAMLuK,EAAgB5T,UAAOC,IAAV,0FAAGD,CAAH,mDAMbkU,EAAiBlU,UAAOC,IAAV,2FAAGD,CAAH,0CAKdoT,EAAoBpT,UAAOC,IAAV,8FAAGD,CAAH,4DAEJwU,YAEOD,GAKpB9B,EAAiBzS,UAAOC,IAAV,2FAAGD,CAAH,yEAGEuU,GAKhBV,GAAe,aAAOhE,UAAV,yFAAG,CAAH,sBAIZiE,EAAmB9T,UAAOC,IAAV,6FAAGD,CAAH,oDAMhBqU,GAAe,aAAOpE,iBAAV,yFAAG,CAAH,qBACD+C,UAAQyB,K,sCCxFbnN,EAOAoN,EAgBA/O,E,oIAvBA2B,K,oBAAAA,E,cAAAA,E,2BAAAA,I,cAAAA,E,+BAOAoN,K,gBAAAA,E,YAAAA,E,cAAAA,E,kBAAAA,E,mBAAAA,I,eAAAA,E,sCAgBA/O,K,aAAAA,E,YAAAA,E,wBAAAA,E,mBAAAA,I,sBAAAA,E,2WCzBZ,iBACA,aACA,a,kJCkCe,SAA4B/B,GACzC,MAAM,UAAEkF,EAAF,UAAaC,EAAb,WAAwB4K,GAAe/P,EAEvC+Q,EAAwB,SAAfhB,IAAwC,IAAfA,EACxC,OACE,iCACE,SAAC,UAAD,CAAY7K,UAAWA,EAAWC,UAAWA,EAAWC,UAAU,KAClE,UAACC,EAAD,YACE,SAACoG,EAAD,CAAMuF,IAAKD,EAASE,UAAYC,UAAOH,OAAQA,KAC/C,SAACI,EAAD,UAAeJ,EAAS,OAAS,iBA7CzC,cAEA,aACA,aACA,QAEA,a,0DAEA,MAAM1L,EAAUjJ,UAAOC,IAAV,kFAAGD,CAAH,kDAMP+U,GAAe,aAAO1L,cAAV,uFAAG,CAAH,kCASZgG,EAAOrP,UAAOgV,IAAV,+EAAGhV,CAAH,gBACG4D,GACTA,EAAM+Q,OACF,qDACA,wD,kCC3BR,OAAe,cAA0B,qE,kCCAzC,OAAe,cAA0B,iE,6FC2C1B,SAAyB/Q,GACtC,MAAM,UAAEkF,EAAF,UAAaC,EAAb,iBAAwBwK,EAAxB,MAA0CtM,EAA1C,kBAAiD0K,GAAsB/N,EACvEgP,EAAU,CACd,CAAEjL,MAAO,OAAQpB,KAAM,OAAQU,OAAO,GACtC,CAAEU,MAAO,QAASpB,KAAM,QAASU,OAAO,IAE1C,OACE,UAACgC,EAAD,YACE,SAAC,UAAD,CAAYH,UAAWyK,EAAkBxK,UAAWA,KACpD,SAAC2J,EAAD,WACE,SAAC,EAAAC,SAAD,CACE1L,MAAO2L,EAAQtP,KAAM2R,GAAMA,EAAEhO,QAAUA,GACvC2L,QAASA,EACTtE,SAAWO,GAAW8C,EAAkB7I,EAAW+F,EAAO5H,OAC1D4L,gBAAiB,EAAGpK,OAAMqK,mBACxB,SAACoC,EAAD,CAAsBrG,OAAQpG,EAAMmG,SAAUkE,EAAcC,YAAaC,UAAQC,KAEnFC,eAAgB,EAAGjM,YAAY,SAACiO,EAAD,CAAsBrG,OAAQ5H,IAC7DkM,YAAY,UA7DtB,cAEA,QACA,OAEA,a,0DAEA,MAAMlK,EAAUjJ,UAAOC,IAAV,8EAAGD,CAAH,oDAMP0S,EAAkB1S,UAAOC,IAAV,sFAAGD,CAAH,wCAafkV,EAAuB,EAC3BrG,SACAkE,cAAc,IACdnE,eAMA,gBACEuG,MAAO,CAAEC,QAAU,kBAAiBrC,GACpC5P,QAAS,IAAMyL,GAAYA,EAASC,GAFtC,SAIGA,EAAOtI,Q,6FCQG,SAA8B3C,GAC3C,MAAM,OAAEiL,EAAF,SAAUD,GAAahL,EAEvBwO,GAAS,IAAAX,iBAAgB5C,GAC/B,OACE,UAACwG,EAAD,CACEtC,YAAanP,EAAMmP,YACnB5P,QAAS,IAAOyL,EAAWA,EAASC,QAAUjD,EAC9C0J,eAAgB1G,EAHlB,UAKGC,EAAOtI,MACR,SAACgP,EAAD,CAASnD,OAAQA,EAAjB,SACGA,GAAS,IAAArP,cAAa,QAAQyS,eAAgB,IAAAzS,cAAa,SAASyS,oBA3D7E,I,EAAA,G,EAAA,O,2BAEA,OACA,OAEA,U,OAQA,MAAMH,EAAgBrV,UAAOC,IAAV,sFAAGD,CAAH,8EAIf,EAAGsV,eAAcvC,cAAc,OAAW,sBAC3BuC,EAAe,UAAY,8BAC1BvC,UAQdwC,EAAUvV,UAAOC,IAAV,gFAAGD,CAAH,+LACU4D,GAAWA,EAAMwO,OAAShJ,SAAOqM,cAAgBrM,SAAOK,YAEpEL,SAAOM,Q,gHC9BlB,I,EAAA,QACA,G,EAAA,O,2BAEA,QACA,QACA,OAEA,OACA,Q,OAIA,MAAMgM,EAAqB1V,UAAOC,IAAV,oFAAGD,CAAH,oDAMlB2V,EAAyB3V,UAAOC,IAAV,wFAAGD,CAAH,qBAItB6T,GAAe,aAAOhE,UAAV,8EAAG,CAAH,sBAIZ+F,GAAc,aAAOvM,cAAV,6EAAG,CAAH,oBAuBJwM,EAAajS,IACxB,MAAM,QACJ/C,EADI,QAEJC,EAFI,gBAGJwH,EAHI,SAIJgD,EAJI,SAKJC,EALI,aAMJC,EANI,qBAOJC,EAPI,MAQJJ,EARI,qBASJ4I,EATI,sBAUJrS,EAVI,aAWJoS,EAXI,wBAYJjS,EAZI,qBAaJC,EAbI,kBAcJC,EAdI,WAeJ6T,GACElS,EAEEmS,GAAW,IAAAtV,aAAYuV,oBACvBC,GAAmB,IAAAC,MACtBC,IAAsB,IAAAC,sBAAqBD,EAAGrV,EAAQgM,IACtDqJ,IAAM,IAAAE,uBAAsBF,GAAG,GAFT,CAGvBJ,GAEF,OACE,UAACL,EAAD,WACGI,IAAc,SAAC,EAAAQ,kBAAD,KACf,SAACV,EAAD,WAAc,IAAA7S,cAAa,cAC3B,UAAC4S,EAAD,YACE,SAAC,EAAAY,gBAAD,CACEhQ,KAAK,UACLU,MAAOpG,EACPkV,SAAUE,EACVrH,SAAWC,IACTjN,EAAsBiN,MAGzBhO,IACC,SAAC,EAAA2V,YAAD,CACEjL,SAAUA,EACVC,aAAcA,EACdC,qBAAsBA,EACtBH,SAAUA,EACVD,MAAOA,EACPxK,QAASA,EACT4V,YAAa1U,EACb2U,YAAa1U,EACb2U,SAAU1U,EACVgS,qBAAsBA,EACtBnT,QAASA,QAKf,SAAC+S,EAAD,CACEjE,SAAUkG,EACV3S,QAAS,IAAM6Q,EAAa1L,GAC5B4H,WAAW,EAHb,UAKG,IAAAnN,cAAa,mB,qBAUJ,IAAA6T,SAJOC,IAAD,CACtBf,YAAY,IAAAgB,eAAcD,KAMbE,CAAUlB,G,0GChHV,SAA4BjS,GACzC,MAAM,UAAEW,EAAF,SAAaP,EAAb,cAAuBQ,GAA2BZ,EAAToT,E,kXAA/C,CAAwDpT,EAAxD,GAEA,OACE,SAAC,EAAAqT,U,+VAAD,EACE1S,UAAWA,EACXP,SAAUA,EACVkT,gBAAgB,IAAAnU,cAAa,oBAC7BoU,UAAW3S,EACX4S,WAAY5S,GACRwS,KApBV,aACA,O,6eCOe,SAA4BpT,GACzC,MAAM,aAAEnB,EAAF,SAAgBuB,GAAaJ,EAEnC,OACE,SAAC,EAAAyT,mBAAD,CACED,WAAY3U,EACZ0U,UAAW1U,EACXuB,SAAUA,EACVsT,OAAQC,UAAQC,qBAhBtB,YACA,Q,qKCDA,I,EAAA,OAEA,G,EAAA,S,2BAEA,QACA,QACA,QASA,UACA,SACA,OACA,QAYA,OAEA,UACA,U,gkCAGA,MAAM5W,EAAoC,CACxCE,QAAS,GACT2W,qBAAsB,GACtBC,iBAAiB,EACjBrP,gBAAiB,GACjB4C,cAAUW,EACVR,mBAAoB,GACpBF,UAAW,GACX1B,IAAK,GACL2B,mBAAmB,EACnBtD,sBAAkB+D,EAClBnD,UAAMmD,EACN/K,aAAS+K,EACTL,SAAU,aACVD,SAAU,QACVD,MAAO,IACPrH,cAAU4H,EACVrH,eAAWqH,G,qEAG4E,EACvFiL,QACAc,eAEA,MAAM,sBAAEC,EAAF,eAAyBC,EAAzB,eAAyCC,IAAmB,IAAAC,iBAC5D,eAAEhX,IAAmB,IAAAR,gBACrB,eAAEyX,IAAmB,IAAAC,eACrBC,EAAanX,EAAeC,mBAgB5BQ,EAA+B,KAEnC,MAEM0J,EAFmB0M,EAAsBf,EAAM/V,QAAQgM,IAE1BpF,IAAKN,GAAMyK,OAAOC,OAAO,GAAI1K,EAAG,CAAEO,MAAOP,EAAEb,QAE9EoR,EAAUQ,GAAD,OACJA,GADI,IAEPjN,gBAIE/J,EAA0B8J,IAC9B,IAAI5C,EAAkB,GAClBoP,EAAuB,GACvBW,EAAc,GAEdnN,EAAStC,UAAY6E,2BAA2BvC,EAASzB,MAC3DnB,EAAkB4C,EAAStC,QAC3B8O,EAAuBxM,EAAStC,QAChCyP,EAAcnN,EAASzB,KAGzBmO,EAAUQ,GAAD,OACJA,GADI,IAEPlN,WACA5C,kBACAoP,uBACAjO,IAAK4O,EACLhN,mBAAoB,GACpBsM,iBAAiB,MAIfW,GAAoC,IAAAC,cACxC,aAAUrR,GAAkBsR,EAAyBtR,GAAQ,MAC7D,CAAC4P,EAAM3L,YAwBHqN,EAA2BvG,UAA0B,MACzD2F,EAAUQ,GAAD,OACJA,GADI,IAEPT,iBAAiB,KAGnB,MAAMc,EAAW,IAAIC,kBAAgBP,GAC/BQ,EAAe,OAAI,QAAMF,EAASG,YAAYC,EAAQ/B,EAAM/V,UAA7C,EAA0D+X,mBAE/ElB,EAAUQ,GAAD,OACJA,GADI,IAEP9P,gBAAiBqQ,EACjBhB,iBAAiB,KAGJoB,EAAuBJ,IAEpCK,EAASL,IAIPI,EAA0BnQ,IAC9B,MAAMqQ,EAAmBnC,EAAM3L,UAAU5H,KAAM2V,IAC7C,IAAAlM,eAAckM,EAAEtQ,QAASA,IAE3B,QAAIqQ,IACF7X,EAAuB6X,IAChB,IAKLD,EAAW/G,UACf,MAAMkH,QAAmBC,mBAAiBC,SAASC,eAAe1Q,EAASkO,EAAM/V,QAAQgM,IACrFoM,GACFvB,EAAUQ,GAAD,OACJA,GADI,IAEP3O,IAAK0P,MA0NX,MAAO,CACLhY,sBA1U6BqI,IAC7BoO,EAAUQ,GAAD,OACJA,GADI,IAEPtX,aAAS+K,EACT9K,QAASC,EAAewI,GACxB0B,cAAUW,EACVvD,gBAAiB,GACjBoP,qBAAsB,GACtBjO,IAAK,GACL4B,mBAAoB,GACpBsM,iBAAiB,MAiUnBrW,6BAvRoC4F,IAChC6R,EAAuB7R,IAAoB,KAAVA,QAA0B2E,IAAV3E,IAIrD0Q,EAAUQ,GAAD,OACJA,GADI,IAEPV,qBAAsBxQ,EACtBoB,gBAAiBpB,EACjBgE,SAAU3B,iBACVE,IAAK,OAGH,IAAA8P,8BAA6BzC,EAAM/V,QAAQyY,QAA3C,CAAoDtS,IACtDoR,EAAkCpR,IAGhC,IAAA4D,mBAAkB5D,IACpB8R,EAAS9R,KAsQX9F,yBACAG,iBAzNwBkI,IACxBmO,EAAUQ,GAAD,OACJA,GADI,IAEP3O,UAuNFjI,gCAnNuC6J,IACvCuM,EAAUQ,GAAD,OACJA,GADI,IAEP/M,yBAiNFtJ,yBA7M+B,KAC/B,IAAK+U,EAAMxO,kBAAoBwO,EAAMzL,qBAAuByL,EAAMrN,IAChE,MAAM,IAAIgQ,OAAM,IAAAzW,cAAa,sCAG/B,KAAK,IAAA8H,mBAAkBgM,EAAMxO,iBAC3B,MAAM,IAAImR,OAAM,IAAAzW,cAAa,mCAG/B,IACEoF,KAAKC,MAAMyO,EAAMrN,KACjB,MAAO4D,GACP,MAAM,IAAIoM,MAAO,cAAapM,EAAEC,SAGlC,GAAIwJ,EAAM3L,UAAU5H,KAAMkE,GAASA,EAAKjB,OAASsQ,EAAMzL,oBACrD,MAAM,IAAIoO,OAAM,IAAAzW,cAAa,oCAE/B,MAAMkI,EAA6B4M,EAAe,CAChDrO,IAAKqN,EAAMrN,IACXb,QAASkO,EAAMxO,gBACf9B,KAAMsQ,EAAMzL,mBACZzD,MAAOkP,EAAMzL,mBACb7B,UAAWsN,EAAM/V,QAAQgM,GACzB2B,UAAU,IAEZjN,IACAL,EAAuB8J,IAmLvBzJ,+BACAC,qBA3K4BgY,IAC5B,GAAIA,EAAS,CACX,IAAK5C,EAAMxO,kBAAoBwO,EAAMrN,IACnC,MAAM,IAAIgQ,OAAM,IAAAzW,cAAa,wCAG/B,KAAK,IAAA8H,mBAAkBgM,EAAMxO,iBAC3B,MAAM,IAAImR,OAAM,IAAAzW,cAAa,mCAG/B,IACEoF,KAAKC,MAAMyO,EAAMrN,KACjB,MAAO4D,GACP,MAAM,IAAIoM,MAAO,cAAapM,EAAEC,UAIpCsK,EAAUQ,GAAD,OACJA,GADI,IAEPhN,kBAAmBsO,MAyJrB/X,4BArJkCsQ,UAClC,MAAM,QAAElR,EAAF,gBAAWuH,GAAoBwO,GAC/B,YAAEtO,EAAF,aAAemR,GAAiB,IAAIlR,cAAYX,EAAkB,IAClE8R,GAAe,IAAA/R,mBAAkBC,GAEjC+R,EAAkB,IAAInB,kBAAgB3X,GACtC2H,EAAO,CAAEG,GAAIP,EAAiBI,KAAMF,EAAYoR,IAItD,OAAOD,QAFcE,EAAgBC,KAAKpR,GAEd3H,EAAQyY,UA4IpC5X,iCAzIuCqQ,MACvC8H,EACAC,KAEA,MAAM,gBACJ1R,EADI,QAEJxH,EAFI,MAGJwK,EAHI,SAIJC,EAJI,SAKJC,EALI,aAMJC,EANI,qBAOJC,GACEoL,EAEJ,IAAKhW,EACH,MAAM,IAAI2Y,OAAM,IAAAzW,cAAa,oCAG/B,MAAM,QAAEjC,GAAYD,GAEd,MAAEoG,EAAF,KAASwB,IAAS,IAAA2I,uBAAsB/I,EAAiByR,EAAmBjZ,GAElF,GAAqD,IAAAmZ,gBACnD,CACEzO,WACAD,WACAE,eACAC,uBACAJ,QACAxK,UACA8H,QAASN,EACTvH,WAEFmG,EACAwB,IAZM6C,SAAU2O,GAAlB,EAAqCC,EAArC,aAgBM,IAAAC,gBAAerZ,EAASoZ,GAE9B,MAAME,EAAK,EAAH,KAAQF,GAAR,IAAqB5O,UAAU,IAAA+O,oBAAmB/O,KAEpDtH,GAAW,IAAAsW,mBAAkBF,EAAIvZ,EAASiZ,EAAkBnT,WAElEgR,EAAUQ,GAAD,OACJA,GADI,IAEPnU,cAGF+V,KAyFAnY,sBAtF6Bf,IAC7B8W,EAAUQ,GAAD,OACJA,GADI,IAEPtX,cAoFFgB,eAhFqBmQ,MAAOuI,EAAmBR,KAC/C,MAAM,QAAElZ,EAAF,SAAWmD,GAAa6S,EAE9B,GAAKhW,EAIL,IAAI,IAAA2Z,cAAa3Z,EAAQqD,QAAS,CAChC,MAAMK,EACJgW,GAAgBA,EAAaE,KACzBF,GACA,IAAAG,aAAYH,EAAcI,YAAUC,QAApC,CAA6CrD,UAAQC,kBAAmBxT,GAC9EgU,EAAenB,EAAM7S,SAASG,cAAhB,OACTI,GADS,IAEZqE,GAAIiO,EAAM7S,SAAS6W,gBACnBnS,KAAMmO,EAAM7S,SAASG,cAAcwE,QACnCmS,OAAQjE,EAAM7S,SAAS8W,UAEzBnD,EAAUQ,GAAD,OACJA,GADI,IAEP5T,eAGFwV,QACK,CACY,IAAItB,kBAAgB5X,EAAQC,SAE1Cia,UAAUR,GACVS,KAAMC,GAAuBA,EAAmBR,MAChDS,MAAOT,GAASA,GAChBO,KAAMG,IACL,MAAMC,GAAmB,IAAAC,sBAAqBF,EAArB,CACvB5D,UAAQC,kBACRX,EAAM7S,UAERgU,EAAenB,EAAM7S,SAASG,cAAeiX,GAC7CzD,EAAUQ,GAAD,OACJA,GADI,IAEP5T,UAAW6W,OAGdE,QAAQvB,KAwCbhY,wBAnCA+B,IAEA6T,EAAUQ,GAAD,OACJA,GACArU,KAgCL5B,qBAvL4BqZ,IAC5BzD,EAAeyD,GACf/Z,IACAL,EAAuBmI,mBAqLvBtH,qBA7B4BsJ,IAC5BqM,EAAUQ,GAAD,OACJA,GADI,IAEP7M,eA2BFrJ,kBAvByBoJ,IACzBsM,EAAUQ,GAAD,OACJA,GADI,IAEP9M,YAqBFpK,2BAA4B4V","file":"InteractWithContractsFlow.7854fd5f7967cde17ed6.js","sourcesContent":["import { useState } from 'react';\n\nimport { useHistory, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, Tabs, WALLET_STEPS } from '@components';\nimport { DEFAULT_NETWORK, ROUTE_PATHS } from '@config';\nimport { getNetworkById, useNetworks } from '@services/Store';\nimport { getDefaultAccount, useSelector } from '@store';\nimport { BREAK_POINTS } from '@theme';\nimport { translateRaw } from '@translations';\nimport { ISignedTx, ITxReceipt, Tab } from '@types';\nimport { useStateReducer } from '@utils';\n\nimport { Interact, InteractionReceipt } from './components';\nimport InteractionConfirm from './components/InteractionConfirm';\nimport { InteractWithContractsFactory, interactWithContractsInitialState } from './stateFactory';\nimport { ABIItem, InteractWithContractState } from './types';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\ninterface ExtendedTab extends Tab {\n  path: string;\n}\n\ninterface TStep {\n  title: string;\n  component: any;\n  props: any;\n  actions: any;\n}\n\nconst Heading = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  align-items: center;\n\n  @media (max-width: ${SCREEN_XS}) {\n    flex-direction: column;\n    align-items: stretch;\n  }\n`;\n\nconst TabsWrapper = styled.div`\n  margin-top: 8px;\n  width: fit-content;\n`;\n\nconst InteractWithContractsFlow = () => {\n  const [step, setStep] = useState(0);\n  const { networks } = useNetworks();\n  const defaultAccount = useSelector(getDefaultAccount());\n  const initialState = {\n    ...interactWithContractsInitialState,\n    account: defaultAccount,\n    network: getNetworkById(DEFAULT_NETWORK, networks)\n  };\n  const {\n    interactWithContractsState,\n    handleNetworkSelected,\n    handleContractSelected,\n    handleContractAddressChanged,\n    handleAddressOrDomainChanged,\n    handleAbiChanged,\n    handleCustomContractNameChanged,\n    updateNetworkContractOptions,\n    displayGeneratedForm,\n    handleInteractionFormSubmit,\n    handleInteractionFormWriteSubmit,\n    handleAccountSelected,\n    handleTxSigned,\n    handleSaveContractSubmit,\n    handleGasSelectorChange,\n    handleGasLimitChange,\n    handleNonceChange,\n    handleDeleteContract\n  } = useStateReducer(InteractWithContractsFactory, initialState);\n\n  const { account }: InteractWithContractState = interactWithContractsState;\n  const history = useHistory();\n  const location = useLocation();\n\n  const goToFirstStep = () => {\n    setStep(0);\n  };\n\n  const goToNextStep = () => {\n    setStep(step + 1);\n  };\n\n  const goToPreviousStep = () => {\n    if (step === 0) {\n      history.push(ROUTE_PATHS.DASHBOARD.path);\n    } else {\n      setStep(step - 1);\n    }\n  };\n\n  const tabClickRedirect = (url: string): void => {\n    history.push(url);\n  };\n\n  const tabs: ExtendedTab[] = [\n    {\n      title: translateRaw('CONTRACTS_INTERACT'),\n      path: ROUTE_PATHS.INTERACT_WITH_CONTRACTS.path,\n      onClick: () => tabClickRedirect(ROUTE_PATHS.INTERACT_WITH_CONTRACTS.path)\n    },\n    {\n      title: translateRaw('CONTRACTS_DEPLOY'),\n      path: ROUTE_PATHS.DEPLOY_CONTRACTS.path,\n      onClick: () => tabClickRedirect(ROUTE_PATHS.DEPLOY_CONTRACTS.path)\n    }\n  ];\n\n  const currentRoute = tabs.find((tab) => tab.path === location.pathname);\n\n  const steps: TStep[] = [\n    {\n      title: translateRaw('NEW_HEADER_TEXT_14'),\n      component: Interact,\n      props: interactWithContractsState,\n      actions: {\n        handleNetworkSelected,\n        handleContractSelected,\n        handleContractAddressChanged,\n        handleAddressOrDomainChanged,\n        handleAbiChanged,\n        handleCustomContractNameChanged,\n        updateNetworkContractOptions,\n        displayGeneratedForm,\n        handleInteractionFormSubmit,\n        handleSaveContractSubmit,\n        handleInteractionFormWriteSubmit: (payload: ABIItem) =>\n          handleInteractionFormWriteSubmit(payload, goToNextStep),\n        handleAccountSelected,\n        handleGasSelectorChange,\n        handleDeleteContract,\n        handleGasLimitChange,\n        handleNonceChange\n      }\n    },\n    {\n      title: translateRaw('CONFIRM_TX_MODAL_TITLE'),\n      component: InteractionConfirm,\n      props: (({ txConfig }) => ({ txConfig }))(interactWithContractsState),\n      actions: { goToNextStep }\n    },\n    {\n      title: translateRaw('INTERACT_SIGN_WRITE'),\n      component: account && WALLET_STEPS[account.wallet],\n      props: (({ txConfig }) => ({\n        network: account && account.network,\n        senderAccount: account,\n        rawTransaction: txConfig?.rawTransaction\n      }))(interactWithContractsState),\n      actions: {\n        onSuccess: (payload: ITxReceipt | ISignedTx) => handleTxSigned(payload, goToNextStep)\n      }\n    },\n    {\n      title: translateRaw('INTERACT_RECEIPT'),\n      component: InteractionReceipt,\n      props: (({ txConfig, txReceipt }) => ({ txConfig, txReceipt }))(interactWithContractsState),\n      actions: { goToFirstStep }\n    }\n  ];\n\n  const stepObject = steps[step];\n  const StepComponent = stepObject.component;\n  const stepProps = stepObject.props;\n  const stepActions = stepObject.actions;\n\n  return (\n    <ExtendedContentPanel\n      onBack={goToPreviousStep}\n      stepper={{ current: step + 1, total: steps.length }}\n      width=\"750px\"\n      heading={\n        <Heading>\n          {stepObject.title}\n          <TabsWrapper>\n            <Tabs\n              tabs={tabs}\n              selectedIndex={tabs.findIndex((tab) => tab.path === currentRoute!.path)}\n            />\n          </TabsWrapper>\n        </Heading>\n      }\n    >\n      <StepComponent {...stepProps} {...stepActions} />\n    </ExtendedContentPanel>\n  );\n};\n\nexport default InteractWithContractsFlow;\n","import { bufferToHex } from 'ethereumjs-util';\nimport cloneDeep from 'lodash/cloneDeep';\nimport sortBy from 'lodash/sortBy';\n\nimport { AbiFunction } from '@services/EthService/contracts/ABIFunction';\nimport { ITxData, StoreAccount } from '@types';\nimport { inputValueToHex } from '@utils';\n\nimport { ABIItem, ABIItemType, StateMutabilityType } from './types';\n\nexport const isReadOperation = (abiFunction: ABIItem): boolean => {\n  const { stateMutability } = abiFunction;\n\n  if (stateMutability) {\n    return (\n      stateMutability === StateMutabilityType.PURE || stateMutability === StateMutabilityType.VIEW\n    );\n  } else {\n    return !!abiFunction.constant;\n  }\n};\n\nexport const isPayable = (abiFunction: ABIItem): boolean => {\n  const { stateMutability } = abiFunction;\n  return stateMutability ? stateMutability === StateMutabilityType.PAYABLE : !!abiFunction.payable;\n};\n\nexport const generateFunctionFieldsDisplayNames = (abiFunction: ABIItem) => {\n  const tempFunction = cloneDeep(abiFunction);\n\n  tempFunction.inputs.forEach((input, index) => {\n    if (input.displayName) {\n      return;\n    }\n\n    if (input.name === '') {\n      input.name = index.toString();\n      input.displayName = `Input#${index}`;\n    } else {\n      input.displayName = input.name;\n    }\n  });\n\n  tempFunction.outputs.forEach((output, index) => {\n    if (output.displayName) {\n      return;\n    }\n\n    if (output.name === '') {\n      output.name = index.toString();\n      output.displayName = `Output#${index}`;\n    } else {\n      output.displayName = output.name;\n    }\n  });\n\n  tempFunction.payAmount = '0';\n  return tempFunction;\n};\n\nexport const setFunctionOutputValues = (abiFunction: ABIItem, outputValues: any) => {\n  const tempFunction = cloneDeep(abiFunction);\n\n  tempFunction.outputs.forEach((output) => {\n    let outputValue = outputValues[output.name];\n    if (Buffer.isBuffer(outputValue)) {\n      outputValue = bufferToHex(outputValue);\n    }\n\n    output.value = outputValue;\n  });\n\n  return tempFunction;\n};\n\nexport const getFunctionsFromABI = (pAbi: ABIItem[]) =>\n  sortBy(\n    pAbi.filter((x) => x.type === ABIItemType.FUNCTION),\n    (item) => item.name.toLowerCase()\n  ).map((x) => ({ ...x, label: x.name }));\n\nexport const reduceInputParams = (submitedFunction: ABIItem) =>\n  submitedFunction.inputs.reduce((accu, input) => {\n    let inputValue = input.value;\n    if (inputValue && ['[', ']'].every((x) => input.type.includes(x))) {\n      inputValue = JSON.parse(inputValue);\n    }\n\n    return { ...accu, [input.name]: input.value };\n  }, {});\n\nexport const constructGasCallProps = (\n  contractAddress: string,\n  currentFunction: ABIItem,\n  account: StoreAccount\n) => {\n  try {\n    const { encodeInput } = new AbiFunction(currentFunction, []);\n    const parsedInputs = reduceInputParams(currentFunction);\n    const data = encodeInput(parsedInputs) as ITxData;\n\n    return {\n      from: account.address,\n      to: contractAddress,\n      value: inputValueToHex(currentFunction.payAmount),\n      data\n    };\n  } catch {\n    return {};\n  }\n};\n","import styled from 'styled-components';\n\nimport { Typography } from '@components';\nimport { COLORS } from '@theme';\n\nconst { GREY } = COLORS;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 1em;\n`;\n\nconst LabelWraper = styled(Typography)`\n  margin-left: 6px;\n  opacity: 0.9;\n  color: ${GREY};\n`;\n\ninterface Props {\n  fieldName: string;\n  fieldType?: string;\n  isOutput?: boolean;\n}\n\nexport default function FieldLabel(props: Props) {\n  const { fieldName, fieldType, isOutput } = props;\n  return (\n    <Wrapper>\n      <b>\n        {isOutput && '↳ '}\n        {fieldName}\n      </b>\n      {fieldType && <LabelWraper>{fieldType}</LabelWraper>}\n    </Wrapper>\n  );\n}\n","import { DEFAULT_NETWORK } from '@config';\nimport { Contract, TAddress } from '@types';\n\nexport const CUSTOM_CONTRACT_ADDRESS = 'custom' as TAddress;\n\nexport const customContract: Contract = {\n  name: 'Custom',\n  networkId: DEFAULT_NETWORK,\n  address: CUSTOM_CONTRACT_ADDRESS,\n  abi: ''\n};\n","export { default as Interact } from './Interact';\nexport { default as InteractionReceipt } from './InteractionReceipt';\n","import { useEffect, useState } from 'react';\n\nimport { Formik } from 'formik';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { object, string } from 'yup';\n\nimport {\n  Button,\n  ContractLookupField,\n  Icon,\n  InlineMessage,\n  InputField,\n  LinkApp,\n  NetworkSelector\n} from '@components';\nimport { getKBHelpArticle, KB_HELP_ARTICLE } from '@config';\nimport { getNetworkById, isValidENSName, isValidETHAddress, useNetworks } from '@services';\nimport { BREAK_POINTS, COLORS } from '@theme';\nimport { translateRaw } from '@translations';\nimport {\n  Contract,\n  ExtendedContract,\n  IReceiverAddress,\n  ISimpleTxForm,\n  Network,\n  StoreAccount,\n  TAddress\n} from '@types';\nimport { isSameAddress } from '@utils';\n\nimport { CUSTOM_CONTRACT_ADDRESS } from '../constants';\nimport { ABIItem } from '../types';\nimport { getParsedQueryString } from '../utils';\nimport GeneratedInteractionForm from './GeneratedInteractionForm';\n\nconst { BLUE_BRIGHT, WHITE, BLUE_LIGHT } = COLORS;\nconst { SCREEN_SM } = BREAK_POINTS;\n\nconst NetworkSelectorWrapper = styled.div`\n  margin-bottom: 12px;\n  label {\n    font-weight: normal;\n  }\n`;\n\nconst ContractSelectionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst FieldWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 12px;\n  flex: 1;\n  p {\n    font-size: 1em;\n  }\n`;\n\nconst Label = styled.div`\n  line-height: 1;\n  margin-bottom: 9px;\n`;\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst ButtonWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: left;\n`;\n\nconst SaveContractWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n\n  @media (max-width: ${SCREEN_SM}) {\n    flex-direction: column;\n  }\n`;\n\nconst SaveButtonWrapper = styled.div`\n  width: 310px;\n  display: flex;\n  align-items: center;\n  padding-top: 10px;\n  padding-left: 8px;\n  justify-content: flex-end;\n\n  @media (max-width: ${SCREEN_SM}) {\n    justify-content: flex-start;\n    padding-left: 0px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst ErrorWrapper = styled.div`\n  margin-bottom: 12px;\n`;\n\nconst ContractSelectLabelWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst DeleteLabel = styled(Label)`\n  color: ${BLUE_BRIGHT};\n  cursor: pointer;\n`;\n\ninterface Props {\n  network: Network;\n  contractAddress: string;\n  addressOrDomainInput: string;\n  resolvingDomain: boolean;\n  abi: string;\n  contract: ExtendedContract;\n  contracts: Contract[];\n  showGeneratedForm: boolean;\n  account: StoreAccount;\n  customContractName: string;\n  nonce: string;\n  gasLimit: string;\n  gasPrice: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n  handleContractSelected(contract: Contract | undefined): void;\n  handleNetworkSelected(networkId: string): void;\n  handleContractAddressChanged(address: string): void;\n  handleAddressOrDomainChanged(value: string): void;\n  handleAbiChanged(abi: string): void;\n  handleCustomContractNameChanged(customContractName: string): void;\n  updateNetworkContractOptions(): void;\n  displayGeneratedForm(visible: boolean): void;\n  handleInteractionFormSubmit(submitedFunction: ABIItem): any;\n  goToNextStep(): void;\n  handleInteractionFormWriteSubmit(submitedFunction: ABIItem): Promise<TObject>;\n  handleAccountSelected(account: StoreAccount): void;\n  handleSaveContractSubmit(): void;\n  handleGasSelectorChange(\n    payload: Partial<Pick<ISimpleTxForm, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>>\n  ): void;\n  handleDeleteContract(contractUuid: string): void;\n  handleGasLimitChange(payload: string): void;\n  handleNonceChange(payload: string): void;\n}\n\nconst FormSchema = object().shape({\n  address: object({\n    value: string().test(\n      'check-eth-address',\n      translateRaw('TO_FIELD_ERROR'),\n      (value) => isValidETHAddress(value) || isValidENSName(value)\n    )\n  }).required(translateRaw('REQUIRED'))\n});\n\ntype CombinedProps = RouteComponentProps & Props;\n\nfunction Interact(props: CombinedProps) {\n  const {\n    network,\n    contractAddress,\n    abi,\n    contract,\n    contracts,\n    showGeneratedForm,\n    handleNetworkSelected,\n    handleContractSelected,\n    handleAddressOrDomainChanged,\n    handleAbiChanged,\n    handleCustomContractNameChanged,\n    updateNetworkContractOptions,\n    displayGeneratedForm,\n    handleInteractionFormSubmit,\n    account,\n    customContractName,\n    handleAccountSelected,\n    handleInteractionFormWriteSubmit,\n    handleSaveContractSubmit,\n    nonce,\n    gasLimit,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    handleGasSelectorChange,\n    handleDeleteContract,\n    handleGasLimitChange,\n    handleNonceChange\n  } = props;\n\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [isResolvingName, setIsResolvingDomain] = useState(false);\n  const [areFieldsPopulatedFromUrl, setAreFieldsPopulatedFromUrl] = useState(false);\n  const [wasAbiEditedManually, setWasAbiEditedManually] = useState(false);\n  const [wasContractInteracted, setWasContractInteracted] = useState(false);\n  const [interactionDataFromURL, setInteractionDataFromURL] = useState<any>({});\n  const { networks } = useNetworks();\n  const { networkIdFromUrl, addressFromUrl, functionFromUrl, inputsFromUrl } = getParsedQueryString(\n    props.location.search\n  );\n  const networkAndAddressMatchURL =\n    network.id === networkIdFromUrl &&\n    isSameAddress(contractAddress as TAddress, addressFromUrl as TAddress);\n\n  useEffect(() => {\n    updateNetworkContractOptions();\n    setWasContractInteracted(false);\n  }, [network]);\n\n  useEffect(() => {\n    displayGeneratedForm(false);\n    setWasContractInteracted(false);\n\n    if (areFieldsPopulatedFromUrl && networkAndAddressMatchURL && !wasAbiEditedManually) {\n      submitInteract();\n      setInteractionDataFromURL({\n        ...interactionDataFromURL,\n        functionName: functionFromUrl,\n        inputs: inputsFromUrl\n      });\n    }\n  }, [abi]);\n\n  const saveContract = () => {\n    setError(undefined);\n    try {\n      handleSaveContractSubmit();\n    } catch (e) {\n      setError(e.message);\n    }\n  };\n\n  const submitInteract = () => {\n    setError(undefined);\n    try {\n      displayGeneratedForm(true);\n      setWasContractInteracted(true);\n    } catch (e) {\n      setError(e.message);\n    }\n  };\n\n  const tryAbiParse = (value: string) => {\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    if (getNetworkById(networkIdFromUrl, networks)) {\n      handleNetworkSelected(networkIdFromUrl);\n    } else if (networkIdFromUrl) {\n      setError(translateRaw('INTERACT_ERROR_INVALID_NETWORK'));\n    }\n  }, []);\n\n  const customEditingMode = contract && isSameAddress(contract.address, CUSTOM_CONTRACT_ADDRESS);\n\n  const initialFormikValues: { address: IReceiverAddress } = {\n    address: {\n      display: '',\n      value: ''\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialFormikValues}\n      validationSchema={FormSchema}\n      // Hack as we don't really use Formik for this flow\n      onSubmit={() => undefined}\n    >\n      {({ values, errors, touched, setFieldValue, setFieldError, setFieldTouched, resetForm }) => {\n        /* eslint-disable react-hooks/rules-of-hooks */\n        useEffect(() => {\n          if (\n            !getNetworkById(networkIdFromUrl, networks) ||\n            areFieldsPopulatedFromUrl ||\n            contracts.length === 0 ||\n            !addressFromUrl\n          ) {\n            return;\n          }\n\n          if (addressFromUrl) {\n            handleAddressOrDomainChanged(addressFromUrl);\n          }\n          setAreFieldsPopulatedFromUrl(true);\n        }, [contracts]);\n\n        useEffect(() => {\n          // If contract network id doesn't match the selected network id, set contract to custom and keep the address from the URL.\n          if (contract && contract.networkId !== network.id) {\n            handleAddressOrDomainChanged(contractAddress);\n          }\n\n          if (contract && contract.address !== CUSTOM_CONTRACT_ADDRESS) {\n            setFieldValue('address', {\n              display: contract.name,\n              value: contract.address\n            });\n          }\n\n          setError(undefined);\n        }, [contract]);\n        /* eslint-enable react-hooks/rules-of-hooks */\n\n        return (\n          <>\n            <NetworkSelectorWrapper>\n              <NetworkSelector\n                network={network.id}\n                onChange={(networkId) => {\n                  handleNetworkSelected(networkId);\n                  resetForm();\n                }}\n              />\n            </NetworkSelectorWrapper>\n            <ContractSelectionWrapper>\n              <FieldWrapper>\n                <ContractSelectLabelWrapper>\n                  <label htmlFor=\"address\" className=\"input-group-header\">\n                    {translateRaw('CONTRACT_TITLE')}\n                  </label>\n                  {contract && contract.isCustom && (\n                    <DeleteLabel onClick={() => handleDeleteContract(contract.uuid)}>\n                      {translateRaw('ACTION_15')}\n                    </DeleteLabel>\n                  )}\n                </ContractSelectLabelWrapper>\n                <ContractLookupField\n                  name=\"address\"\n                  contracts={contracts}\n                  error={errors && touched.address && errors.address && errors.address.value}\n                  network={network}\n                  isResolvingName={isResolvingName}\n                  setIsResolvingDomain={setIsResolvingDomain}\n                  onSelect={(option) => {\n                    // @ts-expect-error: Contract vs IReceiverAddress. @todo: this is a bug.\n                    handleContractSelected(option);\n\n                    handleAddressOrDomainChanged(option.value);\n                  }}\n                  onChange={(address) => handleAddressOrDomainChanged(address)}\n                  value={values.address}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  setFieldError={setFieldError}\n                />\n              </FieldWrapper>\n            </ContractSelectionWrapper>\n            <FieldWrapper>\n              <InputWrapper onClick={() => setWasContractInteracted(false)}>\n                <InputField\n                  name=\"abi\"\n                  label={\n                    <>\n                      {translateRaw('CONTRACT_JSON')}\n                      <LinkApp\n                        href={getKBHelpArticle(KB_HELP_ARTICLE.WHAT_IS_CONTRACT_ABI)}\n                        isExternal={true}\n                      >\n                        <Icon width=\"16px\" type=\"questionBlack\" />\n                      </LinkApp>\n                    </>\n                  }\n                  value={abi}\n                  placeholder={`[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"param1\",\"type\":\"uint256\",\"indexed\":true}],\"name\":\"Event\"},{\"type\":\"function\",\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"foo\",\"outputs\":[]}]`}\n                  onChange={({ target: { value } }) => {\n                    handleAbiChanged(value);\n                    setWasAbiEditedManually(true);\n                  }}\n                  textarea={true}\n                  resizableTextArea={true}\n                  height={'108px'}\n                  maxHeight={wasContractInteracted ? '108px' : 'none'}\n                  disabled={!customEditingMode}\n                />\n              </InputWrapper>\n              {customEditingMode && (\n                <>\n                  <SaveContractWrapper>\n                    <InputField\n                      label={translateRaw('CONTRACT_NAME')}\n                      value={customContractName}\n                      placeholder={translateRaw('CONTRACT_NAME_PLACEHOLDER')}\n                      onChange={({ target: { value } }) => handleCustomContractNameChanged(value)}\n                    />\n                    <SaveButtonWrapper>\n                      <Button\n                        color={BLUE_LIGHT}\n                        large={false}\n                        secondary={true}\n                        onClick={saveContract}\n                      >\n                        {translateRaw('SAVE_CONTRACT')}\n                      </Button>\n                    </SaveButtonWrapper>\n                  </SaveContractWrapper>\n                </>\n              )}\n              {error && (\n                <ErrorWrapper>\n                  <InlineMessage>{error}</InlineMessage>\n                </ErrorWrapper>\n              )}\n            </FieldWrapper>\n\n            <ButtonWrapper>\n              <Button\n                color={WHITE}\n                disabled={wasContractInteracted}\n                onClick={submitInteract}\n                fullwidth={true}\n              >\n                {translateRaw('INTERACT_WITH_CONTRACT')}\n              </Button>\n            </ButtonWrapper>\n            {showGeneratedForm && abi && (\n              <GeneratedInteractionForm\n                abi={tryAbiParse(abi)}\n                handleInteractionFormSubmit={handleInteractionFormSubmit}\n                account={account}\n                handleAccountSelected={handleAccountSelected}\n                handleInteractionFormWriteSubmit={handleInteractionFormWriteSubmit}\n                network={network}\n                handleGasSelectorChange={handleGasSelectorChange}\n                contractAddress={contractAddress}\n                interactionDataFromURL={interactionDataFromURL}\n                nonce={nonce}\n                gasLimit={gasLimit}\n                gasPrice={gasPrice}\n                maxFeePerGas={maxFeePerGas}\n                maxPriorityFeePerGas={maxPriorityFeePerGas}\n                handleNonceChange={handleNonceChange}\n                handleGasLimitChange={handleGasLimitChange}\n              />\n            )}\n          </>\n        );\n      }}\n    </Formik>\n  );\n}\n\nexport default withRouter(Interact);\n","import { parse } from 'query-string';\n\nexport const getParsedQueryString = (queryString: string) => {\n  const {\n    network: networkIdFromUrl,\n    address: addressFromUrl,\n    function: functionFromUrl,\n    input\n  } = parse(queryString);\n\n  const inputsArray: string[] = !input ? [] : Array.isArray(input) ? input : [input];\n\n  const inputsFromUrl = inputsArray.map((i) => ({\n    name: i.includes(':') ? i.substr(0, i.indexOf(':')) : '',\n    value: i.includes(':') ? i.substr(i.indexOf(':') + 1, i.length) : ''\n  }));\n\n  return {\n    networkIdFromUrl,\n    addressFromUrl,\n    functionFromUrl,\n    inputsFromUrl\n  };\n};\n","import { useEffect, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Button, InlineMessage, InputField, Selector, Spinner, Typography } from '@components';\nimport { COLORS, monospace, SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport { ISimpleTxForm, Network, StoreAccount } from '@types';\n\nimport {\n  constructGasCallProps,\n  generateFunctionFieldsDisplayNames,\n  getFunctionsFromABI,\n  isPayable,\n  isReadOperation,\n  setFunctionOutputValues\n} from '../helpers';\nimport { ABIField, ABIItem } from '../types';\nimport { BooleanOutputField, BooleanSelector, FieldLabel } from './fields';\nimport FunctionDropdownItem from './FunctionDropdownItem';\nimport WriteForm from './WriteForm';\n\nconst { GREY_LIGHTER, WHITE } = COLORS;\n\ninterface FieldWraperProps {\n  isOutput?: boolean;\n}\n\nconst DropdownWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n\nconst FieldWrapper = styled.div<FieldWraperProps>`\n  display: flex;\n  flex-direction: column;\n  padding-left: ${(props) => (props.isOutput ? '30px' : 0)};\n\n  flex: 1;\n  p {\n    font-size: 1em;\n  }\n`;\n\nconst Label = styled(Typography)`\n  line-height: 1;\n  margin-bottom: 9px;\n  font-weight: bold;\n`;\n\nconst ActionWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: left;\n`;\n\nconst SpinnerWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst FormFieldsWrapper = styled.div`\n  input {\n    font-family: ${monospace};\n    :disabled {\n      background-color: ${GREY_LIGHTER};\n    }\n  }\n`;\n\nconst HorizontalLine = styled.div`\n  height: 1px;\n  color: #000;\n  background-color: ${GREY_LIGHTER};\n  width: 100%;\n  margin: 20px 0;\n`;\n\nconst ActionButton = styled(Button)`\n  margin-top: 18px;\n`;\n\nconst WriteFormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst ErrorMessage = styled(InlineMessage)`\n  padding-top: ${SPACING.XS};\n`;\n\ninterface Props {\n  abi: ABIItem[];\n  account: StoreAccount;\n  network: Network;\n  nonce: string;\n  gasLimit: string;\n  gasPrice: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n\n  contractAddress: string;\n  interactionDataFromURL: { functionName?: string; inputs: { name: string; value: string }[] };\n  handleInteractionFormSubmit(submitedFunction: ABIItem): Promise<TObject>;\n  handleInteractionFormWriteSubmit(submitedFunction: ABIItem): Promise<TObject>;\n  handleAccountSelected(account: StoreAccount | undefined): void;\n  handleGasSelectorChange(\n    payload: Partial<Pick<ISimpleTxForm, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>>\n  ): void;\n  handleGasLimitChange(payload: string): void;\n  handleNonceChange(payload: string): void;\n}\n\nexport default function GeneratedInteractionForm({\n  abi,\n  handleInteractionFormSubmit,\n  account,\n  network,\n  nonce,\n  gasLimit,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  contractAddress,\n  handleAccountSelected,\n  handleInteractionFormWriteSubmit,\n  handleGasSelectorChange,\n  handleNonceChange,\n  handleGasLimitChange,\n  interactionDataFromURL\n}: Props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentFunction, setCurrentFunction] = useState<ABIItem | undefined>(undefined);\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [gasCallProps, setGasCallProps] = useState({});\n  const [isFormFilledFromURL, setIsFormFilledFromURL] = useState(false);\n  const functions = getFunctionsFromABI(abi);\n\n  const updateGasCallProps = () => {\n    if (!account || !currentFunction) return;\n    setGasCallProps(constructGasCallProps(contractAddress, currentFunction, account));\n  };\n\n  useEffect(updateGasCallProps, [account]);\n\n  const handleFunctionSelected = (selectedFunction?: ABIItem) => {\n    if (!selectedFunction) return;\n\n    const newFunction = generateFunctionFieldsDisplayNames(selectedFunction);\n    setCurrentFunction(newFunction);\n    setError(undefined);\n\n    if (isReadOperation(newFunction) && newFunction.inputs.length === 0) {\n      submitFormRead(newFunction);\n    }\n  };\n\n  const handleInputChange = (fieldName: string, value: string) => {\n    const updatedFunction = Object.assign({}, currentFunction);\n    const inputIndexToChange = updatedFunction.inputs.findIndex((x) => x.name === fieldName);\n\n    if (updatedFunction.inputs[inputIndexToChange]) {\n      updatedFunction.inputs[inputIndexToChange].value = value;\n    }\n\n    setCurrentFunction(updatedFunction);\n  };\n\n  const submitFormRead = async (submitedFunction: ABIItem) => {\n    if (!submitedFunction) return;\n\n    setError(undefined);\n    try {\n      setIsLoading(true);\n      const outputValues = await handleInteractionFormSubmit(submitedFunction);\n      const functionWithOutputValues = setFunctionOutputValues(submitedFunction, outputValues);\n      setCurrentFunction(functionWithOutputValues);\n    } catch (e) {\n      setError(e.reason ? e.reason : e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const submitFormWrite = async (submitedFunction: ABIItem) => {\n    if (!submitedFunction) return;\n\n    setError(undefined);\n    try {\n      setIsLoading(true);\n      await handleInteractionFormWriteSubmit(submitedFunction);\n    } catch (e) {\n      setError(e.reason ? e.reason : e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  let isRead = true;\n  let inputs: ABIField[] = [];\n  let outputs: ABIField[] = [];\n\n  if (currentFunction !== undefined) {\n    isRead = isReadOperation(currentFunction);\n    inputs = currentFunction.inputs;\n    outputs = currentFunction.outputs;\n  }\n\n  const { functionName: functionNameFromURL, inputs: inputsFromURL } = interactionDataFromURL;\n  const functionFromURL = functions.find((x) => x.name === functionNameFromURL);\n\n  if (functionFromURL && !currentFunction) {\n    handleFunctionSelected(functionFromURL);\n  }\n\n  useEffect(() => {\n    if (!isFormFilledFromURL && currentFunction && functionNameFromURL === currentFunction.name) {\n      inputsFromURL.forEach((inputFromURL) => {\n        handleInputChange(inputFromURL.name, inputFromURL.value);\n      });\n      setIsFormFilledFromURL(true);\n      //if all inputs are prefilled then trigger read button\n      if (isRead && currentFunction.inputs.every((input) => input.value)) {\n        submitFormRead(currentFunction);\n      }\n    }\n  }, [currentFunction]);\n\n  return (\n    <>\n      <HorizontalLine />\n      <DropdownWrapper>\n        <Label>{translateRaw('CONTRACT_INTERACT_TITLE')}</Label>\n        <Selector\n          value={currentFunction}\n          options={functions}\n          onChange={(selectedFunction) => {\n            handleFunctionSelected(selectedFunction);\n          }}\n          optionComponent={({ data, selectOption }) => (\n            <FunctionDropdownItem option={data} onSelect={selectOption} paddingLeft={SPACING.SM} />\n          )}\n          valueComponent={({ value }) => <FunctionDropdownItem option={value} />}\n          searchable={true}\n        />\n      </DropdownWrapper>\n\n      <FormFieldsWrapper>\n        {currentFunction && (\n          <>\n            {inputs.length > 0 && (\n              <div>\n                {inputs.map((field, index) => {\n                  return (\n                    <FieldWrapper key={`${field.displayName}${index}${currentFunction.name}`}>\n                      {field.type === 'bool' ? (\n                        <BooleanSelector\n                          fieldName={field.name}\n                          fieldType={field.type}\n                          fieldDisplayName={field.displayName!}\n                          handleInputChange={handleInputChange}\n                          value={field.value}\n                        />\n                      ) : (\n                        <InputField\n                          name={field.name}\n                          label={\n                            <FieldLabel fieldName={field.displayName!} fieldType={field.type} />\n                          }\n                          value={field.value}\n                          onChange={({ target: { value } }) => handleInputChange(field.name, value)}\n                          validate={updateGasCallProps}\n                        />\n                      )}\n                    </FieldWrapper>\n                  );\n                })}\n              </div>\n            )}\n\n            {isRead && (\n              <div>\n                {outputs.map((field, index) => {\n                  return (\n                    <FieldWrapper\n                      isOutput={true}\n                      key={`${field.displayName}${index}${currentFunction.name}`}\n                    >\n                      {field.value !== undefined && field.type === 'bool' ? (\n                        <BooleanOutputField\n                          fieldName={field.displayName!}\n                          fieldType={field.type}\n                          fieldValue={field.value}\n                        />\n                      ) : (\n                        <InputField\n                          label={\n                            <FieldLabel\n                              fieldName={field.displayName!}\n                              fieldType={field.type}\n                              isOutput={true}\n                            />\n                          }\n                          value={field.value}\n                          disabled={true}\n                        />\n                      )}\n                    </FieldWrapper>\n                  );\n                })}\n              </div>\n            )}\n            <ActionWrapper>\n              {isRead && inputs.length > 0 && (\n                <ActionButton\n                  color={WHITE}\n                  onClick={() => submitFormRead(currentFunction)}\n                  fullwidth={true}\n                >\n                  {translateRaw('ACTION_16')}\n                </ActionButton>\n              )}\n              {!isRead && (\n                <WriteFormWrapper>\n                  <HorizontalLine />\n                  {isPayable(currentFunction) && (\n                    <FieldWrapper>\n                      <InputField\n                        label={translateRaw('VALUE')}\n                        value={currentFunction.payAmount}\n                        onChange={({ target: { value } }) =>\n                          setCurrentFunction({\n                            ...currentFunction,\n                            payAmount: value\n                          })\n                        }\n                        validate={updateGasCallProps}\n                      />\n                    </FieldWrapper>\n                  )}\n                  <WriteForm\n                    account={account}\n                    network={network}\n                    handleAccountSelected={handleAccountSelected}\n                    handleSubmit={submitFormWrite}\n                    currentFunction={currentFunction}\n                    handleGasSelectorChange={handleGasSelectorChange}\n                    handleGasLimitChange={handleGasLimitChange}\n                    handleNonceChange={handleNonceChange}\n                    estimateGasCallProps={gasCallProps}\n                    nonce={nonce}\n                    gasLimit={gasLimit}\n                    gasPrice={gasPrice}\n                    maxFeePerGas={maxFeePerGas}\n                    maxPriorityFeePerGas={maxPriorityFeePerGas}\n                  />\n                </WriteFormWrapper>\n              )}\n            </ActionWrapper>\n            <SpinnerWrapper>{isLoading && <Spinner size={2} />}</SpinnerWrapper>\n            {error && (\n              <ErrorMessage>\n                {translate('GAS_LIMIT_ESTIMATION_ERROR_MESSAGE', { $error: error })}\n              </ErrorMessage>\n            )}\n          </>\n        )}\n      </FormFieldsWrapper>\n    </>\n  );\n}\n","import { Contract, ISimpleTxForm, ITxConfig, ITxReceipt, Network, StoreAccount } from '@types';\n\nexport enum ABIItemType {\n  FUNCTION = 'function',\n  EVENT = 'event',\n  CONSTRUCTOR = 'constructor'\n}\n\n// @todo: Add remaining types / use string insteand of enum\nexport enum ABIFieldType {\n  STRING = 'string',\n  BOOL = 'bool',\n  UINT8 = 'uint8',\n  UINT256 = 'uint256',\n  ADDRESS = 'address'\n}\n\nexport interface ABIField {\n  name: string;\n  type: ABIFieldType;\n  value?: string;\n  indexed?: boolean;\n  displayName?: string;\n}\n\nexport enum StateMutabilityType {\n  PURE = 'pure ',\n  VIEW = 'view',\n  NONPAYABLE = 'nonpayable',\n  PAYABLE = 'payable'\n}\n\nexport interface ABIItem {\n  stateMutability?: StateMutabilityType;\n  name: string;\n  type: ABIItemType;\n  payable?: boolean; // Deprecated, use stateMutability\n  constant?: boolean; // Deprecated, use stateMutability\n  anonymous?: boolean;\n  payAmount: string;\n  inputs: ABIField[];\n  outputs: ABIField[];\n}\n\nexport interface InteractWithContractState extends Omit<ISimpleTxForm, 'account'> {\n  network: Network;\n  contractAddress: string;\n  contract: Contract | undefined;\n  contracts: Contract[];\n  abi: string;\n  customContractName: string;\n  showGeneratedForm: boolean;\n  submitedFunction: ABIItem;\n  data: string;\n  txConfig: ITxConfig;\n  txReceipt: ITxReceipt | undefined;\n  addressOrDomainInput: string;\n  account?: StoreAccount;\n}\n","export { default as FieldLabel } from './FieldLabel';\nexport { default as BooleanOutputField } from './BooleanOutputField';\nexport { default as BooleanSelector } from './BooleanSelector';\n","import styled from 'styled-components';\n\nimport checkmark from '@assets/images/checkmark_outline.svg';\nimport cross from '@assets/images/cross_outline.svg';\nimport { Typography } from '@components';\n\nimport FieldLabel from './FieldLabel';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 65px;\n`;\n\nconst LabelWrapper = styled(Typography)`\n  margin-left: 4px;\n  opacity: 0.9;\n`;\n\ninterface IconProps {\n  isTrue: boolean;\n}\n\nconst Icon = styled.img<IconProps>`\n  filter: ${(props) =>\n    props.isTrue\n      ? 'invert(0.5) sepia(1) saturate(4) hue-rotate(70deg)'\n      : 'invert(0.5) sepia(1) saturate(3) hue-rotate(315deg)'};\n`;\n\ninterface Props {\n  fieldName: string;\n  fieldType: string;\n  fieldValue: string | boolean;\n}\n\nexport default function BooleanOutputField(props: Props) {\n  const { fieldName, fieldType, fieldValue } = props;\n\n  const isTrue = fieldValue === 'true' || fieldValue === true;\n  return (\n    <>\n      <FieldLabel fieldName={fieldName} fieldType={fieldType} isOutput={true} />\n      <Wrapper>\n        <Icon src={isTrue ? checkmark : cross} isTrue={isTrue} />\n        <LabelWrapper>{isTrue ? 'TRUE' : 'FALSE'}</LabelWrapper>\n      </Wrapper>\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"src/assets/checkmark_outline.ed81286862603f8eafedb85ee9c152c5.svg\";","export default __webpack_public_path__ + \"src/assets/cross_outline.476e84f5690192244c81d8de2cfde56f.svg\";","import styled from 'styled-components';\n\nimport { Selector } from '@components';\nimport { SPACING } from '@theme';\n\nimport FieldLabel from './FieldLabel';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst DropdownWrapper = styled.div`\n  margin-top: 8px;\n  margin-bottom: 15px;\n`;\n\ninterface Props {\n  fieldName: string;\n  fieldType: string;\n  fieldDisplayName: string;\n  value: any;\n  handleInputChange(name: string, option: any): void;\n}\n\nconst ContractDropdownItem = ({\n  option,\n  paddingLeft = '0',\n  onSelect\n}: {\n  option: { name: string };\n  paddingLeft?: string;\n  onSelect?(option: { name: string }): void;\n}) => (\n  <div\n    style={{ padding: `12px 15px 12px ${paddingLeft}` }}\n    onClick={() => onSelect && onSelect(option)}\n  >\n    {option.name}\n  </div>\n);\n\nexport default function BooleanSelector(props: Props) {\n  const { fieldName, fieldType, fieldDisplayName, value, handleInputChange } = props;\n  const options = [\n    { label: 'true', name: 'true', value: true },\n    { label: 'false', name: 'false', value: false }\n  ];\n  return (\n    <Wrapper>\n      <FieldLabel fieldName={fieldDisplayName} fieldType={fieldType} />\n      <DropdownWrapper>\n        <Selector\n          value={options.find((o) => o.value === value)}\n          options={options}\n          onChange={(option) => handleInputChange(fieldName, option.value)}\n          optionComponent={({ data, selectOption }) => (\n            <ContractDropdownItem option={data} onSelect={selectOption} paddingLeft={SPACING.SM} />\n          )}\n          valueComponent={({ value }) => <ContractDropdownItem option={value} />}\n          searchable={true}\n        />\n      </DropdownWrapper>\n    </Wrapper>\n  );\n}\n","import styled from 'styled-components';\n\nimport { COLORS } from '@theme';\nimport { translateRaw } from '@translations';\n\nimport { isReadOperation } from '../helpers';\nimport { ABIItem } from '../types';\n\ninterface OptionWrapperProps {\n  isSelectable: boolean;\n  paddingLeft?: string;\n}\n\nconst OptionWrapper = styled.div<OptionWrapperProps>`\n  display: flex;\n  justify-content: space-between;\n  padding: 12px 15px 12px 0px;\n  ${({ isSelectable, paddingLeft = '0' }) => `\n    font-weight: ${isSelectable ? 'default' : 'bold'};\n    padding-left: ${paddingLeft};\n  `}\n`;\n\ninterface StickerProps {\n  isRead: boolean;\n}\n\nconst Sticker = styled.div<StickerProps>`\n  background-color: ${(props) => (props.isRead ? COLORS.SUCCESS_GREEN : COLORS.BLUE_BRIGHT)};\n  border-radius: 28px;\n  color: ${COLORS.WHITE};\n  padding: 2px 8px 2px 8px;\n  font-size: 0.7em;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 50px;\n  opacity: 0.95;\n`;\n\ninterface Props {\n  option: ABIItem;\n  paddingLeft?: string;\n  onSelect?(option: ABIItem): void;\n}\n\nexport default function FunctionDropdownItem(props: Props) {\n  const { option, onSelect } = props;\n\n  const isRead = isReadOperation(option);\n  return (\n    <OptionWrapper\n      paddingLeft={props.paddingLeft}\n      onClick={() => (onSelect ? onSelect(option) : undefined)}\n      isSelectable={!!onSelect}\n    >\n      {option.name}\n      <Sticker isRead={isRead}>\n        {isRead ? translateRaw('READ').toUpperCase() : translateRaw('WRITE').toUpperCase()}\n      </Sticker>\n    </OptionWrapper>\n  );\n}\n","import { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { AccountSelector, Button, DemoGatewayBanner, GasSelector, Typography } from '@components';\nimport { AppState, getIsDemoMode, getStoreAccounts, useSelector } from '@store';\nimport { translateRaw } from '@translations';\nimport { ISimpleTxForm, Network, StoreAccount } from '@types';\nimport { getAccountsByNetwork, getAccountsByViewOnly } from '@utils';\nimport { pipe } from '@vendor';\n\nimport { ABIItem } from '../types';\n\nconst WriteActionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst AccountSelectorWrapper = styled.div`\n  margin-top: 8px;\n`;\n\nconst ActionButton = styled(Button)`\n  margin-top: 18px;\n`;\n\nconst CustomLabel = styled(Typography)`\n  font-size: 1em;\n`;\n\ninterface WriteProps {\n  account: StoreAccount;\n  network: Network;\n  currentFunction: ABIItem;\n  gasLimit: string;\n  nonce: string;\n  gasPrice: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n  estimateGasCallProps: TObject;\n  handleAccountSelected(account: StoreAccount): void;\n  handleSubmit(submitedFunction: ABIItem): void;\n  handleGasSelectorChange(\n    payload: Partial<Pick<ISimpleTxForm, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>>\n  ): void;\n  handleGasLimitChange(payload: string): void;\n  handleNonceChange(payload: string): void;\n}\n\nexport const WriteForm = (props: Props) => {\n  const {\n    account,\n    network,\n    currentFunction,\n    gasLimit,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    estimateGasCallProps,\n    handleAccountSelected,\n    handleSubmit,\n    handleGasSelectorChange,\n    handleGasLimitChange,\n    handleNonceChange,\n    isDemoMode\n  } = props;\n\n  const accounts = useSelector(getStoreAccounts);\n  const filteredAccounts = pipe(\n    (a: StoreAccount[]) => getAccountsByNetwork(a, network.id),\n    (a) => getAccountsByViewOnly(a, false)\n  )(accounts);\n\n  return (\n    <WriteActionWrapper>\n      {isDemoMode && <DemoGatewayBanner />}\n      <CustomLabel>{translateRaw('ACCOUNT')}</CustomLabel>\n      <AccountSelectorWrapper>\n        <AccountSelector\n          name=\"account\"\n          value={account}\n          accounts={filteredAccounts}\n          onSelect={(option: StoreAccount) => {\n            handleAccountSelected(option);\n          }}\n        />\n        {account && (\n          <GasSelector\n            gasPrice={gasPrice}\n            maxFeePerGas={maxFeePerGas}\n            maxPriorityFeePerGas={maxPriorityFeePerGas}\n            gasLimit={gasLimit}\n            nonce={nonce}\n            account={account}\n            setGasPrice={handleGasSelectorChange}\n            setGasLimit={handleGasLimitChange}\n            setNonce={handleNonceChange}\n            estimateGasCallProps={estimateGasCallProps}\n            network={network}\n          />\n        )}\n      </AccountSelectorWrapper>\n\n      <ActionButton\n        disabled={isDemoMode}\n        onClick={() => handleSubmit(currentFunction)}\n        fullwidth={true}\n      >\n        {translateRaw('ACTION_17')}\n      </ActionButton>\n    </WriteActionWrapper>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  isDemoMode: getIsDemoMode(state)\n});\n\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector> & WriteProps;\n\nexport default connector(WriteForm);\n","import { TxReceipt } from '@components/TransactionFlow';\nimport { translateRaw } from '@translations';\nimport { ITxConfig, ITxReceipt } from '@types';\n\ninterface Props {\n  txReceipt: ITxReceipt;\n  txConfig: ITxConfig;\n  goToFirstStep(): void;\n}\n\nexport default function InteractionReceipt(props: Props) {\n  const { txReceipt, txConfig, goToFirstStep, ...rest } = props;\n\n  return (\n    <TxReceipt\n      txReceipt={txReceipt}\n      txConfig={txConfig}\n      completeButton={translateRaw('INTERACT_ANOTHER')}\n      resetFlow={goToFirstStep}\n      onComplete={goToFirstStep}\n      {...rest}\n    />\n  );\n}\n","import { ConfirmTransaction } from '@components';\nimport { ITxConfig, ITxType } from '@types';\n\ninterface Props {\n  txConfig: ITxConfig;\n  goToNextStep(): void;\n}\n\nexport default function InteractionConfirm(props: Props) {\n  const { goToNextStep, txConfig } = props;\n\n  return (\n    <ConfirmTransaction\n      onComplete={goToNextStep}\n      resetFlow={goToNextStep}\n      txConfig={txConfig}\n      txType={ITxType.CONTRACT_INTERACT}\n    />\n  );\n}\n","import { useCallback } from 'react';\n\nimport debounce from 'lodash/debounce';\n\nimport { CREATION_ADDRESS, DEFAULT_NETWORK } from '@config';\nimport { makeBasicTxConfig, makePendingTxReceipt, makeTxFromForm, toTxReceipt } from '@helpers';\nimport {\n  EtherscanService,\n  getGasEstimate,\n  isValidETHAddress,\n  ProviderHandler,\n  useAccounts,\n  useContracts,\n  useNetworks\n} from '@services';\nimport { AbiFunction } from '@services/EthService/contracts/ABIFunction';\nimport { getIsValidENSAddressFunction } from '@services/EthService/ens';\nimport { translateRaw } from '@translations';\nimport {\n  Contract,\n  ExtendedContract,\n  ISimpleTxForm,\n  ITxHash,\n  ITxStatus,\n  ITxType,\n  NetworkId,\n  StoreAccount,\n  TAddress,\n  TUuid\n} from '@types';\nimport { inputGasLimitToHex, isSameAddress, isWeb3Wallet, TUseStateReducerFactory } from '@utils';\n\nimport { CUSTOM_CONTRACT_ADDRESS, customContract } from './constants';\nimport { constructGasCallProps, reduceInputParams } from './helpers';\nimport { ABIItem, InteractWithContractState } from './types';\n\nconst interactWithContractsInitialState = {\n  network: {},\n  addressOrDomainInput: '',\n  resolvingDomain: false,\n  contractAddress: '',\n  contract: undefined,\n  customContractName: '',\n  contracts: [],\n  abi: '',\n  showGeneratedForm: false,\n  submitedFunction: undefined,\n  data: undefined,\n  account: undefined,\n  gasPrice: '0xee6b2800',\n  gasLimit: '21000',\n  nonce: '0',\n  txConfig: undefined,\n  txReceipt: undefined\n};\n\nconst InteractWithContractsFactory: TUseStateReducerFactory<InteractWithContractState> = ({\n  state,\n  setState\n}) => {\n  const { getContractsByNetwork, createContract, deleteContract } = useContracts();\n  const { getNetworkById } = useNetworks();\n  const { addTxToAccount } = useAccounts();\n  const ethNetwork = getNetworkById(DEFAULT_NETWORK);\n\n  const handleNetworkSelected = (networkId: NetworkId) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      account: undefined,\n      network: getNetworkById(networkId),\n      contract: undefined,\n      contractAddress: '',\n      addressOrDomainInput: '',\n      abi: '',\n      customContractName: '',\n      resolvingDomain: false\n    }));\n  };\n\n  const updateNetworkContractOptions = () => {\n    // Get contracts for selected network\n    const networkContracts = getContractsByNetwork(state.network.id);\n\n    const contracts = networkContracts.map((x) => Object.assign({}, x, { label: x.name }));\n\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      contracts\n    }));\n  };\n\n  const handleContractSelected = (contract: Contract) => {\n    let contractAddress = '';\n    let addressOrDomainInput = '';\n    let contractAbi = '';\n\n    if (contract.address !== CUSTOM_CONTRACT_ADDRESS && contract.abi) {\n      contractAddress = contract.address;\n      addressOrDomainInput = contract.address;\n      contractAbi = contract.abi;\n    }\n\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      contract,\n      contractAddress,\n      addressOrDomainInput,\n      abi: contractAbi,\n      customContractName: '',\n      resolvingDomain: false\n    }));\n  };\n\n  const debouncedResolveAddressFromDomain = useCallback(\n    debounce((value: string) => resolveAddressFromDomain(value), 1500),\n    [state.contracts]\n  );\n  const handleAddressOrDomainChanged = (value: string) => {\n    if (selectExistingContract(value) || value === '' || value === undefined) {\n      return;\n    }\n\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      addressOrDomainInput: value,\n      contractAddress: value,\n      contract: customContract,\n      abi: ''\n    }));\n\n    if (getIsValidENSAddressFunction(state.network.chainId)(value)) {\n      debouncedResolveAddressFromDomain(value);\n    }\n\n    if (isValidETHAddress(value)) {\n      fetchABI(value);\n    }\n  };\n\n  const resolveAddressFromDomain = async (domain: string) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      resolvingDomain: true\n    }));\n\n    const provider = new ProviderHandler(ethNetwork);\n    const resolvedAddress = (await provider.resolveName(domain, state.network)) ?? CREATION_ADDRESS;\n\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      contractAddress: resolvedAddress,\n      resolvingDomain: false\n    }));\n\n    const exists = selectExistingContract(resolvedAddress);\n    if (!exists) {\n      fetchABI(resolvedAddress);\n    }\n  };\n\n  const selectExistingContract = (address: string) => {\n    const existingContract = state.contracts.find((c) =>\n      isSameAddress(c.address, address as TAddress)\n    );\n    if (existingContract) {\n      handleContractSelected(existingContract);\n      return true;\n    }\n    return false;\n  };\n\n  const fetchABI = async (address: string) => {\n    const fetchedAbi = await EtherscanService.instance.getContractAbi(address, state.network.id);\n    if (fetchedAbi) {\n      setState((prevState: InteractWithContractState) => ({\n        ...prevState,\n        abi: fetchedAbi\n      }));\n    }\n  };\n\n  const handleAbiChanged = (abi: string) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      abi\n    }));\n  };\n\n  const handleCustomContractNameChanged = (customContractName: string) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      customContractName\n    }));\n  };\n\n  const handleSaveContractSubmit = () => {\n    if (!state.contractAddress || !state.customContractName || !state.abi) {\n      throw new Error(translateRaw('INTERACT_WRITE_ERROR_MISSING_DATA'));\n    }\n\n    if (!isValidETHAddress(state.contractAddress)) {\n      throw new Error(translateRaw('INTERACT_ERROR_INVALID_ADDRESS'));\n    }\n\n    try {\n      JSON.parse(state.abi);\n    } catch (e) {\n      throw new Error(`ABI Error: ${e.message}`);\n    }\n\n    if (state.contracts.find((item) => item.name === state.customContractName)) {\n      throw new Error(translateRaw('INTERACT_SAVE_ERROR_NAME_EXISTS'));\n    }\n    const contract: ExtendedContract = createContract({\n      abi: state.abi,\n      address: state.contractAddress as TAddress,\n      name: state.customContractName,\n      label: state.customContractName,\n      networkId: state.network.id,\n      isCustom: true\n    });\n    updateNetworkContractOptions();\n    handleContractSelected(contract);\n  };\n\n  const handleDeleteContract = (contractUuid: TUuid) => {\n    deleteContract(contractUuid);\n    updateNetworkContractOptions();\n    handleContractSelected(customContract);\n  };\n\n  const displayGeneratedForm = (visible: boolean) => {\n    if (visible) {\n      if (!state.contractAddress || !state.abi) {\n        throw new Error(translateRaw('INTERACT_ERROR_NO_CONTRACT_SELECTED'));\n      }\n\n      if (!isValidETHAddress(state.contractAddress)) {\n        throw new Error(translateRaw('INTERACT_ERROR_INVALID_ADDRESS'));\n      }\n\n      try {\n        JSON.parse(state.abi);\n      } catch (e) {\n        throw new Error(`ABI Error: ${e.message}`);\n      }\n    }\n\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      showGeneratedForm: visible\n    }));\n  };\n\n  const handleInteractionFormSubmit = async (submitedFunction: ABIItem) => {\n    const { network, contractAddress } = state;\n    const { encodeInput, decodeOutput } = new AbiFunction(submitedFunction, []);\n    const parsedInputs = reduceInputParams(submitedFunction);\n\n    const providerHandler = new ProviderHandler(network);\n    const data = { to: contractAddress, data: encodeInput(parsedInputs) };\n\n    const result = await providerHandler.call(data);\n\n    return decodeOutput(result, network.chainId);\n  };\n\n  const handleInteractionFormWriteSubmit = async (\n    submittedFunction: ABIItem,\n    after: () => void\n  ) => {\n    const {\n      contractAddress,\n      account,\n      nonce,\n      gasLimit,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = state;\n\n    if (!account) {\n      throw new Error(translateRaw('INTERACT_WRITE_ERROR_NO_ACCOUNT'));\n    }\n\n    const { network } = account;\n\n    const { value, data } = constructGasCallProps(contractAddress, submittedFunction, account);\n\n    const { gasLimit: unusedGasLimit, ...transaction } = makeTxFromForm(\n      {\n        gasPrice,\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        account,\n        address: contractAddress,\n        network\n      },\n      value!,\n      data!\n    );\n\n    // check if transaction fails everytime\n    await getGasEstimate(network, transaction);\n\n    const tx = { ...transaction, gasLimit: inputGasLimitToHex(gasLimit) };\n\n    const txConfig = makeBasicTxConfig(tx, account, submittedFunction.payAmount);\n\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      txConfig\n    }));\n\n    after();\n  };\n\n  const handleAccountSelected = (account?: StoreAccount) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      account\n    }));\n  };\n\n  const handleTxSigned = async (signResponse: any, after: () => void) => {\n    const { account, txConfig } = state;\n\n    if (!account) {\n      return;\n    }\n\n    if (isWeb3Wallet(account.wallet)) {\n      const txReceipt =\n        signResponse && signResponse.hash\n          ? signResponse\n          : toTxReceipt(signResponse, ITxStatus.PENDING)(ITxType.CONTRACT_INTERACT, txConfig);\n      addTxToAccount(state.txConfig.senderAccount, {\n        ...txReceipt,\n        to: state.txConfig.receiverAddress,\n        from: state.txConfig.senderAccount.address,\n        amount: state.txConfig.amount\n      });\n      setState((prevState: InteractWithContractState) => ({\n        ...prevState,\n        txReceipt\n      }));\n\n      after();\n    } else {\n      const provider = new ProviderHandler(account.network);\n      provider\n        .sendRawTx(signResponse)\n        .then((retrievedTxReceipt) => retrievedTxReceipt.hash as ITxHash)\n        .catch((hash) => hash as ITxHash)\n        .then((txHash) => {\n          const pendingTxReceipt = makePendingTxReceipt(txHash)(\n            ITxType.CONTRACT_INTERACT,\n            state.txConfig\n          );\n          addTxToAccount(state.txConfig.senderAccount, pendingTxReceipt);\n          setState((prevState: InteractWithContractState) => ({\n            ...prevState,\n            txReceipt: pendingTxReceipt\n          }));\n        })\n        .finally(after);\n    }\n  };\n\n  const handleGasSelectorChange = (\n    payload: Pick<ISimpleTxForm, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>\n  ) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      ...payload\n    }));\n  };\n\n  const handleGasLimitChange = (gasLimit: string) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      gasLimit\n    }));\n  };\n\n  const handleNonceChange = (nonce: string) => {\n    setState((prevState: InteractWithContractState) => ({\n      ...prevState,\n      nonce\n    }));\n  };\n\n  return {\n    handleNetworkSelected,\n    handleAddressOrDomainChanged,\n    handleContractSelected,\n    handleAbiChanged,\n    handleCustomContractNameChanged,\n    handleSaveContractSubmit,\n    updateNetworkContractOptions,\n    displayGeneratedForm,\n    handleInteractionFormSubmit,\n    handleInteractionFormWriteSubmit,\n    handleAccountSelected,\n    handleTxSigned,\n    handleGasSelectorChange,\n    handleDeleteContract,\n    handleGasLimitChange,\n    handleNonceChange,\n    interactWithContractsState: state\n  };\n};\n\nexport { interactWithContractsInitialState, InteractWithContractsFactory };\n"],"sourceRoot":""}