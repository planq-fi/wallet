{"version":3,"sources":["webpack:///./src/features/TokenMigration/index.ts","webpack:///./src/features/TokenMigration/helpers.ts","webpack:///./src/features/TokenMigration/config.ts","webpack:///./src/features/TokenMigration/AaveTokenMigration/config.ts","webpack:///./src/features/TokenMigration/AntTokenMigration/config.ts","webpack:///./src/features/TokenMigration/GolemTokenMigration/config.ts","webpack:///./src/features/TokenMigration/RepTokenMigration/config.ts","webpack:///./src/features/TokenMigration/TokenMigrationStepper.tsx","webpack:///./src/features/TokenMigration/components/TokenMigrationConfirm.tsx","webpack:///./src/features/TokenMigration/components/TokenMigrationForm.tsx","webpack:///./src/features/TokenMigration/AaveTokenMigration/index.ts","webpack:///./src/features/TokenMigration/AaveTokenMigration/helpers.ts","webpack:///./src/features/TokenMigration/AntTokenMigration/index.ts","webpack:///./src/features/TokenMigration/AntTokenMigration/helpers.ts","webpack:///./src/features/TokenMigration/GolemTokenMigration/index.ts","webpack:///./src/features/TokenMigration/GolemTokenMigration/helpers.ts","webpack:///./src/features/TokenMigration/RepTokenMigration/index.ts","webpack:///./src/features/TokenMigration/RepTokenMigration/helpers.ts","webpack:///./src/features/TokenMigration/components/TokenMigrationMultiTx.tsx","webpack:///./src/features/TokenMigration/components/TokenMigrationReceipt.tsx","webpack:///./src/features/TokenMigration/TokenMigrationStepper.reducer.tsx"],"names":["TokenMigrationStepper","rawTransaction","account","amount","tokenMigrationConfig","address","network","baseAsset","getAssetByUUID","assets","asset","fromAssetUuid","from","receiverAddress","senderAccount","networkId","id","MIGRATION_CONFIGS","MigrationType","REP","repTokenMigrationConfig","ANT","GOLEM","golemTokenMigrationConfig","AAVE","migrationConfig","AAVE_CONTRACT","LEND_CONTRACT","title","translateRaw","toContractAddress","fromContractAddress","generateAssetUUID","DEFAULT_NETWORK_CHAINID","toAssetUuid","formActionBtn","formAmountTooltip","receiptTitle","txConstructionConfigs","txType","ITxType","APPROVAL","stepTitle","stepContent","actionBtnText","stepSvg","step1SVG","constructTxFn","createApproveTx","AAVE_TOKEN_MIGRATION","step2SVG","createMigrationTx","ANTv1_CONTRACT","ANTv2_CONTRACT","ANT_TOKEN_MIGRATION","GOLEMV1UUID","GOLEMV2UUID","GOLEM_TOKEN_MIGRATION","createGolemMigrationTx","REPV1UUID","REPV2UUID","REP_TOKEN_MIGRATION","createRepMigrationTx","accounts","useSelector","getStoreAccounts","getAssets","defaultMigration","Object","values","find","migration","config","a","uuid","filteredAccounts","getAccountsWithAssetBalance","length","reducerState","dispatch","useReducer","tokenMigrationReducer","useEffect","handleMigrationChange","state","prepareTx","sendTx","stopYield","initWith","useTxMulti","canYield","isSubmitting","transactions","error","payload","type","actionTypes","SELECT_MIGRATION","steps","label","component","TokenMigrationForm","props","changeMigration","actions","formData","txs","map","txConstructionConfig","metadata","receivingAsset","Promise","resolve","FORM_SUBMIT","createSignConfirmAndReceiptSteps","backStepTitle","flowConfig","multiTxTitle","receiptComponent","TokenMigrationReceipt","multiTxComponent","ConfirmTokenMigrationMultiTx","ConfirmTokenMigration","onRender","goToNextStep","status","ITxStatus","PREPARING","txRaw","defaultBackPath","ROUTE_PATHS","DASHBOARD","path","defaultBackPathLabel","currentTxIdx","onComplete","currentTx","complete","txConfig","makeTokenMigrationTxConfig","ConfirmTransaction","resetFlow","STANDARD","FormFieldSubmitButton","Button","TokenMigrationFormUI","relevantAccounts","storeDefaultAccount","defaultAsset","isDemoMode","TokenMigrationFormSchema","object","shape","number","min","required","typeError","errors","touched","setFieldValue","setFieldTouched","useFormik","initialValues","storeDefaultAcc","nonce","gasPrice","gasLimit","maxFeePerGas","maxPriorityFeePerGas","enableReinitialize","validationSchema","onSubmit","noOp","selectedAccount","accountAssetAmt","decimal","formatUnits","BigNumber","balance","handleNonceEstimate","async","getNonce","undefined","isFormValid","migrationOptions","m","toString","value","migrationValue","DemoGatewayBanner","Box","mb","SPACING","LG","Label","htmlFor","TextSelector","options","onChange","option","AccountSelector","name","onSelect","InlineMessage","display","flexDirection","Tooltip","tooltip","AmountInput","disabled","onBlur","placeholder","className","loading","onClick","fetchUniversalGasPriceEstimate","then","estimate","gas","catch","console","data-testid","$error","reason","message","connect","getIsDemoMode","connector","networks","useNetworks","useAssets","n","PLQUUID","defaultStoreAccount","getDefaultAccount","filter","isEthereumAccount","defaultAccount","formatApproveTx","contractAddress","baseTokenAmount","toWei","DEFAULT_ASSET_DECIMAL","spenderAddress","MIGRATION_CONTRACT","form","data","AaveMigrator","migrateFromLEND","encodeInput","makeTxFromForm","AntMigrator","migrate","_amount","GolemV2Migration","_value","RepV2Token","migrateFromLegacyReputationToken","t","broadcastingIndex","findIndex","s","BROADCASTED","index","icon","content","buttonText","VerticalStepper","currentStep","settings","useSettings","getAssetRate","useRates","getNetworkById","txItems","tx","idx","makeTxConfigFromTx","makeTxItem","txHash","txReceipt","baseAssetRate","fiat","getFiat","lastTxConfig","MultiTxReceipt","transactionsConfigs","action"],"mappings":"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","file":"TokenMigration.89ccd902d14a671ae71c.js","sourcesContent":["import TokenMigrationStepper from './TokenMigrationStepper';\n\nexport { default as TokenMigrationStepper } from './TokenMigrationStepper';\nexport { makeTokenMigrationTxConfig } from './helpers';\n\nexport default TokenMigrationStepper;\n","import { getAssetByUUID } from '@services/Store/Asset';\nimport { ITokenMigrationConfig, ITxConfig, ITxObject, StoreAccount } from '@types';\n\nexport const makeTokenMigrationTxConfig = (\n  rawTransaction: ITxObject,\n  account: StoreAccount,\n  amount: string\n) => (tokenMigrationConfig: ITokenMigrationConfig): ITxConfig => {\n  const { address, network } = account;\n  const baseAsset = getAssetByUUID(account.assets)(network.baseAsset)!;\n  const asset = getAssetByUUID(account.assets)(tokenMigrationConfig.fromAssetUuid)!;\n  const txConfig: ITxConfig = {\n    from: address,\n    receiverAddress: account.address,\n    senderAccount: account,\n    networkId: network.id,\n    asset,\n    baseAsset,\n    amount,\n    rawTransaction\n  };\n\n  return txConfig;\n};\n","import { MigrationType } from '@types';\n\nimport { migrationConfig } from './AaveTokenMigration';\nimport { tokenMigrationConfig } from './AntTokenMigration';\nimport { golemTokenMigrationConfig } from './GolemTokenMigration';\nimport { repTokenMigrationConfig } from './RepTokenMigration';\n\nexport const MIGRATION_CONFIGS = {\n  [MigrationType.REP]: repTokenMigrationConfig,\n  [MigrationType.ANT]: tokenMigrationConfig,\n  [MigrationType.GOLEM]: golemTokenMigrationConfig,\n  [MigrationType.AAVE]: migrationConfig\n};\n","import step2SVG from '@assets/images/icn-receive.svg';\nimport step1SVG from '@assets/images/icn-send.svg';\nimport { DEFAULT_NETWORK_CHAINID } from '@config';\nimport { translateRaw } from '@translations';\nimport { ITokenMigrationConfig, ITxType, TAddress } from '@types';\nimport { generateAssetUUID } from '@utils';\n\nimport { createApproveTx, createMigrationTx } from './helpers';\n\nexport const AAVE_CONTRACT = '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9' as TAddress;\nexport const LEND_CONTRACT = '0x80fB784B7eD66730e8b1DBd9820aFD29931aab03' as TAddress;\nexport const MIGRATION_CONTRACT = '0x317625234562B1526Ea2FaC4030Ea499C5291de4' as TAddress;\n\nexport const migrationConfig: ITokenMigrationConfig = {\n  title: translateRaw('AAVE Token Migration'),\n  toContractAddress: AAVE_CONTRACT,\n  fromContractAddress: LEND_CONTRACT,\n  fromAssetUuid: generateAssetUUID(DEFAULT_NETWORK_CHAINID, LEND_CONTRACT),\n  toAssetUuid: generateAssetUUID(DEFAULT_NETWORK_CHAINID, AAVE_CONTRACT),\n  formActionBtn: translateRaw('AAVE_TOKEN_MIGRATION'),\n  formAmountTooltip: translateRaw('AAVE_TOKEN_MIGRATION_AMOUNT_DISABLED_TOOLTIP'),\n  receiptTitle: translateRaw('AAVE_TOKEN_MIGRATION_RECEIPT'),\n  txConstructionConfigs: [\n    {\n      txType: ITxType.APPROVAL,\n      stepTitle: translateRaw('APPROVE_AAVE_TOKEN_MIGRATION'),\n      stepContent: translateRaw('AAVE_TOKEN_MIGRATION_STEP1_TEXT'),\n      actionBtnText: translateRaw('APPROVE_AAVE_TOKEN_MIGRATION'),\n      stepSvg: step1SVG,\n      constructTxFn: createApproveTx\n    },\n    {\n      txType: ITxType.AAVE_TOKEN_MIGRATION,\n      stepTitle: translateRaw('COMPLETE_AAVE_TOKEN_MIGRATION'),\n      stepContent: translateRaw('AAVE_TOKEN_MIGRATION_STEP2_TEXT'),\n      actionBtnText: translateRaw('CONFIRM_TRANSACTION'),\n      stepSvg: step2SVG,\n      constructTxFn: createMigrationTx\n    }\n  ]\n};\n","import step2SVG from '@assets/images/icn-receive.svg';\nimport step1SVG from '@assets/images/icn-send.svg';\nimport { translateRaw } from '@translations';\nimport { ITokenMigrationConfig, ITxType, TAddress } from '@types';\nimport { generateAssetUUID } from '@utils';\n\nimport { createApproveTx, createMigrationTx } from './helpers';\n\nexport const ANTv1_CONTRACT = '0x960b236A07cf122663c4303350609A66A7B288C0' as TAddress;\nexport const ANTv2_CONTRACT = '0xa117000000f279D81A1D3cc75430fAA017FA5A2e' as TAddress;\nexport const MIGRATION_CONTRACT = '0x078BEbC744B819657e1927bF41aB8C74cBBF912D' as TAddress;\n\nexport const tokenMigrationConfig: ITokenMigrationConfig = {\n  title: translateRaw('ANT Token Migration'),\n  toContractAddress: ANTv2_CONTRACT,\n  fromContractAddress: ANTv1_CONTRACT,\n  fromAssetUuid: generateAssetUUID(1, ANTv1_CONTRACT),\n  toAssetUuid: generateAssetUUID(1, ANTv2_CONTRACT),\n  formActionBtn: translateRaw('ANT_TOKEN_MIGRATION'),\n  formAmountTooltip: translateRaw('ANT_TOKEN_MIGRATION_AMOUNT_DISABLED_TOOLTIP'),\n  receiptTitle: translateRaw('ANT_TOKEN_MIGRATION_RECEIPT'),\n  txConstructionConfigs: [\n    {\n      txType: ITxType.APPROVAL,\n      stepTitle: translateRaw('APPROVE_ANT_TOKEN_MIGRATION'),\n      stepContent: translateRaw('ANT_TOKEN_MIGRATION_STEP1_TEXT'),\n      actionBtnText: translateRaw('APPROVE_ANT_TOKEN_MIGRATION'),\n      stepSvg: step1SVG,\n      constructTxFn: createApproveTx\n    },\n    {\n      txType: ITxType.ANT_TOKEN_MIGRATION,\n      stepTitle: translateRaw('COMPLETE_ANT_TOKEN_MIGRATION'),\n      stepContent: translateRaw('ANT_TOKEN_MIGRATION_STEP2_TEXT'),\n      actionBtnText: translateRaw('CONFIRM_TRANSACTION'),\n      stepSvg: step2SVG,\n      constructTxFn: createMigrationTx\n    }\n  ]\n};\n","import step1SVG from '@assets/images/icn-receive.svg';\nimport { GOLEMV1UUID, GOLEMV2UUID } from '@config';\nimport { translateRaw } from '@translations';\nimport { ITokenMigrationConfig, ITxType, TAddress } from '@types';\n\nimport { createGolemMigrationTx } from './helpers';\n\nexport const golemTokenMigrationConfig: ITokenMigrationConfig = {\n  title: translateRaw('GOLEM Token Migration'),\n  toContractAddress: '0x7DD9c5Cba05E151C895FDe1CF355C9A1D5DA6429' as TAddress,\n  fromContractAddress: '0xa74476443119A942dE498590Fe1f2454d7D4aC0d' as TAddress,\n  fromAssetUuid: GOLEMV1UUID,\n  toAssetUuid: GOLEMV2UUID,\n  formActionBtn: translateRaw('GOLEM_TOKEN_MIGRATION'),\n  formAmountTooltip: translateRaw('GOLEM_TOKEN_MIGRATION_AMOUNT_DISABLED_TOOLTIP'),\n  receiptTitle: translateRaw('GOLEM_TOKEN_MIGRATION_RECEIPT'),\n  txConstructionConfigs: [\n    {\n      txType: ITxType.GOLEM_TOKEN_MIGRATION,\n      stepTitle: translateRaw('COMPLETE_GOLEM_TOKEN_MIGRATION'),\n      stepContent: translateRaw('GOLEM_TOKEN_MIGRATION_STEP1_TEXT'),\n      actionBtnText: translateRaw('CONFIRM_TRANSACTION'),\n      stepSvg: step1SVG,\n      constructTxFn: createGolemMigrationTx\n    }\n  ]\n};\n\nexport const TOKEN_MIGRATION_GAS_LIMIT = 500000;\n","import step2SVG from '@assets/images/icn-receive.svg';\nimport step1SVG from '@assets/images/icn-send.svg';\nimport { REPV1UUID, REPV2UUID } from '@config';\nimport { translateRaw } from '@translations';\nimport { ITokenMigrationConfig, ITxType, TAddress } from '@types';\n\nimport { createApproveTx, createRepMigrationTx } from './helpers';\n\nexport const repTokenMigrationConfig: ITokenMigrationConfig = {\n  title: translateRaw('REP Token Migration'),\n  toContractAddress: '0x221657776846890989a759BA2973e427DfF5C9bB' as TAddress,\n  fromContractAddress: '0x1985365e9f78359a9B6AD760e32412f4a445E862' as TAddress,\n  fromAssetUuid: REPV1UUID,\n  toAssetUuid: REPV2UUID,\n  formActionBtn: translateRaw('REP_TOKEN_MIGRATION'),\n  formAmountTooltip: translateRaw('REP_TOKEN_MIGRATION_AMOUNT_DISABLED_TOOLTIP'),\n  receiptTitle: translateRaw('REP_TOKEN_MIGRATION_RECEIPT'),\n  txConstructionConfigs: [\n    {\n      txType: ITxType.APPROVAL,\n      stepTitle: translateRaw('APPROVE_REP_TOKEN_MIGRATION'),\n      stepContent: translateRaw('REP_TOKEN_MIGRATION_STEP1_TEXT'),\n      actionBtnText: translateRaw('APPROVE_REP_TOKEN_MIGRATION'),\n      stepSvg: step1SVG,\n      constructTxFn: createApproveTx\n    },\n    {\n      txType: ITxType.REP_TOKEN_MIGRATION,\n      stepTitle: translateRaw('COMPLETE_REP_TOKEN_MIGRATION'),\n      stepContent: translateRaw('REP_TOKEN_MIGRATION_STEP2_TEXT'),\n      actionBtnText: translateRaw('CONFIRM_TRANSACTION'),\n      stepSvg: step2SVG,\n      constructTxFn: createRepMigrationTx\n    }\n  ]\n};\n\nexport const TOKEN_MIGRATION_GAS_LIMIT = 500000;\n","import { useEffect, useReducer } from 'react';\n\nimport { createSignConfirmAndReceiptSteps } from '@components';\nimport { default as GeneralStepper, IStepperPath } from '@components/GeneralStepper';\nimport { ROUTE_PATHS } from '@config';\nimport { getAccountsWithAssetBalance } from '@features/SwapAssets/helpers';\nimport { useTxMulti } from '@hooks';\nimport { getAssets, getStoreAccounts, useSelector } from '@store';\nimport { translateRaw } from '@translations';\nimport { ITokenMigrationFormFull, ITxStatus, MigrationType, TokenMigrationState } from '@types';\n\nimport ConfirmTokenMigration from './components/TokenMigrationConfirm';\nimport TokenMigrationForm from './components/TokenMigrationForm';\nimport ConfirmTokenMigrationMultiTx from './components/TokenMigrationMultiTx';\nimport TokenMigrationReceipt from './components/TokenMigrationReceipt';\nimport { MIGRATION_CONFIGS } from './config';\nimport { tokenMigrationReducer } from './TokenMigrationStepper.reducer';\n\nconst TokenMigrationStepper = () => {\n  const accounts = useSelector(getStoreAccounts);\n  const assets = useSelector(getAssets);\n\n  const defaultMigration = Object.values(MigrationType).find((migration) => {\n    const config = MIGRATION_CONFIGS[migration];\n    const asset = assets.find((a) => a.uuid === config.fromAssetUuid);\n    const filteredAccounts = asset && getAccountsWithAssetBalance(accounts, asset, '0.001');\n    return filteredAccounts && filteredAccounts.length > 0;\n  });\n\n  const [reducerState, dispatch] = useReducer(tokenMigrationReducer, {\n    migration: MigrationType.REP\n  });\n\n  useEffect(() => {\n    if (defaultMigration) {\n      handleMigrationChange(defaultMigration);\n    }\n  }, [defaultMigration]);\n\n  const { state, prepareTx, sendTx, stopYield, initWith } = useTxMulti();\n  const { canYield, isSubmitting, transactions, error } = state;\n  const { account, amount, migration }: TokenMigrationState = reducerState;\n\n  const tokenMigrationConfig = MIGRATION_CONFIGS[migration];\n\n  const handleMigrationChange = (payload: MigrationType) =>\n    dispatch({ type: tokenMigrationReducer.actionTypes.SELECT_MIGRATION, payload });\n\n  const steps: IStepperPath[] = [\n    {\n      label: translateRaw('TOKEN_MIGRATION_HEADER'),\n      component: TokenMigrationForm,\n      props: {\n        changeMigration: handleMigrationChange,\n        migration,\n        account,\n        isSubmitting,\n        error\n      },\n      actions: (formData: ITokenMigrationFormFull) => {\n        initWith(\n          () => {\n            const txs = tokenMigrationConfig.txConstructionConfigs.map((txConstructionConfig) => ({\n              ...txConstructionConfig.constructTxFn(formData),\n              txType: txConstructionConfig.txType,\n              metadata: { receivingAsset: tokenMigrationConfig.toAssetUuid }\n            }));\n            return Promise.resolve(txs);\n          },\n          formData.account,\n          formData.account.network\n        );\n        dispatch({ type: tokenMigrationReducer.actionTypes.FORM_SUBMIT, payload: formData });\n      }\n    },\n    ...createSignConfirmAndReceiptSteps({\n      transactions,\n      backStepTitle: translateRaw('TOKEN_MIGRATION_HEADER'),\n      amount: amount!,\n      account: account!,\n      error,\n      flowConfig: tokenMigrationConfig,\n      receiptTitle: tokenMigrationConfig.receiptTitle,\n      multiTxTitle: translateRaw('CONFIRM_TRANSACTION'),\n      isSubmitting,\n      receiptComponent: TokenMigrationReceipt,\n      multiTxComponent:\n        transactions.length > 1 ? ConfirmTokenMigrationMultiTx : ConfirmTokenMigration,\n      sendTx,\n      prepareTx\n    })\n  ];\n\n  return (\n    <GeneralStepper\n      onRender={(goToNextStep) => {\n        // Allows to execute code when state has been updated after MTX hook has run\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n          if (!canYield) return;\n          // Make sure to prepare ETH tx before showing to user\n          if (transactions.length === 1 && transactions[0].status === ITxStatus.PREPARING) {\n            prepareTx(transactions[0].txRaw);\n          } else {\n            // Go to next step after preparing tx for MTX\n            goToNextStep();\n          }\n          stopYield();\n        }, [canYield]);\n      }}\n      steps={steps}\n      defaultBackPath={ROUTE_PATHS.DASHBOARD.path}\n      defaultBackPathLabel={ROUTE_PATHS.DASHBOARD.title}\n    />\n  );\n};\nexport default TokenMigrationStepper;\n","import { ConfirmTransaction } from '@components';\nimport { ITokenMigrationConfig, ITxMultiConfirmProps, ITxType, StoreAccount } from '@types';\n\nimport { makeTokenMigrationTxConfig } from '../helpers';\n\nexport default function ConfirmTokenMigration({\n  account,\n  amount,\n  currentTxIdx,\n  flowConfig,\n  transactions,\n  onComplete,\n  error\n}: ITxMultiConfirmProps & { account: StoreAccount; amount: string }) {\n  const currentTx = transactions[currentTxIdx];\n\n  const complete = () => onComplete && onComplete();\n\n  const txConfig = makeTokenMigrationTxConfig(\n    currentTx.txRaw,\n    account,\n    amount\n  )(flowConfig as ITokenMigrationConfig);\n\n  return (\n    <ConfirmTransaction\n      onComplete={complete}\n      resetFlow={complete}\n      txConfig={txConfig}\n      error={error}\n      txType={currentTx.txType ?? ITxType.STANDARD}\n    />\n  );\n}\n","import { useEffect } from 'react';\n\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatUnits } from '@ethersproject/units';\nimport { useFormik } from 'formik';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components';\nimport { Overwrite } from 'utility-types';\nimport { number, object } from 'yup';\n\nimport {\n  AccountSelector,\n  AmountInput,\n  Box,\n  Button,\n  DemoGatewayBanner,\n  InlineMessage,\n  Label,\n  OptionType,\n  TextSelector,\n  Tooltip\n} from '@components';\nimport { PLQUUID } from '@config';\nimport { getAccountsWithAssetBalance } from '@features/SwapAssets/helpers';\nimport { fetchUniversalGasPriceEstimate } from '@services/ApiService';\nimport { getNonce } from '@services/EthService';\nimport { useAssets, useNetworks } from '@services/Store';\nimport { isEthereumAccount } from '@services/Store/Account/helpers';\nimport { AppState, getDefaultAccount, getIsDemoMode, getStoreAccounts, useSelector } from '@store';\nimport { SPACING } from '@theme';\nimport translate, { translateRaw } from '@translations';\nimport {\n  Asset,\n  ExtendedAsset,\n  IAccount,\n  ISimpleTxFormFull,\n  MigrationType,\n  Network,\n  StoreAccount\n} from '@types';\nimport { isFormValid as checkFormValid, noOp } from '@utils';\n\nimport { MIGRATION_CONFIGS } from '../config';\n\nexport interface TokenMigrationProps extends ISimpleTxFormFull {\n  isSubmitting: boolean;\n  error?: Error;\n  migration: MigrationType;\n  changeMigration(migration: MigrationType): void;\n  onComplete(fields: any): void;\n  handleUserInputFormSubmit(fields: any): void;\n}\n\ninterface UIProps {\n  network: Network;\n  relevantAccounts: StoreAccount[];\n  storeDefaultAccount?: StoreAccount;\n  defaultAsset: ExtendedAsset;\n  isSubmitting: boolean;\n  error?: CustomError;\n  migration: MigrationType;\n  isDemoMode: boolean;\n  changeMigration(migration: MigrationType): void;\n  onComplete(fields: any): void;\n}\n\nconst FormFieldSubmitButton = styled(Button)`\n  width: 100%;\n  display: inline-block;\n  &:disabled {\n    background-color: rgba(0, 122, 153, 0.3);\n  }\n`;\n\nconst TokenMigrationForm = ({\n  migration,\n  isSubmitting,\n  error,\n  isDemoMode,\n  changeMigration,\n  onComplete\n}: Props) => {\n  const accounts = useSelector(getStoreAccounts);\n  const { networks } = useNetworks();\n  const { getAssetByUUID } = useAssets();\n  const network = networks.find((n) => n.baseAsset === PLQUUID) as Network;\n  const defaultStoreAccount = useSelector(getDefaultAccount());\n  const relevantAccounts = accounts.filter(isEthereumAccount);\n  const tokenMigrationConfig = MIGRATION_CONFIGS[migration];\n  const defaultAsset = (getAssetByUUID(tokenMigrationConfig.fromAssetUuid) ?? {}) as Asset;\n  const defaultAccount = accounts.find((a) =>\n    a.assets.find(({ uuid }) => uuid === tokenMigrationConfig.fromAssetUuid)\n  );\n  return (\n    <TokenMigrationFormUI\n      isSubmitting={isSubmitting}\n      network={network}\n      relevantAccounts={relevantAccounts}\n      storeDefaultAccount={defaultAccount ?? defaultStoreAccount}\n      defaultAsset={defaultAsset}\n      error={error}\n      migration={migration}\n      changeMigration={changeMigration}\n      onComplete={onComplete}\n      isDemoMode={isDemoMode}\n    />\n  );\n};\n\nexport const TokenMigrationFormUI = ({\n  isSubmitting,\n  error,\n  network,\n  relevantAccounts,\n  storeDefaultAccount,\n  defaultAsset,\n  migration,\n  onComplete,\n  changeMigration,\n  isDemoMode\n}: UIProps) => {\n  const getInitialFormikValues = (\n    storeDefaultAcc?: StoreAccount\n  ): Overwrite<ISimpleTxFormFull, { account?: StoreAccount }> => ({\n    account: storeDefaultAcc,\n    amount: '0',\n    asset: defaultAsset,\n    nonce: '0',\n    gasPrice: '20',\n    address: '',\n    gasLimit: '',\n    network,\n    maxFeePerGas: '20',\n    maxPriorityFeePerGas: '1'\n  });\n\n  const filteredAccounts = getAccountsWithAssetBalance(relevantAccounts, defaultAsset, '0.001');\n  const TokenMigrationFormSchema = object().shape({\n    amount: number()\n      .min(0, translateRaw('ERROR_0'))\n      .required(translateRaw('REQUIRED'))\n      .typeError(translateRaw('ERROR_0'))\n  });\n\n  const { values, errors, touched, setFieldValue, setFieldTouched } = useFormik({\n    initialValues: getInitialFormikValues(storeDefaultAccount),\n    enableReinitialize: true,\n    validationSchema: TokenMigrationFormSchema,\n    onSubmit: noOp\n  });\n  const { amount, asset, account: selectedAccount } = values;\n\n  const tokenMigrationConfig = MIGRATION_CONFIGS[migration];\n\n  useEffect(() => {\n    if (!values.account) return;\n    const accountAssetAmt = values.account.assets.find(\n      (a: Asset) => a.uuid === tokenMigrationConfig.fromAssetUuid\n    );\n    if (!accountAssetAmt || !asset.decimal) {\n      return;\n    }\n    setFieldValue('amount', formatUnits(BigNumber.from(accountAssetAmt.balance), asset.decimal)); // this would be better as a reducer imo.\n    setFieldValue('account', values.account); //if this gets deleted, it no longer shows as selected on interface, would like to set only object keys that are needed instead of full object\n\n    handleNonceEstimate(values.account);\n  }, [values.account, values.asset]);\n\n  const handleNonceEstimate = async (account: IAccount) => {\n    const nonce: number = await getNonce(values.network, account.address);\n    setFieldValue('nonce', nonce);\n  };\n\n  useEffect(() => {\n    if (\n      amount &&\n      asset &&\n      selectedAccount &&\n      !getAccountsWithAssetBalance(filteredAccounts, defaultAsset, amount).find(\n        (a) => a.uuid === selectedAccount.uuid\n      )\n    ) {\n      setFieldValue('account', undefined);\n    }\n  }, [amount, asset]);\n\n  const isFormValid = checkFormValid(errors);\n\n  const handleSubmit = () => {\n    if (isFormValid) {\n      fetchUniversalGasPriceEstimate(values.network)\n        .then(({ estimate: gas }) => {\n          onComplete({ ...values, ...gas });\n        })\n        .catch(console.error);\n    }\n  };\n\n  const migrationOptions = Object.values(MigrationType).map((m) => ({\n    label: m.toString(),\n    value: m\n  }));\n  const migrationValue = migrationOptions.find((m) => m.value === migration);\n\n  const handleMigrationChange = (option: OptionType<MigrationType>) =>\n    changeMigration(option.value);\n\n  return (\n    <>\n      {isDemoMode && <DemoGatewayBanner />}\n      <Box mb={SPACING.LG}>\n        <Label htmlFor=\"text-selector\">{translate('SELECT_A_MIGRATION')}</Label>\n        <TextSelector\n          value={migrationValue!}\n          options={migrationOptions}\n          onChange={handleMigrationChange}\n        />\n      </Box>\n      <Box mb={SPACING.LG}>\n        <Label htmlFor=\"account\">{translate('SELECT_YOUR_ACCOUNT')}</Label>\n        <AccountSelector\n          name={'account'}\n          value={values.account || null}\n          accounts={filteredAccounts}\n          asset={values.asset}\n          onSelect={(option: IAccount) => {\n            setFieldValue('account', option);\n          }}\n        />\n        {filteredAccounts.length === 0 && (\n          <InlineMessage>{translateRaw('NO_RELEVANT_ACCOUNTS')}</InlineMessage>\n        )}\n      </Box>\n      <Box mb={SPACING.LG} display=\"flex\" flexDirection=\"column\">\n        <Tooltip tooltip={tokenMigrationConfig.formAmountTooltip}>\n          <Label htmlFor=\"amount\">{translate('SEND_ASSETS_AMOUNT_LABEL')}</Label>\n        </Tooltip>\n        <AmountInput\n          disabled={true}\n          asset={values.asset}\n          value={values.amount || '0'}\n          onChange={noOp}\n          onBlur={() => {\n            setFieldTouched('amount');\n          }}\n          placeholder={'0.00'}\n        />\n        {errors && errors.amount && touched && touched.amount ? (\n          <InlineMessage className=\"SendAssetsForm-errors\">{errors.amount}</InlineMessage>\n        ) : null}\n      </Box>\n      <FormFieldSubmitButton\n        type=\"submit\"\n        loading={isSubmitting}\n        onClick={handleSubmit}\n        disabled={!isFormValid || isDemoMode}\n        data-testid=\"confirm-migrate\"\n      >\n        {tokenMigrationConfig.formActionBtn}\n      </FormFieldSubmitButton>\n      {error && (\n        <InlineMessage\n          value={translate('GAS_LIMIT_ESTIMATION_ERROR_MESSAGE', {\n            $error: error.reason ? error.reason : error.message\n          })}\n        />\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  isDemoMode: getIsDemoMode(state)\n});\n\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector> & TokenMigrationProps;\n\nexport default connector(TokenMigrationForm);\n","export * from './config';\n","import { DEFAULT_ASSET_DECIMAL } from '@config';\nimport { formatApproveTx, makeTxFromForm } from '@helpers';\nimport { AaveMigrator } from '@services/EthService/contracts';\nimport {\n  DistributiveOmit,\n  ITokenMigrationFormFull,\n  ITxData,\n  ITxObject,\n  ITxToAddress\n} from '@types';\nimport { toWei } from '@utils';\n\nimport { MIGRATION_CONTRACT } from './config';\n\nexport const createApproveTx = (\n  payload: ITokenMigrationFormFull\n): Omit<ITxObject, 'nonce' | 'gasLimit'> =>\n  formatApproveTx({\n    contractAddress: payload.asset.contractAddress as ITxToAddress,\n    baseTokenAmount: toWei(payload.amount, DEFAULT_ASSET_DECIMAL),\n    spenderAddress: MIGRATION_CONTRACT,\n    form: payload\n  });\n\nexport const createMigrationTx = (\n  payload: ITokenMigrationFormFull\n): DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> => {\n  const data = AaveMigrator.migrateFromLEND.encodeInput({\n    amount: toWei(payload.amount, DEFAULT_ASSET_DECIMAL)\n  }) as ITxData;\n  const { gasLimit, nonce, ...tx } = makeTxFromForm(\n    { ...payload, address: MIGRATION_CONTRACT },\n    '0',\n    data\n  );\n  return tx;\n};\n","export * from './config';\n","import { DEFAULT_ASSET_DECIMAL } from '@config';\nimport { formatApproveTx, makeTxFromForm } from '@helpers';\nimport { AntMigrator } from '@services/EthService';\nimport {\n  DistributiveOmit,\n  ITokenMigrationFormFull,\n  ITxData,\n  ITxObject,\n  ITxToAddress\n} from '@types';\nimport { toWei } from '@utils';\n\nimport { MIGRATION_CONTRACT } from './config';\n\nexport const createApproveTx = (\n  payload: ITokenMigrationFormFull\n): Omit<ITxObject, 'nonce' | 'gasLimit'> =>\n  formatApproveTx({\n    contractAddress: payload.asset.contractAddress as ITxToAddress,\n    baseTokenAmount: toWei(payload.amount, DEFAULT_ASSET_DECIMAL),\n    spenderAddress: MIGRATION_CONTRACT,\n    form: payload\n  });\n\nexport const createMigrationTx = (\n  payload: ITokenMigrationFormFull\n): DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> => {\n  const data = AntMigrator.migrate.encodeInput({\n    _amount: toWei(payload.amount, DEFAULT_ASSET_DECIMAL)\n  }) as ITxData;\n  const { gasLimit, nonce, ...tx } = makeTxFromForm(\n    { ...payload, address: MIGRATION_CONTRACT },\n    '0',\n    data\n  );\n  return tx;\n};\n","export * from './config';\n","import { DEFAULT_ASSET_DECIMAL } from '@config';\nimport { makeTxFromForm } from '@helpers';\nimport { GolemV2Migration } from '@services/EthService';\nimport { DistributiveOmit, ITokenMigrationFormFull, ITxData, ITxObject } from '@types';\nimport { toWei } from '@utils';\n\nimport { golemTokenMigrationConfig } from './config';\n\nexport const createGolemMigrationTx = (\n  payload: ITokenMigrationFormFull\n): DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> => {\n  const data = GolemV2Migration.migrate.encodeInput({\n    _value: toWei(payload.amount, DEFAULT_ASSET_DECIMAL)\n  }) as ITxData;\n  const { gasLimit, nonce, ...tx } = makeTxFromForm(\n    { ...payload, address: golemTokenMigrationConfig.fromContractAddress },\n    '0',\n    data\n  );\n  return tx;\n};\n","export * from './config';\n","import { DEFAULT_ASSET_DECIMAL } from '@config';\nimport { formatApproveTx, makeTxFromForm } from '@helpers';\nimport { RepV2Token } from '@services/EthService';\nimport {\n  DistributiveOmit,\n  ITokenMigrationFormFull,\n  ITxData,\n  ITxObject,\n  ITxToAddress\n} from '@types';\nimport { toWei } from '@utils';\n\nimport { repTokenMigrationConfig } from './config';\n\nexport const createApproveTx = (\n  payload: ITokenMigrationFormFull\n): DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> =>\n  formatApproveTx({\n    contractAddress: payload.asset.contractAddress as ITxToAddress,\n    baseTokenAmount: toWei(payload.amount, DEFAULT_ASSET_DECIMAL),\n    spenderAddress: repTokenMigrationConfig.toContractAddress,\n    form: payload\n  });\n\nexport const createRepMigrationTx = (\n  payload: ITokenMigrationFormFull\n): DistributiveOmit<ITxObject, 'nonce' | 'gasLimit'> => {\n  const data = RepV2Token.migrateFromLegacyReputationToken.encodeInput({}) as ITxData;\n  const { gasLimit, nonce, ...tx } = makeTxFromForm(\n    { ...payload, address: repTokenMigrationConfig.toContractAddress },\n    '0',\n    data\n  );\n  return tx;\n};\n","import path from 'ramda/src/path';\n\nimport { VerticalStepper } from '@components';\nimport { ITokenMigrationConfig, ITxMultiConfirmProps, ITxStatus } from '@types';\n\nexport default function ConfirmTokenMigrationMultiTx({\n  currentTxIdx,\n  transactions,\n  flowConfig,\n  onComplete,\n  error\n}: ITxMultiConfirmProps) {\n  const status = transactions.map((t) => path(['status'], t));\n\n  const broadcastingIndex = status.findIndex((s) => s === ITxStatus.BROADCASTED);\n  const steps = (flowConfig as ITokenMigrationConfig).txConstructionConfigs.map(\n    (txConstructionConfig, index) => ({\n      title: txConstructionConfig.stepTitle,\n      icon: txConstructionConfig.stepSvg,\n      content: txConstructionConfig.stepContent,\n      buttonText: txConstructionConfig.actionBtnText,\n      loading: status[index] === ITxStatus.BROADCASTED,\n      onClick: onComplete\n    })\n  );\n\n  return (\n    <div>\n      <VerticalStepper\n        currentStep={broadcastingIndex === -1 ? currentTxIdx : broadcastingIndex}\n        steps={steps}\n        error={error !== undefined}\n      />\n    </div>\n  );\n}\n","import { MultiTxReceipt } from '@components/TransactionFlow';\nimport { getFiat } from '@config/fiats';\nimport { makeTxConfigFromTx, makeTxItem } from '@helpers';\nimport { useAssets, useNetworks, useRates, useSettings } from '@services';\nimport { ITokenMigrationConfig, ITxType, StoreAccount, TxParcel } from '@types';\n\nimport { makeTokenMigrationTxConfig } from '../helpers';\n\nexport interface TokenMigrationReceiptProps {\n  account: StoreAccount;\n  amount: string;\n  transactions: TxParcel[];\n  flowConfig: ITokenMigrationConfig;\n  onComplete(): void;\n}\n\nexport default function TokenMigrationReceipt({\n  account,\n  amount,\n  transactions,\n  flowConfig,\n  onComplete\n}: TokenMigrationReceiptProps) {\n  const { settings } = useSettings();\n  const { getAssetByUUID, assets } = useAssets();\n  const { getAssetRate } = useRates();\n  const { getNetworkById } = useNetworks();\n  const txItems = transactions.map((tx, idx) => {\n    const txType = flowConfig.txConstructionConfigs[idx].txType;\n    const txConfig =\n      txType === ITxType.APPROVAL\n        ? makeTxConfigFromTx(tx.txRaw, assets, account.network, [account])\n        : makeTokenMigrationTxConfig(tx.txRaw, account, amount)(flowConfig);\n    return makeTxItem(txType, txConfig, tx.txHash!, tx.txReceipt);\n  });\n\n  const network = getNetworkById(txItems[0].txConfig.networkId);\n\n  const baseAsset = getAssetByUUID(network.baseAsset)!;\n\n  const baseAssetRate = getAssetRate(baseAsset);\n\n  const steps = flowConfig.txConstructionConfigs.map((txConstructionConfig) => ({\n    title: txConstructionConfig.stepTitle,\n    icon: txConstructionConfig.stepSvg\n  }));\n\n  const fiat = getFiat(settings);\n  const lastTxConfig =\n    flowConfig.txConstructionConfigs[flowConfig.txConstructionConfigs.length - 1];\n  return (\n    <MultiTxReceipt\n      txType={lastTxConfig.txType}\n      transactions={transactions}\n      transactionsConfigs={txItems.map(({ txConfig }) => txConfig)}\n      steps={steps}\n      account={account}\n      network={account.network}\n      baseAssetRate={baseAssetRate}\n      fiat={fiat}\n      resetFlow={onComplete}\n      onComplete={onComplete}\n    />\n  );\n}\n","import { ValuesType } from 'utility-types';\n\nimport { TAction, TokenMigrationState } from '@types';\n\nexport type ReducerAction = TAction<ValuesType<typeof tokenMigrationReducer.actionTypes>, any>;\n\nexport const tokenMigrationReducer = (\n  state: TokenMigrationState,\n  action: ReducerAction\n): TokenMigrationState => {\n  switch (action.type) {\n    case tokenMigrationReducer.actionTypes.SELECT_MIGRATION: {\n      return { ...state, migration: action.payload };\n    }\n    case tokenMigrationReducer.actionTypes.FORM_SUBMIT: {\n      const { account, amount } = action.payload;\n      return { ...state, account, amount };\n    }\n\n    default:\n      return state;\n  }\n};\n\ntokenMigrationReducer.actionTypes = {\n  SELECT_MIGRATION: 'SELECT_MIGRATION',\n  FORM_SUBMIT: 'FORM_SUBMIT'\n};\n"],"sourceRoot":""}