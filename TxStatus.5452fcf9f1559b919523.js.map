{"version":3,"sources":["webpack:///./src/features/TxStatus/TxStatus.tsx","webpack:///./src/features/TxStatus/helpers.ts","webpack:///./src/features/TxStatus/TxStatus.reducer.tsx"],"names":["Wrapper","styled","div","fullPageLoading","SButton","Button","SLabel","label","SPACING","SM","COLORS","GREY_DARKEST","withRouter","history","location","qs","queryString","parse","search","assets","useAssets","networks","useNetworks","accounts","useSelector","getStoreAccounts","txHistory","getMergedTxHistory","defaultTxHash","hash","defaultNetwork","network","DEFAULT_NETWORK","initialState","generateInitialState","reducerState","dispatch","useReducer","txStatusReducer","networkId","txHash","tx","error","fetching","fromLink","useEffectOnce","isVoid","handleSubmit","useUpdateEffect","replace","ROUTE_PATHS","TX_STATUS","path","useEffect","fetchTxStatus","txCache","then","t","makeTx","type","actionTypes","FETCH_TX_SUCCESS","payload","catch","e","console","FETCH_TX_ERROR","fromLinkSharing","FETCH_TX","isFormValid","length","isHexString","ContentPanel","heading","translateRaw","NetworkSelector","undefined","onChange","n","SET_NETWORK","htmlFor","Input","name","value","SET_TX_HASH","currentTarget","InlineMessage","disabled","loading","onClick","fullwidth","Spinner","color","size","TxReceipt","txConfig","config","txReceipt","receipt","resetFlow","noOp","onComplete","disableDynamicTxReceiptDisplay","disablePendingState","CLEAR_FORM","colorScheme","async","find","id","cachedTx","asset","fetchedTx","provider","ProviderHandler","getTransactionByHash","makeTxConfigFromTxReceipt","fetchedTxConfig","makeTxConfigFromTx","makeUnknownTxReceipt","ITxType","UNKNOWN","state","action"],"mappings":"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","file":"TxStatus.5452fcf9f1559b919523.js","sourcesContent":["import { useEffect, useReducer } from 'react';\n\nimport { isHexString } from '@ethersproject/bytes';\nimport { Input } from '@mycrypto/ui';\nimport queryString from 'query-string';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {\n  Button,\n  ContentPanel,\n  InlineMessage,\n  NetworkSelector,\n  Spinner,\n  TxReceipt\n} from '@components';\nimport { DEFAULT_NETWORK, ROUTE_PATHS } from '@config';\nimport { useAssets, useNetworks } from '@services';\nimport { getMergedTxHistory, getStoreAccounts, useSelector } from '@store';\nimport { COLORS, SPACING } from '@theme';\nimport { translateRaw } from '@translations';\nimport { ITxReceipt } from '@types';\nimport { isVoid, noOp } from '@utils';\nimport { useEffectOnce, useUpdateEffect } from '@vendor';\n\nimport { fetchTxStatus, makeTx } from './helpers';\nimport { generateInitialState, txStatusReducer } from './TxStatus.reducer';\n\nconst Wrapper = styled.div<{ fullPageLoading: boolean }>`\n  ${({ fullPageLoading }) =>\n    fullPageLoading &&\n    `\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`}\n  min-height: 600px;\n`;\n\nconst SButton = styled(Button)`\n  margin-top: 0;\n`;\n\nconst SLabel = styled.label`\n  margin-top: ${SPACING.SM};\n  color: ${COLORS.GREY_DARKEST};\n  font-weight: normal;\n`;\n\nconst TxStatus = ({ history, location }: RouteComponentProps) => {\n  const qs = queryString.parse(location.search);\n\n  const { assets } = useAssets();\n  const { networks } = useNetworks();\n  const accounts = useSelector(getStoreAccounts);\n  const txHistory = useSelector(getMergedTxHistory);\n\n  const defaultTxHash = qs.hash ? qs.hash : '';\n  const defaultNetwork = qs.network ? qs.network : DEFAULT_NETWORK;\n\n  const initialState = generateInitialState(defaultTxHash, defaultNetwork);\n\n  const [reducerState, dispatch] = useReducer(txStatusReducer, initialState);\n\n  const { networkId, txHash, tx, error, fetching, fromLink } = reducerState;\n  // Fetch TX on load if possible\n  useEffectOnce(() => {\n    if (!isVoid(defaultTxHash)) {\n      handleSubmit(true);\n    }\n  });\n\n  // Update URL\n  useUpdateEffect(() => {\n    if (networkId === DEFAULT_NETWORK) {\n      history.replace(`${ROUTE_PATHS.TX_STATUS.path}/?hash=${txHash}`);\n    } else {\n      history.replace(`${ROUTE_PATHS.TX_STATUS.path}/?hash=${txHash}&network=${networkId}`);\n    }\n  }, [txHash, networkId]);\n\n  useEffect(() => {\n    if (fetching) {\n      fetchTxStatus({ networks, txHash, networkId, txCache: txHistory })\n        .then((t) => makeTx({ txHash, networkId, accounts, assets, networks, ...t }))\n        .then((t) => dispatch({ type: txStatusReducer.actionTypes.FETCH_TX_SUCCESS, payload: t }))\n        .catch((e) => {\n          console.error(e);\n          dispatch({ type: txStatusReducer.actionTypes.FETCH_TX_ERROR });\n        });\n    }\n  }, [fetching]);\n\n  const handleSubmit = (fromLinkSharing: boolean) => {\n    dispatch({ type: txStatusReducer.actionTypes.FETCH_TX, payload: fromLinkSharing });\n  };\n\n  const clearForm = () => {\n    dispatch({ type: txStatusReducer.actionTypes.CLEAR_FORM });\n  };\n\n  const fullPageLoading = fromLink && !tx;\n\n  const isFormValid = txHash.length > 0 && isHexString(txHash);\n\n  return (\n    <ContentPanel heading={translateRaw('TX_STATUS')}>\n      <Wrapper fullPageLoading={fullPageLoading ?? false}>\n        {!tx && !fromLink && (\n          <>\n            <NetworkSelector\n              network={networkId ? networkId : undefined}\n              onChange={(n) =>\n                dispatch({ type: txStatusReducer.actionTypes.SET_NETWORK, payload: n })\n              }\n            />\n            <SLabel htmlFor=\"txhash\">{translateRaw('TX_HASH')}</SLabel>\n            <Input\n              name=\"txhash\"\n              value={txHash}\n              onChange={(e) =>\n                dispatch({\n                  type: txStatusReducer.actionTypes.SET_TX_HASH,\n                  payload: e.currentTarget.value\n                })\n              }\n            />\n            {error && <InlineMessage value={error} />}\n            <Button\n              disabled={!isFormValid}\n              loading={fetching}\n              onClick={() => handleSubmit(false)}\n              fullwidth={true}\n            >\n              {translateRaw('FETCH')}\n            </Button>\n          </>\n        )}\n        {fullPageLoading && <Spinner color=\"brand\" size={4} />}\n        {tx && (\n          <>\n            <TxReceipt\n              txConfig={tx.config}\n              txReceipt={tx.receipt as ITxReceipt}\n              resetFlow={noOp}\n              onComplete={noOp}\n              disableDynamicTxReceiptDisplay={true}\n              disablePendingState={true}\n            />\n            <SButton onClick={clearForm} fullwidth={true} colorScheme={'inverted'}>\n              {translateRaw('TX_STATUS_GO_BACK')}\n            </SButton>\n          </>\n        )}\n      </Wrapper>\n    </ContentPanel>\n  );\n};\n\nexport default withRouter(TxStatus);\n","import { TransactionResponse } from '@ethersproject/providers';\n\nimport { makeTxConfigFromTx, makeTxConfigFromTxReceipt, makeUnknownTxReceipt } from '@helpers';\nimport { ITxHistoryEntry, ProviderHandler } from '@services';\nimport { Asset, ITxHash, ITxReceipt, ITxType, Network, NetworkId, StoreAccount } from '@types';\n\nexport const fetchTxStatus = async ({\n  txHash,\n  networkId,\n  networks,\n  txCache\n}: {\n  txHash: string;\n  networkId: NetworkId;\n  networks: Network[];\n  txCache: ITxHistoryEntry[];\n}) => {\n  const network = networks.find((n) => n.id === networkId)!;\n  const cachedTx = txCache.find(\n    (t) => t.hash === (txHash as ITxHash) && t.asset.networkId === networkId\n  );\n  if (cachedTx) {\n    return { cachedTx, fetchedTx: undefined };\n  }\n  const provider = new ProviderHandler(network);\n  const fetchedTx = await provider.getTransactionByHash(txHash as ITxHash, true);\n  if (!fetchedTx) {\n    return;\n  }\n  return { fetchedTx, cachedTx: undefined };\n};\n\nexport const makeTx = ({\n  txHash,\n  networkId,\n  networks,\n  accounts,\n  assets,\n  cachedTx,\n  fetchedTx\n}: {\n  txHash: string;\n  networkId: NetworkId;\n  networks: Network[];\n  accounts: StoreAccount[];\n  assets: Asset[];\n  cachedTx?: ITxHistoryEntry | ITxReceipt;\n  fetchedTx?: TransactionResponse;\n}) => {\n  const network = networks.find((n) => n.id === networkId)!;\n  if (cachedTx) {\n    return {\n      config: makeTxConfigFromTxReceipt(cachedTx as ITxReceipt, assets, network, accounts),\n      receipt: cachedTx\n    };\n  } else {\n    const fetchedTxConfig = makeTxConfigFromTx(fetchedTx!, assets, network, accounts);\n    return {\n      config: fetchedTxConfig,\n      receipt: makeUnknownTxReceipt(txHash as ITxHash)(ITxType.UNKNOWN, fetchedTxConfig)\n    };\n  }\n};\n","import { ValuesType } from 'utility-types';\n\nimport { DEFAULT_NETWORK } from '@config';\nimport translate from '@translations';\nimport { NetworkId, TAction } from '@types';\n\nimport { makeTx } from './helpers';\n\ninterface State {\n  txHash: string;\n  networkId: NetworkId;\n  tx?: ReturnType<typeof makeTx>;\n  fetching: boolean;\n  fromLink?: boolean;\n  error?: JSX.Element;\n}\n\nexport type ReducerAction = TAction<ValuesType<typeof txStatusReducer.actionTypes>, any>;\n\nexport const generateInitialState = (txHash: string, networkId: NetworkId) => ({\n  txHash,\n  networkId,\n  fetching: false,\n  error: undefined\n});\n\nexport const txStatusReducer = (state: State, action: ReducerAction): State => {\n  switch (action.type) {\n    case txStatusReducer.actionTypes.SET_NETWORK: {\n      return { ...state, networkId: action.payload };\n    }\n\n    case txStatusReducer.actionTypes.SET_TX_HASH: {\n      return { ...state, txHash: action.payload };\n    }\n\n    case txStatusReducer.actionTypes.FETCH_TX: {\n      const fromLink = action.payload;\n      return { ...state, fetching: true, fromLink };\n    }\n\n    case txStatusReducer.actionTypes.FETCH_TX_SUCCESS: {\n      const tx = action.payload;\n      return {\n        ...state,\n        fetching: false,\n        tx,\n        error: !tx ? translate('TX_NOT_FOUND') : undefined,\n        fromLink: false\n      };\n    }\n\n    case txStatusReducer.actionTypes.FETCH_TX_ERROR: {\n      return { ...state, fetching: false, error: translate('TX_NOT_FOUND'), fromLink: false };\n    }\n\n    case txStatusReducer.actionTypes.CLEAR_FORM: {\n      return {\n        tx: undefined,\n        txHash: '',\n        networkId: DEFAULT_NETWORK,\n        fetching: false,\n        error: undefined\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\ntxStatusReducer.actionTypes = {\n  SET_NETWORK: 'SET_NETWORK',\n  SET_TX_HASH: 'SET_TX_HASH',\n  FETCH_TX: 'FETCH_TX',\n  FETCH_TX_SUCCESS: 'FETCH_TX_SUCCESS',\n  FETCH_TX_ERROR: 'FETCH_TX_ERROR',\n  CLEAR_FORM: 'CLEAR_FORM'\n};\n"],"sourceRoot":""}